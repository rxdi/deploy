import { __DEPLOYER_OUTPUT_CONFIG_NAME } from '../../../env.injection.tokens';
import { BootstrapLogger } from '@rxdi/core';
import { FileUserService } from '../file/file-user.service';
import { IPFSFile } from '@gapi/ipfs';
import { ParcelBundlerService } from '../parcel-bundler/parcel-bundler.service';
import { FileIpfsService } from '../ipfs-file/ipfs-file.service';
import { FileService } from '../file/file.service';
import { TypescriptDefinitionGeneratorService } from '../dts-generator/dts-generator.service';
import { TsConfigGenratorService } from '../tsconfig-generator/tsconfig-generator.service';
import { TableService } from '../table-service/table-service';
import { BuildHistoryService } from '../build-history/build-history.service';
import { PreviwsService } from '../previews/previews.service';
import { ErrorReasonService } from '../error-reason/error-reason.service';
export declare class CompilePlugin {
    private parcelBundler;
    private logger;
    private ipfsFile;
    private fileService;
    private fileUserService;
    private typingsGenerator;
    private tsConfigGenerator;
    private tableService;
    private buildHistoryService;
    private previwsService;
    private errorReasonService;
    private fileName;
    private folder;
    private resolutionTime;
    private outputConfigName;
    private namespace;
    private $deploymentStatus;
    private commitMessage;
    private extension;
    constructor(parcelBundler: ParcelBundlerService, logger: BootstrapLogger, ipfsFile: FileIpfsService, fileService: FileService, fileUserService: FileUserService, typingsGenerator: TypescriptDefinitionGeneratorService, tsConfigGenerator: TsConfigGenratorService, tableService: TableService, buildHistoryService: BuildHistoryService, previwsService: PreviwsService, errorReasonService: ErrorReasonService);
    register(): Promise<void>;
    compile(): Promise<import("rxjs/internal/Subscription").Subscription>;
    completeBuildAndAddToIpfs(folder: string, file: string, message: any, namespace: string, outputConfigName: __DEPLOYER_OUTPUT_CONFIG_NAME): import("rxjs/internal/Observable").Observable<{}>;
    writeOtherFile(file: any): import("rxjs/internal/Observable").Observable<IPFSFile[]>;
    logSuccess(res: any): void;
    completeBuildAndAddToIpfs2(namespace?: string): import("rxjs/internal/Observable").Observable<IPFSFile[]>;
}
