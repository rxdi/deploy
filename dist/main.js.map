{"version":3,"sources":["commands-description.ts","commands.ts","check-arguments.ts","app/services/helpers/helpers.ts","app/services/logger/logger.service.ts","app/services/arguments/arguments.service.ts","env.injection.tokens.ts","app/services/tsconfig-generator/tsconfig-generator.service.ts","app/services/file/file.service.ts","environment-setter.module.ts","app/services/ipfs-file/ipfs-file.service.ts","app/services/parcel-bundler/parcel-bundler.service.ts","app/services/file/file-user.service.ts","app/services/dts-generator/dts-generator.service.ts","app/status/status-injection.tokens.ts","app/services/table-service/table-service.ts","app/status/status.service.ts","app/status/status.module.ts","app/services/build-history/build-history.service.ts","app/services/error-reason/error-reason.service.ts","app/services/previous/previous.service.ts","app/services/package-json/package-json.service.ts","app/server/namespace/services/namespace.service.ts","app/services/time/time.service.ts","app/services/html-template-builder/html-template-builder.service.ts","app/services/index.ts","app/server/file/services/file.service.ts","app/plugins/compile/template.ts","app/plugins/compile/compile.plugin.ts","app/server/services/webui.service.ts","app/server/services/server-push.service.ts","app/server/user/types/user.type.ts","app/server/user/user-queries.controller.ts","app/server/build/types/built-status.type.ts","app/server/history/types/history.type.ts","app/server/history/history-subscription.controller.ts","app/server/history/history.module.ts","app/server/services/compile.service.ts","app/server/namespace/types/namespace.type.ts","app/server/namespace/types/namespace-list.type.ts","app/server/namespace/namespace.controller.ts","app/server/namespace/namespace.module.ts","app/server/build/types/build-meta-info.type.ts","app/server/build/types/build.type.ts","app/server/history/types/history-list.type.ts","app/server/build/types/process.type.ts","app/server/build/build.controller.ts","app/server/build/build.module.ts","app/server/file/types/file.arguments.ts","app/server/file/types/file-status.type.ts","app/server/file/types/folder-structure.type.ts","app/server/file/types/file.type.ts","app/server/file/types/file-raw.type.ts","app/server/file/file.controller.ts","app/server/file/file.module.ts","app/server/transactions/types/transaction-enum.type.ts","app/server/transactions/types/transaction.type.ts","app/server/transactions/services/transaction/transaction.service.ts","app/core/api-introspection/index.ts","app/server/transactions/transactions.controller.ts","app/server/transactions/transactions.module.ts","app/server/server.module.ts","app/core/helpers/transpile-typescript.ts","app/core/helpers/get-first-item.ts","app/core/helpers/get-second-item.ts","app/app.module.ts","gapi-framework-imports.ts","app/core/helpers/npm-install.ts","main.ts"],"names":[],"mappings":";AAAa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAqB,CACnB,YAAA,8CACA,YAAA,uBACH,SAAA,qCACK,cAAA,6HACL,SAAA,kIACA,SAAA,yFAER,iBAAA,uGACS,UAAA,sHACO,iBAAA,2CACO,wBAAA,0DACV,cAAA,6DACH,WAAA,uCACE,aAAA,gEACD,YAAA,yDACC,aAAA,oCACD,YAAA,2DACU,sBAAA,kFACD,qBAAA,uDACH,kBAAA,iDACF,gBAAA,mJACS,yBAAA,8GACZ,aAAA,2BACa,0BAAA,gEAEzB,yBAAA,+IAEA,8BAAA,+FACkC,mCAAA,0CACX,wBAAA,8CACH,qBAAA,qCAEpB,kBAAA,sHAEA,wBAAA,2HACqB,sBAAA,0CACD,qBAAA,wFAEpB,gBAAA,uGAC8B,+BAAA,oDACV,qBAAA,0EACZ,SAAA,qBAER,yBAAA,iGAEA,8BAAA,6HACmB,oBAAA,0CACJ,gBAAA,gGACL,WAAA,iDACC,YAAA;;ACSf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3DA,MAAA,EAAA,QAAA,0BAEA,SAAS,EAA0B,GAC1B,OAAA,EAAE,OAAO,CAAC,EAAK,KACpB,EAAI,GAAO,EACJ,GACN,OAAO,OAAO,OAGN,QAAA,SAAW,EAAQ,CAC9B,YACA,YACA,SACA,cACA,SACA,SACA,iBACA,UACA,iBACA,cACA,WACA,aACA,YACA,MACA,aACA,YACA,sBACA,yBACA,0BACA,yBACA,8BACA,gBACA,aACA,mCACA,wBACA,wBACA,sBACA,qBACA,kBACA,qBACA,+BACA,qBACA,yBACA,SACA,qBACA,kBACA,gBACA,wBACA,8BACA,oBACA,gBACA,WACA,cAIW,QAAA,oBAAsB,EAAQ,CAAC,QAG5C,OAAO,KAAK,QAAA,UAAU,IAAI,IACpB,GAAA,OAAO,KAAK,QAAA,qBAAqB,OAAO,GAAK,IAAM,GAAS,OAC9D,OAEmB,OAAO,KAAK,EAAA,oBAAoB,OAAO,GAAK,IAAM,GAAS,SAE9E,QAAQ,sCACiB,kHAEzB,QAAQ,KAAK;;AClDJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlBb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,0BAEM,EAAgB,CAAC,EAAW,EAAW,EAAqB,MAC1D,MAAA,EAAQ,EAAE,MAAM,IAChB,EAAS,EAAE,MAAM,IAEjB,EADa,EAAM,OAAO,CAAC,EAAQ,IAAU,IAAW,EAAO,IAAQ,OACrC,EAAM,OAAU,IACpD,OAAA,EAAoB,IACtB,QAAQ,IAAI,qBAAsB,EAAoB,KAC/C,IAKL,EAAO,QAAQ,KAAK,MAAM,GAC1B,EAAmB,EAAK,OAAO,GAAK,EAAE,SAAS,OAExC,QAAA,eAAiB,MAC5B,EAAiB,IAAI,IAEf,IADiB,OAAO,KAAK,EAAA,oBAAoB,OAAO,GAAK,IAAM,GAAS,QAC3D,EAAK,OAAQ,CAC1B,MAAA,EAAY,OAAO,KAAK,EAAA,UAC3B,OAAO,GAAK,EAAc,EAAE,MAAM,MAAM,GAAI,EAAQ,MAAM,MAAM,KAChE,WACC,IAAA,EAAU,GACV,EAAU,SACZ,qBAA6B,MAE/B,QAAQ,2BACI,MAAY,uEAGxB,QAAQ,KAAK;;AC9BN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IADA,QAAA,SAAY,CAAA,GAAgB,QAAQ,KAAK,WAAW,SAAS,IAC7D,QAAA,cAAgB,EAAC,EAAa,GAAU,EAAM,EAAO,CAAA,GAAK,MACjE,GAAA,QAAQ,KAAK,WAAW,SAAS,GAAI,CACjC,MAAA,EAAwB,QAAQ,KAAK,QAAQ,KAAK,QAAQ,GAAK,GACjE,OAAC,EAGD,EAAsB,SAAS,MAC1B,EAEF,EAAK,GALH,EAOJ,OAAA;;ACVI,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,QAGA,IAAa,EAAb,MADA,cAEE,KAAA,OAAkC,IAAI,EAAA,gBAAgB,MAD3C,EAAa,EAAA,CADzB,EAAA,WACY,GAAA,QAAA,cAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cAEA,EAAA,QAAA,sBAGA,IAAa,EAAb,MACE,cAAc,EAAa,EAAgB,KAAM,EAAO,CAAA,GAAK,IACpD,OAAA,EAAA,cAAc,EAAG,EAAU,KAFzB,EAAgB,EAAA,CAD5B,EAAA,WACY,GAAA,QAAA,iBAAA;;AC2Fb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhGA,MAAA,EAAA,QAAA,cAiCa,QAAA,cAAgB,IAAI,EAAA,eAAe,eACnC,QAAA,eAAiB,IAAI,EAAA,eAAe,sBACpC,QAAA,qBAAuB,IAAI,EAAA,eAAe,mCAC1C,QAAA,uBAAyB,IAAI,EAAA,eAAwB,yCACrD,QAAA,gBAAkB,IAAI,EAAA,eAAwB,+BAC9C,QAAA,uBAAyB,IAAI,EAAA,eAAwB,sCACrD,QAAA,kBAAoB,IAAI,EAAA,eAAe,iCACvC,QAAA,qBAAuB,IAAI,EAAA,eAAwB,mCACnD,QAAA,YAAc,IAAI,EAAA,eAAwB,2BAC1C,QAAA,YAAc,IAAI,EAAA,eAAwB,2BAC1C,QAAA,YAAc,IAAI,EAAA,eAAwB,2BAC1C,QAAA,SAAW,IAAI,EAAA,eAAwB,wBACvC,QAAA,iBAAmB,IAAI,EAAA,eAAwB,gCAC/C,QAAA,4BAA8B,IAAI,EAAA,eAAwB,sCAC1D,QAAA,8BAAgC,IAAI,EAAA,eAC/C,gDAEW,QAAA,uBAAyB,IAAI,EAAA,eAAwB,qCACrD,QAAA,yBAA2B,IAAI,EAAA,eAAwB,uCACvD,QAAA,sBAAwB,IAAI,EAAA,eAAwB,oCACpD,QAAA,oBAAsB,IAAI,EAAA,eAAwB,+BAClD,QAAA,yBAA2B,IAAI,EAAA,eAAwB,wCACvD,QAAA,mBAAqB,IAAI,EAAA,eAAwB,mCACjD,QAAA,wBAA0B,IAAI,EAAA,eAAwB,uCACtD,QAAA,eAAiB,IAAI,EAAA,eAAwB,oCAC7C,QAAA,WAAa,IAAI,EAAA,eAAwB,gCACzC,QAAA,iBAAmB,IAAI,EAAA,eAAwB,gCAC/C,QAAA,mBAAqB,IAAI,EAAA,eAAwB,gCAEjD,QAAA,eAAiB,IAAI,EAAA,eAAgC,0CAoBlE,MAAa,GAAb,QAAA,SAAA,EAcA,MAAa,GAAb,QAAA,cAAA;;AC7Fa,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,cAGA,IAAa,EAAb,MACE,YAAY,GACH,oqBA6BA,kBAKT,iBACS,MAAA,uEArCE,EAAuB,EAAA,CADnC,EAAA,WACY,GAAA,QAAA,wBAAA;;ACCA,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,MAGA,IAAa,EAAb,MACE,YAAoB,EAAsC,GAAtC,KAAA,YAAA,EAAsC,KAAA,OAAA,EAE1D,UAAU,GACD,OAAA,KAAK,YAAY,OAAO,GAG3B,SAAS,GAPJ,OAAA,EAAA,UAAA,OAAA,EAAA,YAQF,aAAM,KAAK,kBAAkB,KAGhC,UAAU,EAAc,GAXnB,OAAA,EAAA,UAAA,OAAA,EAAA,YAYF,aAAM,KAAK,mBAAmB,EAAM,KAGvC,aAAa,GAfR,OAAA,EAAA,UAAA,OAAA,EAAA,YAgBF,aAAM,KAAK,YAAY,OAAO,GAAQ,cAG/C,WAAW,GACF,OAAA,KAAK,YAAY,WAAW,GAG7B,kBAAkB,GACjB,OAAA,IAAI,QAAQ,CAAC,EAAS,KAC3B,EAAA,SAAS,EAAM,OAAQ,CAAC,EAAK,KACvB,GACF,EAAO,GAET,EAAQ,OAKd,0BAA0B,GACjB,OAAA,IAAI,QAAQ,CAAO,EAAS,IAAU,EAAA,UAAA,OAAA,EAAA,YAC3C,EAAA,SAAS,EAAM,OAAQ,CAAC,EAAK,IACvB,GACG,KAAA,OAAO,MAAM,wDACX,KAAK,UACV,EACA,KAAK,UAAU,CACb,KAAM,GACN,QAAS,GACT,OAAQ,GACR,QAAS,GACT,SAAU,MAGX,KAAK,IAAW,EAAA,UAAA,OAAA,EAAA,YAAC,OAAA,QAAc,KAAK,kBAAkB,OACtD,MAAM,GAAK,EAAO,KAEhB,EAAQ,OAKb,mBAAmB,EAAc,EAAW,EAAmB,SAC9D,OAAA,IAAI,QAAQ,CAAC,EAAS,KAC3B,EAAA,UAAU,EAAM,EAAM,CAAE,SAAA,GAAY,IAC9B,GACF,EAAO,GAET,GAAQ,OAKd,YAAY,GACH,OAAA,IAAI,QAAQ,CAAC,EAAS,KAC3B,EAAA,SAAS,EAAM,CAAC,EAAK,KACf,GACF,EAAO,GAET,EAAQ,SA1EH,EAAW,EAAA,CADvB,EAAA,UAEkC,EAAA,oBAAA,CAAe,mBAAf,OAAe,IAAf,EAAA,aAAA,EAAA,aAAe,EAAA,OAAiC,mBAAjC,OAAiC,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,UADtE,GAAA,QAAA,YAAA;;AC0Sb,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA9SA,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,8CACA,EAAA,QAAA,0BA4BA,EAAA,QAAA,gEACA,EAAA,QAAA,oCACA,EAAA,QAAA,MACM,EAAY,QAAQ,QAC1B,EAAA,QAAA,kCACA,EAAA,QAAA,MAkQA,IAAa,EAAb,QAAa,EAAuB,EAAA,CAhQnC,EAAA,OAAO,CACN,SAAU,CACR,CACE,QAAS,eACT,KAAM,CAAC,EAAA,aACP,MAAM,EACN,WAAmB,GAA4B,EAAA,UAAA,OAAA,EAAA,YACvC,MAAA,KAAkB,EAAA,8BAClB,KAAc,EAAA,mCAChB,UACI,EAAY,SAAS,GAC3B,EAAA,WAAW,GACX,MAAO,IACL,UACI,EAAY,SAAS,GAC3B,EAAA,WAAW,GACX,MAAO,IACF,OAAA,KAGX,CACE,QAAS,EAAA,qBACT,WAAY,IAAM,QAAQ,KAAK,MAAM,IAEvC,CACE,QAAS,EAAA,eACT,SAAU,UAAU,QAAQ,OAAQ,IAAM,iBAE5C,CACE,QAAS,EAAA,cACT,SAAU,UAAU,QAAQ,OAAQ,KAEtC,CACE,QAAS,EAAA,WACT,SAAU,EAAA,WAEZ,CACE,QAAS,EAAA,iBACT,KAAM,CAAC,EAAA,sBACP,WAAa,IACL,MAAA,EAAc,EAAA,cAAc,aAAa,GAC3C,OAAA,IAGA,EAAK,IAAM,EAAK,GAAG,SAAS,MACvB,GAEF,EAAK,IAAM,MAGtB,CACE,QAAS,EAAA,uBACT,WAAY,IAAM,EAAA,SAAS,cAE7B,CACE,QAAS,EAAA,gBACT,WAAY,KAAO,EAAA,SAAS,eAE9B,CACE,QAAS,EAAA,uBACT,WAAY,IAAM,EAAA,cAAc,YAAa,UAE/C,CACE,QAAS,EAAA,kBACT,WAAY,KAAO,CACjB,OAAO,EACP,SAAU,EACV,gBAAgB,KAGpB,CACE,QAAS,EAAA,qBACT,WAAY,IAA4B,EAAA,SAAS,eAEnD,CACE,QAAS,EAAA,YACT,KAAM,CAAC,EAAA,sBACP,WAAa,GACP,EAAA,SAAS,UACJ,EAAA,cAAc,SAAU,IAE7B,EAAK,IAAM,EAAK,GAAG,SAAS,OAAS,EAAK,KAAO,EAAK,GAAG,MAAM,kBAC1D,aAEF,EAAK,IAAM,cAGtB,CACE,QAAS,EAAA,YACT,KAAM,CAAC,EAAA,aACP,WAAa,GAA0B,EAAS,MAAM,KAAK,OAE7D,CACE,QAAS,EAAA,YACT,KAAM,CAAC,EAAA,sBACP,WAAa,GACP,EAAA,SAAS,eACJ,EAAA,cAAc,cAAe,SAElC,EAAK,IAAM,EAAK,GAAG,SAAS,MACvB,QAEF,EAAK,IAAM,SAGtB,CACE,QAAS,EAAA,SACT,KAAM,CAAC,EAAA,aACP,WAAa,GAA0B,EAAS,UAAU,EAAG,EAAS,YAAY,OAEpF,CACE,QAAS,EAAA,iBACT,KAAM,CAAC,EAAA,aACP,WAAa,GACJ,EAAS,MAAM,6BAA+B,EAAS,MAAM,6BAA6B,GAAK,MAG1G,CACE,QAAS,EAAA,4BACT,WAAY,IAAM,EAAA,cAAc,SAAU,GAAI,SAEhD,CACE,QAAS,EAAA,8BACT,SAAU,EAAA,cAAc,yBAA0B,kBAEpD,CACE,QAAS,EAAA,uBACT,WAAY,IAAM,KAAK,OAEzB,CACE,QAAS,EAAA,yBACT,WAAY,IAAM,EAAA,cAAc,yBAA0B,kBAE5D,CACE,QAAS,EAAA,sBACT,KAAM,CAAC,EAAA,kBACP,WAAY,IAAM,EAAA,cAAc,yBAA0B,kBAE5D,CACE,QAAS,EAAA,mBACT,KAAM,CAAC,EAAA,kBACP,WAAY,IAAM,EAAA,cAAc,SAAU,wCAE5C,CACE,QAAS,sBACT,KAAM,CAAC,EAAA,qBAAsB,EAAA,YAAa,EAAA,SAAU,EAAA,wBAAyB,EAAA,aAC7E,MAAM,EACN,WAAY,CACV,EACA,EACA,EACA,EACA,IACE,EAAA,UAAA,OAAA,EAAA,YAIK,OAHH,UACI,EAAY,UAAU,EAAS,iBAAkB,EAAU,YAAY,EAAS,QAAQ,MAAO,OAEhG,KAGX,CACE,QAAS,EAAA,oBACT,KAAM,CAAC,EAAA,YACP,MAAM,EACN,WAAY,GACV,IAAI,QAAQ,IACJ,MAAA,EAAW,IAAI,EAAU,CAC7B,YAAa,mBACb,UAAU,EACV,eAAe,IAEjB,EAAS,aAAa,IAChB,GAAA,EACI,MAAA,IAAI,MAAM,2BAElB,EAAQ,QAIhB,CACE,QAAS,EAAA,eACT,KAAM,CAAC,EAAA,YACP,MAAM,EACN,WAAY,GACV,IAAI,QAAQ,IACJ,MAAA,EAAW,IAAI,EAAU,CAC7B,YAAa,oBACb,UAAU,EACV,eAAe,IAEjB,EAAS,aAAa,IAChB,GAAA,EACI,MAAA,IAAI,MAAM,2BAElB,EAAQ,QAIhB,CACE,QAAS,EAAA,yBACT,KAAM,CAAC,EAAA,YACP,MAAM,EACN,WAAY,GACV,IAAI,QAAQ,IACJ,MAAA,EAAW,IAAI,EAAU,CAC7B,YAAa,kBACb,UAAU,EACV,eAAe,IAEjB,EAAS,aAAa,IAChB,GAAA,EACI,MAAA,IAAI,MAAM,2BAElB,EAAQ,QAIhB,CACE,QAAS,EAAA,mBACT,KAAM,CAAC,EAAA,YACP,MAAM,EACN,WAAY,GACV,IAAI,QAAQ,IACJ,MAAA,EAAW,IAAI,EAAU,CAC7B,YAAa,mBACb,UAAU,IAEZ,EAAS,aAAa,IAChB,GAAA,EACI,MAAA,IAAI,MAAM,2BAElB,EAAQ,QAIhB,CACE,QAAS,EAAA,wBACT,KAAM,CAAC,EAAA,YACP,MAAM,EACN,WAAY,GACV,IAAI,QAAQ,IACJ,MAAA,EAAW,IAAI,EAAU,CAC7B,YAAa,uBACb,UAAU,EACV,eAAe,IAEjB,EAAS,aAAa,IAChB,GAAA,EACI,MAAA,IAAI,MAAM,2BAElB,EAAQ,YAMP,GAAA,QAAA,wBAAA;;AC1RA,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAXb,MAAA,EAAA,QAAA,cAEA,EAAA,QAAA,UACA,EAAA,QAAA,2CACA,EAAA,QAAA,qBACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,SACA,EAAA,QAAA,kBAGA,IAAa,EAAb,MAQE,YAC+B,EACrB,EACA,GAFqB,KAAA,WAAA,EACrB,KAAA,mBAAA,EACA,KAAA,OAAA,EAVV,KAAA,SAA2B,KAAK,mBAAmB,KACnD,KAAA,UAAY,CACV,OAAQ,+BACR,WAAY,oCACZ,aAAc,wBACd,mBAAoB,KAAK,mBAAmB,KAAK,eAAe,KAAK,mBAAmB,KAAK,qBAQzF,QAAQ,EAAc,GAdjB,OAAA,EAAA,UAAA,OAAA,EAAA,YAeH,MAAA,EAAU,IAAI,EAAA,SAEpB,EAAQ,KAAK,GACb,EAAQ,KAAK,MAEP,MAAA,EAAY,CAAE,QAAA,EAAS,KAAM,MAC/B,GACF,OAAO,OAAO,EAAW,GAErB,MAAA,QAAiB,KAAK,WAAW,IAAI,IAAI,CAAC,IAC5C,IACG,KAAA,KAAK,EAAS,GAAG,MAAM,YAC5B,MAAO,IAOF,OAHF,KAAA,OAAO,mBAAoB,KAAK,UAAU,aAAa,EAAS,GAAG,QAGjE,IAGH,SAAS,GArCJ,OAAA,EAAA,UAAA,OAAA,EAAA,YAsCH,MAAA,EAAgB,EAAM,IAAI,IACxB,MAAA,EAAU,IAAI,EAAA,SAGb,OAFP,EAAQ,KAAK,GACb,EAAQ,KAAK,MACN,CAAE,QAAA,KAEJ,aAAM,KAAK,WAAW,IAAI,IAAI,KAGvC,KAAK,GACI,OAAA,KAAK,kBAAkB,KAAK,UAAU,WAAW,KAAQ,KAC9D,EAAA,UAAU,IACR,EAAA,cACE,KAAK,kBAAkB,KAAK,UAAU,SAAS,KAC/C,KAAK,kBAAkB,KAAK,UAAU,aAAa,KACnD,KAAK,kBAAkB,KAAK,UAAU,eAAe,QAM7D,eAAe,GACN,OAAA,EAAA,WAAW,OAAO,IACnB,EAAK,SAAS,SAChB,EAAA,IAAM,EAAM,GAAK,EAAE,KAAK,IAExB,EAAA,IAAK,EAAM,GAAK,EAAE,KAAK,MAIvB,KAAK,GApEA,OAAA,EAAA,UAAA,OAAA,EAAA,YAqEF,aAAM,IAAI,QAAQ,CAAC,EAAS,IACjC,KAAK,KAAK,EAAS,GAAG,MAAM,UAAU,GAAU,EAAQ,GAAS,GAAK,EAAO,OAI3E,WAAW,GA1EN,OAAA,EAAA,UAAA,OAAA,EAAA,YA2EF,aAAM,KAAK,QAAQ,KAAK,UAAU,EAAG,KAAM,MAG9C,YAAY,GA9EP,OAAA,EAAA,UAAA,OAAA,EAAA,YA+EF,aAAM,KAAK,WAAW,IAAI,IAAI,KAGjC,YAAY,GAlFP,OAAA,EAAA,UAAA,OAAA,EAAA,YAmFF,aAAM,KAAK,WAAW,IAAI,IAAI,KAGjC,WAAW,GAtFN,OAAA,EAAA,UAAA,OAAA,EAAA,YAuFH,MAAA,QAAiB,KAAK,WAAW,IAAI,IAAI,CAAC,CAAE,QAAA,KAE3C,OADF,KAAA,KAAK,EAAS,GAAG,MAAM,YACrB,MAzFE,EAAe,EAAA,CAD3B,EAAA,UAUI,EAAA,EAAA,EAAA,OAAO,EAAA,cACoB,EAAA,oBAAA,CAAA,OAAqB,mBAArB,OAAqB,IAArB,EAAA,uBAAA,EAAA,uBAAqB,EAAA,OAClB,mBADkB,OAClB,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,UAXtB,GAAA,QAAA,gBAAA;;ACDA,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,kBACA,EAAA,QAAA,iCAQA,IAAa,EAAb,MACE,YAEU,EACyB,EACO,EACL,GAH3B,KAAA,eAAA,EACyB,KAAA,eAAA,EACO,KAAA,YAAA,EACL,KAAA,SAAA,EAG/B,eAAe,EAAM,EAAS,KAAM,GAT/B,OAAA,EAAA,UAAA,OAAA,EAAA,YAUF,OAAA,IAAI,QAAQ,CAAC,EAAS,KACrB,MAAA,EAAO,OAAA,OAAA,CACX,OAAQ,KAAK,eAAiB,UAAY,OAC1C,OAAQ,KAAK,eACb,aAAa,EACb,QAAS,EACT,OAAQ,GAAU,KAAK,aACpB,KAAK,UAEJ,EAAU,IAAI,EAAQ,EAAM,GAC9B,IAAA,EAAS,KACb,EAAQ,GAAG,UAAW,IAMpB,EAAS,IAEX,EAAQ,GAAG,WAAY,KACrB,QAAQ,KAAK,WAAW,SAAS,YAC5B,QAAQ,IAAM,KAAM,MACrB,QAAQ,OAAO,+CAA+C,EAAO,UACzE,EAAS,KACT,WAAW,IAAM,IAAW,OAE9B,EAAQ,GAAG,aAAc,GAAK,EAAO,IACrC,EAAQ,eArCD,EAAoB,EAAA,CADhC,EAAA,UAGI,EAAA,EAAA,EAAA,OAAO,EAAA,yBAEP,EAAA,EAAA,EAAA,OAAO,EAAA,kBACP,EAAA,EAAA,EAAA,OAAO,EAAA,yBACP,EAAA,EAAA,EAAA,OAAO,EAAA,oBAHgB,EAAA,oBAAA,CAAsB,mBAAtB,OAAsB,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,OACyB,mBADzB,OACyB,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,OACI,mBADJ,OACI,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,OACb,mBADa,OACb,IAAjB,EAAA,mBAAA,EAAA,mBAAiB,EAAA,UANrD,GAAA,QAAA,qBAAA;;ACLA,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,kBACA,EAAA,QAAA,iCAGA,IAAa,EAAb,MAIE,YAAoB,GAAA,KAAA,YAAA,EAEd,UAAU,EAAc,EAAkB,GANrC,OAAA,EAAA,UAAA,OAAA,EAAA,YAOF,aAAM,IAAI,QAAQ,CAAO,EAAS,IAAU,EAAA,UAAA,OAAA,EAAA,YAC5C,KAAA,YAAY,aAAa,KAAK,kBAAkB,KAAa,UAChE,IAAW,EAAA,UAAA,OAAA,EAAA,kBACH,KAAK,YAAY,aAAa,KAAK,kBAAkB,KAAa,IAAY,GACpF,GAAQ,KAEV,GAAK,EAAO,SAKZ,SAAS,EAAc,GAlBlB,OAAA,EAAA,UAAA,OAAA,EAAA,YAmBF,aAAM,IAAI,QAAQ,CAAO,EAAS,IAAU,EAAA,UAAA,OAAA,EAAA,kBAC3C,KAAK,YAAY,UAAU,EAAM,GACvC,GAAQ,UAnBZ,EAAA,CADC,EAAA,OAAO,EAAA,wBACgB,EAAA,cAAsB,mBAAtB,OAAsB,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,SAA9C,EAAA,UAAA,sBAAA,GAFW,EAAe,EAAA,CAD3B,EAAA,UAKkC,EAAA,oBAAA,CAAW,mBAAX,OAAW,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,UAJjC,GAAA,QAAA,gBAAA;;ACAA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,iBACA,EAAA,QAAA,iCAGA,IAAa,EAAb,MAGE,YAAoB,EAAyD,GAAzD,KAAA,OAAA,EAAyD,KAAA,aAAA,EAErE,gBAAgB,EAAmB,EAAqB,GAC1D,IAAC,EACG,MAAA,IAAI,MAAM,wBAEd,IAAC,EACG,MAAA,IAAI,MAAM,6BAGd,IAAC,EACG,MAAA,IAAI,MAAM,2BAId,aAAa,EAAmB,EAAa,GAlBxC,OAAA,EAAA,UAAA,OAAA,EAAA,YAoBF,OADF,KAAA,gBAAgB,EAAW,EAAa,GACtC,IAAI,QAAQ,CAAC,EAAS,KACvB,KAAK,QACF,KAAA,MAAM,OAAO,mBAAmB,QAChC,KAAA,MAAM,OAAO,mBAAmB,QAChC,KAAA,MAAM,mBAAmB,QACzB,KAAA,MAAM,QAEb,QAAQ,IAAM,OAAO,OAAO,QAAQ,IAAK,IACpC,KAAA,OAAO,IAAI,gEACX,KAAA,MAAQ,EAAa,SAAS,KAAK,+BAAgC,CACtE,SACA,EACA,YACA,EACA,QACA,IAEG,KAAA,MAAM,OAAO,GAAG,OAAQ,IAC3B,QAAQ,KAAK,WAAW,SAAS,YAAe,QAAQ,IAAM,KAAM,MAAQ,QAAQ,OAAO,MAAM,KAE9F,KAAA,MAAM,OAAO,GAAG,OAAQ,IACvB,EAAK,WAAW,SAAS,oCACtB,KAAA,OAAO,IAAI,qFAElB,EAAO,QAAQ,OAAO,MAAM,MAEzB,KAAA,MAAM,GAAG,OAAQ,IACf,KAAA,MAAM,OACN,KAAA,MAAQ,KACR,KAAA,OAAO,sCAAsC,OAClD,GAAQ,WAlDH,EAAoC,EAAA,CADhD,EAAA,UAI+C,EAAA,EAAA,EAAA,OAAO,EAAA,iBAAzB,EAAA,oBAAA,CAAe,mBAAf,OAAe,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OAAA,UAHhC,GAAA,QAAA,qCAAA;;ACaA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBb,MAAA,EAAA,QAAA,cAKA,MAAM,EAAN,cACE,KAAA,OAAuB,UACvB,KAAA,QAAmB,IAErB,MAAa,EAAb,cACE,KAAA,KAAqB,IAAI,EACzB,KAAA,QAAwB,IAAI,EAC5B,KAAA,OAAuB,IAAI,GAH7B,QAAA,iCAAA,EAOa,QAAA,MAAQ,IAAI,EAAA,eAAe,uBAC3B,QAAA,uBAAyB,IAAI,EAAA,eAAe;;ACV5C,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,MAAA,EAAA,QAAA,cAEA,EAAA,QAAA,wCACA,EAAA,QAAA,kCAEM,EAAQ,QAAQ,kBAGtB,IAAa,EAAb,MAIE,YAAoB,GAAA,KAAA,gBAAA,EAEpB,yBAAyB,GACnB,IAAA,EAAM,EAeH,MAbc,YAAjB,IACF,EAAO,IACP,EAAQ,UAEW,WAAjB,IACF,EAAO,IACP,EAAQ,OAGW,YAAjB,IACF,EAAO,IACP,EAAQ,SAEH,CAAE,KAAA,EAAM,MAAA,GAGjB,YAAY,EAAkB,EAAqB,GAC7C,EAAE,OAAS,GACb,EAAE,KAAK,EAAE,IAEL,MAAA,EAAW,KAAK,gBAAgB,UAAU,aAC1C,EAAa,KAAK,kBAAkB,WAAW,KAC/C,EAAgB,KAAK,kBAAkB,WAAW,QAClD,EAAe,KAAK,kBAAkB,WAAW,OACjD,EAAa,KAAK,yBAAyB,EAAW,QACtD,EAAgB,KAAK,yBAAyB,EAAc,QAC5D,EAAe,KAAK,yBAAyB,EAAa,QAC1D,EAAU,CAAC,GAAI,SAAU,YAAa,OAAQ,WAChD,IAAA,EAAQ,CAAC,EAAG,KAAM,KAAM,KAAM,OAC5B,MAAA,EAAU,CACd,EAAW,KACX,EAAW,OACX,YACG,EAAK,GAAG,gBACR,IAAW,EAAK,GAAG,QAElB,EAAa,CACjB,EAAc,KACd,EAAc,OACd,aACG,EAAQ,GAAG,gBACX,IAAW,EAAQ,GAAG,QAErB,EAAY,CAChB,EAAa,KACb,EAAa,OACb,YACG,EAAE,GAAG,gBACL,IAAW,EAAE,GAAG,QAGK,YAAtB,EAAW,QAAiD,YAAzB,EAAc,QAAgD,YAAxB,EAAa,SACxF,EAAQ,KAAK,UACb,EAAQ,CAAC,EAAG,KAAM,KAAM,KAAM,MAAO,QAGb,YAAtB,EAAW,QACb,EAAQ,KAAK,EAAW,SAGG,YAAzB,EAAc,QAChB,EAAW,KAAK,EAAc,SAGJ,YAAxB,EAAa,QACf,EAAU,KAAK,EAAa,SAGxB,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAA,EACA,aAAc,EACd,YAAa,IAiFR,OA9EP,EAAE,KAAK,GACP,EAAE,KAAK,GACP,EAAE,KAAK,GACP,EAAE,KAAK,GAEP,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,IACd,CACE,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,UAIX,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,EAAW,QAGtB,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,EAAc,QAGzB,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,EAAa,QAGxB,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,IAKwB,YAAtB,EAAW,QAAiD,YAAzB,EAAc,QAAgD,YAAxB,EAAa,SACxF,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,IACd,CACE,MAAO,QAGX,EAAE,UACA,CAAE,OAAQ,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC3B,CACE,MAAO,SAIN,EAGT,iBAAiB,GACT,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,MAAO,OACf,aAAc,EACd,YAAa,IA2BR,OAxBP,EAAE,KAAK,CAAC,oBAAqB,YAC7B,EAAiB,QAAQ,IACvB,EAAE,KAAK,CAAC,KAAM,KAAK,gBAAgB,UAAU,eAAe,QAG9D,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,CACE,YAAa,IAIV,EAGT,kBAAkB,GACV,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,OACR,aAAc,EACd,YAAa,IAyBR,OAtBP,EAAE,KAAK,CAAC,oBACR,EAAE,KAAK,WAAW,MAElB,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,CACE,YAAa,IAIV,EAGT,aAAa,GACL,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,MAAO,OACf,aAAc,EACd,YAAa,IAGf,EAAE,KAAK,CAAC,mBAAoB,iBACxB,IAAA,GAAS,EACP,MAAA,EAAW,GACX,EAAO,GAiCN,OAhCP,EAAiB,QAAQ,IACnB,GACF,GAAS,EACT,EAAK,KAAK,KAEV,EAAS,KAAK,GACd,GAAS,KAGb,EAAS,QAAQ,CAAC,EAAG,KACnB,EAAE,KAAK,CAAC,EAAG,EAAK,OAGlB,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,CACE,YAAa,IAIV,EAGT,gBAAgB,GACR,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,EAAG,MAAO,OAClB,aAAc,EACd,YAAa,IA4BR,OAzBP,EAAE,KAAK,CAAC,GAAI,OAAQ,SACpB,QAAQ,IAAI,GACZ,EAAQ,QAAQ,IACd,EAAE,KAAK,CAAC,MAAO,EAAE,kCAAmC,EAAE,WAGxD,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,CACE,YAAa,IAIV,EAGT,iBAAiB,GACT,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,QACR,aAAc,EACd,YAAa,IA0BR,OAvBP,EAAE,KAAK,CAAC,uBACR,EAAE,KAAK,eAAgB,EAAK,GAAG,eAC/B,EAAE,KAAK,kBAAmB,KAAK,gBAAgB,UAAU,eAAe,EAAK,GAAG,SAEhF,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAIR,EAAE,UACA,CACE,IAAK,CAAC,GACN,OAAQ,CAAC,IAEX,CACE,YAAa,IAIV,IA/VT,EAAA,CADC,EAAA,OAAO,EAAA,wBACmB,EAAA,cAAsB,mBAAtB,OAAsB,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,SAAjD,EAAA,UAAA,yBAAA,GAFW,EAAY,EAAA,CADxB,EAAA,UAKsC,EAAA,oBAAA,CAAe,mBAAf,OAAe,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,UAJzC,GAAA,QAAA,aAAA;;ACJA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,6BAGA,IAAa,EAAb,MAIE,iBACS,OAAA,KAAK,kBAAkB,WAGhC,eAAe,GACR,KAAA,kBAAkB,KAAI,OAAA,OAAA,GACtB,KAAK,kBAAkB,WACvB,MATP,EAAA,CADC,EAAA,OAAO,EAAA,wBACmB,EAAA,cAAsB,mBAAtB,OAAsB,IAAtB,EAAA,wBAAA,EAAA,wBAAsB,EAAA,SAAjD,EAAA,UAAA,yBAAA,GAFW,EAAa,EAAA,CADzB,EAAA,WACY,GAAA,QAAA,cAAA;;AC2BA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/Bb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,6BACA,EAAA,QAAA,oBA4BA,IAAa,EAAb,QAAa,EAAY,EAAA,CA1BxB,EAAA,OAAO,CACN,SAAU,CACR,EAAA,cACA,CACE,QAAS,EAAA,MACT,SAAU,IAAI,EAAA,iBAAgB,IAEhC,CACE,QAAS,EAAA,uBACT,SAAU,IAAI,EAAA,gBAAkD,CAC9D,KAAM,CACJ,OAAQ,UACR,QAAS,WAEX,QAAS,CACP,OAAQ,UACR,QAAS,WAEX,OAAQ,CACN,OAAQ,UACR,QAAS,kBAMN,GAAA,QAAA,aAAA;;ACzBA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,iCAIA,IAAa,EAAb,MAGE,OAAO,GACE,OAAA,IAAI,EAAA,WAAW,IACf,KAAA,qBAAqB,OAAO,EAAK,CAAC,EAAG,KACpC,GAAA,EACI,MAAA,IAAI,MAAM,gCAElB,EAAE,KAAK,OAKb,KAAK,GACI,OAAA,IAAI,EAAA,WAAW,IACf,KAAA,qBAAqB,KAAK,EAAK,CAAC,EAAG,KAClC,GACF,EAAE,MAAM,GAEV,EAAE,KAAK,OAKb,QAAQ,EAAe,EAAG,EAAgB,IAAK,EAAO,CAAE,WAAY,GAAK,EAAQ,IACxE,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,qBACF,KAAK,GACL,KAAK,GACL,KAAK,GACL,MAAM,GACN,KAAK,CAAC,EAAG,KACJ,GACF,EAAO,GAET,EACE,EACG,IAAI,IACH,EAAI,UAAY,IAAI,KAAK,EAAI,WAAW,UACjC,IAER,KAAK,CAAC,EAAG,IAAM,EAAE,UAAY,EAAE,WAC/B,IAAI,IACH,EAAI,UAAY,IAAI,KAAK,EAAI,WACtB,WA3CrB,EAAA,CADC,EAAA,OAAO,EAAA,0BACsB,EAAA,cAAwB,mBAAxB,OAAwB,IAAxB,EAAA,0BAAA,EAAA,0BAAwB,EAAA,SAAtD,EAAA,UAAA,4BAAA,GAFW,EAAmB,EAAA,CAD/B,EAAA,WACY,GAAA,QAAA,oBAAA;;ACHA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,cAGA,IAAa,EAAb,MACE,qBAAqB,EAAS,GAC5B,QAAQ,qEAAqE,KAC7E,QAAQ,6EAA6E,OAH5E,EAAkB,EAAA,CAD9B,EAAA,WACY,GAAA,QAAA,mBAAA;;ACEA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,iCAGA,IAAa,EAAb,MAGE,OAAO,GACE,OAAA,IAAI,EAAA,WAAW,IACf,KAAA,gBAAgB,OAAO,EAAK,CAAC,EAAG,KAC/B,GAAA,EACI,MAAA,IAAI,MAAM,gCAElB,EAAE,KAAK,OAKb,KAAK,GACI,OAAA,IAAI,EAAA,WAAW,IACf,KAAA,gBAAgB,KAAK,EAAK,CAAC,EAAG,KAC7B,GACF,EAAE,MAAM,GAEV,EAAE,KAAK,SAnBe,EAAA,CAA3B,EAAA,OAAO,EAAA,oBAA6C,EAAA,cAAkB,mBAAlB,OAAkB,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,SAA3C,EAAA,UAAA,uBAAA,GADjB,EAAe,EAAA,CAD3B,EAAA,WACY,GAAA,QAAA,gBAAA;;ACCA,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,wBACA,EAAA,QAAA,cACA,EAAA,QAAA,iCACA,EAAA,QAAA,sBAGA,IAAa,EAAb,MAGE,YACU,EAEA,GAFA,KAAA,YAAA,EAEA,KAAA,yBAAA,EAGV,SACM,EAAA,SAAS,sBACN,KAAA,oBAAsB,eAEtB,KAAA,oBAAsB,KAAK,yBAI9B,oBAAoB,GAjBf,OAAA,EAAA,UAAA,OAAA,EAAA,YAkBH,MAAA,QAAa,KAAK,KAAK,GACzB,OAAA,EAAK,aACA,OAAO,KAAK,EAAK,cAAc,IAAI,IAAS,CACjD,KAAA,EACA,QAAS,EAAK,aAAa,MAGxB,KAGH,gBAAgB,EAAgB,GAAI,GA5B/B,OAAA,EAAA,UAAA,OAAA,EAAA,YA6BL,IAAA,QAAa,KAAK,KAAK,GAEpB,OADP,EAAI,OAAA,OAAA,GAAQ,EAAa,SACZ,KAAK,MAAM,EAAM,KAG1B,KAAK,GAlCA,OAAA,EAAA,UAAA,OAAA,EAAA,YAmCF,OAAA,KAAK,YAAY,KAAK,YAAY,SAAS,MAAW,QAAQ,SAAS,KAAK,0BAG/E,MAAM,EAAM,GAtCP,OAAA,EAAA,UAAA,OAAA,EAAA,YAuCF,aAAM,KAAK,YAAY,UAC5B,MAAW,QAAQ,SAAS,KAAK,sBACjC,KAAK,UAAU,QAzCR,EAAkB,EAAA,CAD9B,EAAA,UAMI,EAAA,EAAA,EAAA,OAAO,EAAA,gCADa,EAAA,oBAAA,CAAW,mBAAX,OAAW,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,OAE+B,mBAF/B,OAE+B,IAA7B,EAAA,+BAAA,EAAA,+BAA6B,EAAA,UANtD,GAAA,QAAA,mBAAA;;ACDA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,oCAIA,IAAa,EAAb,MAGE,aAAa,GACJ,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,UAAU,KAAK,CAAE,KAAA,IAAQ,KAAK,CAAC,EAAG,KACjC,GACF,EAAO,GAET,EAAQ,OAKd,iBAAiB,GACR,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,UAAU,QAAQ,CAAE,IAAA,GAAO,CAAC,EAAG,KAC9B,GACF,EAAO,GAET,QAAQ,IAAI,GACZ,EAAQ,OAKd,oBAAoB,GACX,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,UAAU,QAAQ,CAAE,KAAA,GAAQ,CAAC,EAAG,KAC/B,GACF,EAAO,GAET,EAAQ,OAKR,OAAO,GArCF,OAAA,EAAA,UAAA,OAAA,EAAA,YAsCF,aAAM,IAAI,QAAQ,CAAC,EAAS,KAC5B,KAAA,UAAU,OAAO,EAAK,CAAC,EAAG,KACzB,GACF,EAAO,GAET,EAAQ,SAKd,eAAe,EAAe,EAAG,EAAgB,IAAK,EAAO,CAAE,WAAY,IAClE,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,UACF,KAAK,IACL,KAAK,GACL,KAAK,GACL,MAAM,GACN,KAAK,CAAC,EAAG,KACJ,GACF,EAAO,GAET,EAAQ,SA1DQ,EAAA,CAAvB,EAAA,OAAO,EAAA,gBAAmC,EAAA,cAAc,mBAAd,OAAc,IAAd,EAAA,gBAAA,EAAA,gBAAc,EAAA,SAAjC,EAAA,UAAA,iBAAA,GADb,EAAgB,EAAA,CAD5B,EAAA,WACY,GAAA,QAAA,iBAAA;;ACFA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,cAGA,IAAa,EAAb,MACE,cAAc,GACN,MAAA,EAAO,IAAI,KAAK,GACf,MAAA,CACL,IAAK,KAAK,OAAO,GACjB,MAAO,KAAK,OAAO,GACnB,KAAM,KAAK,OAAO,IAItB,OAAO,GACE,OAAA,EAAK,aAGd,SAAS,GACA,OAAA,EAAK,aAGd,QAAQ,GACC,OAAA,EAAK,mBAnBH,EAAW,EAAA,CADvB,EAAA,WACY,GAAA,QAAA,YAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,cAGA,IAAa,EAAb,QAAa,EAAmB,EAAA,CAD/B,EAAA,WACY,GAAA,QAAA,oBAAA;;ACYb,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAfA,EAAA,QAAA,6BACA,EAAA,QAAA,wBACA,EAAA,QAAA,kCACA,EAAA,QAAA,4CACA,EAAA,QAAA,kCACA,EAAA,QAAA,0CACA,EAAA,QAAA,oDACA,EAAA,QAAA,kCACA,EAAA,QAAA,0CACA,EAAA,QAAA,gCACA,EAAA,QAAA,wCACA,EAAA,QAAA,wBACA,EAAA,QAAA,wCACA,EAAA,QAAA,0DACA,EAAA,QAAA,sBACA,EAAA,QAAA;;ACDa,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAdb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,kBACA,EAAA,QAAA,MACA,EAAA,QAAA,qBACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,oCACA,EAAA,QAAA,sCAEM,EAAM,QAAQ,OAAO,IACrB,EAAS,QAAQ,UAGvB,IAAa,EAAb,MAIE,cAHA,KAAA,MAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5D,KAAA,QAAoB,GAGd,sBAAsB,EAAe,KALhC,OAAA,EAAA,UAAA,OAAA,EAAA,YAMH,MAAA,QAAkB,KAAK,QAAQ,GAC/B,EAAe,EACf,EAAO,KACN,aAAO,QAAQ,IACpB,EAAU,IAAU,GAAO,EAAA,UAAA,OAAA,EAAA,YACnB,MAAA,EAAO,EAAA,QAAQ,EAAc,GAC7B,QAAa,KAAK,UAAU,GAC9B,GAAA,GAAQ,EAAK,cAAe,CAC1B,GAAC,EAAK,SAAS,gBAGV,OAAA,WAFD,EAAK,sBAAsB,KAAK,KAAhC,CAAsC,QAKzC,KAAA,QAAU,IAAI,KAAK,QAAS,QAGpC,OAAO,KAAO,KAGb,mBAAmB,EAAe,KA1B7B,OAAA,EAAA,UAAA,OAAA,EAAA,YA2BF,aAAO,KAAK,QAAQ,IAAO,IAAI,GAAQ,EAAA,QAAQ,EAAM,IAAO,OAAO,KAAO,KAG7E,WAAW,GA9BN,OAAA,EAAA,UAAA,OAAA,EAAA,YA+BF,aAAM,IAAI,QAAQ,CAAC,EAAS,KACjC,EAAA,KAAK,KAAK,mBAAmB,IAC1B,KAAK,EAAA,UAAU,GAAO,KAAK,IAAI,KAC/B,UAAU,GAAO,EAAQ,GAAM,GAAK,EAAO,QAI5C,QAAQ,EAAgB,EAAgB,KAtCnC,OAAA,EAAA,UAAA,OAAA,EAAA,YAuCF,aAAM,IAAI,QAAkB,CAAC,EAAS,KAC3C,EAAA,QAAQ,EAAQ,CAAC,EAAK,KAChB,GAAA,EACF,EAAQ,QACH,CACD,IAAA,EAAQ,EACZ,EACE,EACG,IAAI,GAEC,IADJ,EAES,EAEA,MAGV,OAAO,KAAS,WAOvB,IAAI,GA9DC,OAAA,EAAA,UAAA,OAAA,EAAA,YAgEL,IAAA,EAAU,EACP,aAAO,QAAQ,IACpB,EAAI,IAAU,GAAI,EAAA,UAAA,OAAA,EAAA,YAChB,IACM,MAAA,EAAU,CACd,KAAM,EACN,UAAW,KACX,KAAM,KACN,KAAM,KACN,OAAQ,MAEJ,QAAsB,KAAK,UAAU,GAGvC,OAAC,EAAO,aAAgB,GAAU,EAAM,YAAkB,OACrD,MAEL,EAAO,cACT,EAAQ,WAAY,EAEpB,EAAQ,MAAO,EAEjB,EAAQ,KAAO,EAAE,MAAM,KAAK,MAC5B,EAAQ,KAXY,CAAA,GAAK,EAAE,QAAQ,QAAQ,MAAO,GAWnC,CAAY,KAEvB,EAAA,SAAS,iCACX,EAAQ,KAAO,GAGjB,EAAQ,OAAS,EACjB,EAAQ,OAAO,KAAO,KAAK,UAAU,EAAO,MA/B3B,MAgCb,EACK,KAEF,QAER,OAAO,KAAS,KAGb,UAAU,GACZ,IAAA,EAAI,EACN,EAAI,SAAS,EAAG,KAAO,EAClB,KAAA,GAAK,QAAU,GAAG,GAAQ,KAC1B,OAAA,EAAE,QAAQ,GAAK,IAAM,EAAI,EAAI,EAAI,GAAK,IAAM,KAAK,MAAM,GAG1D,UAAU,GA9GL,OAAA,EAAA,UAAA,OAAA,EAAA,YA+GF,aAAM,IAAI,QAAQ,CAAC,EAAS,KACjC,EAAA,KAAK,EAAM,CAAC,EAAG,KACT,GACF,EAAQ,GAEV,EAAQ,SAKd,SAAS,EAAkB,GAClB,OAAA,EAAA,KAAK,EAAA,UAAU,EAAA,OAAV,CAAkB,EAAU,MAAc,KAAK,yBAG7D,UAAU,GACD,OAAA,IAAI,QAAQ,CAAC,EAAS,KAC3B,EAAA,OAAO,EAAM,IACP,GACF,QAAQ,MAAM,GACd,EAAO,IAEP,QAKA,kBAAkB,GACjB,OAAA,EAAK,UAAU,EAAG,EAAK,YAAY,MAEtC,qBAAqB,EAAuB,EAAoB,GA5I3D,OAAA,EAAA,UAAA,OAAA,EAAA,YA6IH,MAAA,EAAU,CAAC,EAAc,OAAuD,KAAQ,KACxF,WAAE,EAAF,iBAAc,EAAd,SAAgC,GAAa,KAAK,gBAAgB,EAAe,EAAY,SAC7F,KAAK,oBAAoB,KAAK,kBAAkB,GAAmB,KAAK,kBAAkB,IAC1F,MAAA,EAAuB,EAAQ,EAAY,iBAC3C,EAAuB,EAAQ,EAAU,iBACzC,EAAW,EAAA,UAAU,EAAQ,EAAY,IAC3C,IAAA,GAAmB,QACjB,KAAK,UAAU,KAAK,kBAAkB,WAClC,KAAK,YAAY,YACnB,KAAK,SAAS,EAAU,WAEtB,KAAK,YAAY,YACnB,KAAK,SAAS,EAAsB,GAC1C,GAAmB,GAGhB,GACH,QAAQ,MACN,sJAKN,gBAAgB,EAAuB,EAAoB,GACnD,MAAA,KAAuB,KAAK,wBAAwB,IACpD,EAAmB,EAAA,aAAa,KAAc,KAC9C,EAAa,EAAA,aAAa,KAAqB,KAC/C,EAAW,EAAiB,QAAQ,YAAa,IACjD,EAAW,EAAW,QAAQ,EAAU,IAEvC,MAAA,CACL,WAAA,EACA,iBAAA,EACA,kBAAA,EACA,SAAA,EACA,SAAA,GAIJ,kBAAkB,EAAuB,EAAoB,GACrD,MAAA,kBAAE,GAAsB,KAAK,gBAAgB,EAAe,EAAY,GACvE,OAAA,EAAA,KAAK,IAAI,QAAQ,GAAK,EAAO,EAAmB,KAGzD,WAAW,GAEF,OADP,EAAO,EAAA,UAAU,GACV,EAAA,KAAK,EAAA,UAAU,EAAA,OAAV,CAAkB,IAGhC,SAAS,EAAc,GACd,OAAA,EAAA,UAAU,EAAA,SAAV,CAAoB,EAAM,GAGnC,YAAY,GACH,OAAA,EAAA,UAAU,EAAA,OAAV,CAAkB,GAG3B,oBAAoB,EAAgB,GAE3B,OAAA,IAAI,QAAQ,CAAC,EAAS,KAC3B,QAAQ,IAAI,OACZ,EAAI,EAAQ,EAAa,SAAS,GAE5B,GADJ,QAAQ,IAAI,GACR,EACK,OAAA,EAAO,GAEhB,UA5Mc,EAAA,CAAnB,EAAA,OAAO,EAAA,YAA6B,EAAA,cAAU,mBAAV,OAAU,IAAV,EAAA,YAAA,EAAA,YAAU,EAAA,SAA3B,EAAA,UAAA,eAAA,GAHT,EAAW,EAAA,CADvB,EAAA,UACuB,EAAA,oBAAA,KAAX,GAAA,QAAA,YAAA;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAe,EAAC,EAAyB,EAAc,EAAwB,sKAI1F,KAAK,UAAU,EAAe,KAAM,03BAgCvB,+BACI;;ACNN,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjCb,MAAA,EAAA,QAAA,iCAUA,EAAA,QAAA,cACA,EAAA,QAAA,kBACA,EAAA,QAAA,QACA,EAAA,QAAA,yCAEA,EAAA,QAAA,wDACA,EAAA,QAAA,8CACA,EAAA,QAAA,oCACA,EAAA,QAAA,sDACA,EAAA,QAAA,gEACA,EAAA,QAAA,8CACA,EAAA,QAAA,sDACA,EAAA,QAAA,4CACA,EAAA,QAAA,oDACA,EAAA,QAAA,+BACA,EAAA,QAAA,oDACA,EAAA,QAAA,kCACA,EAAA,QAAA,qDACA,EAAA,QAAA,2CACA,EAAA,QAAA,QACA,EAAA,QAAA,cAGA,IAAa,EAAb,MAmBE,YACU,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GAdA,KAAA,cAAA,EACA,KAAA,OAAA,EACA,KAAA,SAAA,EACA,KAAA,YAAA,EACA,KAAA,gBAAA,EACA,KAAA,iBAAA,EACA,KAAA,kBAAA,EACA,KAAA,aAAA,EACA,KAAA,oBAAA,EACA,KAAA,gBAAA,EACA,KAAA,iBAAA,EACA,KAAA,mBAAA,EACA,KAAA,cAAA,EACA,KAAA,mBAAA,EACA,KAAA,oBAAA,EAxBV,KAAA,gBAA0B,GAC1B,KAAA,eAAiB,CACf,CACE,KAAM,EACN,KAAM,KAAK,gBACX,KAAM,KAAK,gBACX,QAAS,KAAK,kBAqBZ,WArCK,OAAA,EAAA,UAAA,OAAA,EAAA,YAsCL,OAAA,EAAA,SAAS,YAAc,EAAA,SAAS,qBACrB,QAAQ,UAEnB,KAAK,gCACM,KAAK,gBAEP,IAAI,QAAQ,IAClB,KAAA,kBAAkB,KAAK,SAAS,KAAK,YACvC,KACC,EAAA,IAAI,GAAK,KAAK,WAAW,IACzB,EAAA,YAAY,EAAA,SAAS,MACrB,EAAA,KAAK,KAAK,gBACV,EAAA,IAAI,GAAK,KAAK,eAAiB,EAAI,IAEpC,UACC,IACO,IACH,GAAQ,GACR,QAAQ,KAAK,KAGjB,IACO,KAAA,OAAO,MAAM,GAClB,QAAQ,KAAK,SAMvB,0BACS,QAAE,CAAC,MAAO,MAAO,QAAQ,OAAO,GAAK,IAAM,KAAK,WAAW,OAG9D,UAvEK,OAAA,EAAA,UAAA,OAAA,EAAA,YAwEF,OAAA,KAAK,0BACV,KAAK,OACL,KAAK,SACL,KAAK,cACL,KAAK,UACL,KAAK,kBAEJ,KACC,EAAA,IAAI,GAAK,KAAK,WAAW,IACzB,EAAA,YAAY,EAAA,SAAS,MACrB,EAAA,KAAK,KAAK,gBACV,EAAA,IAAI,GAAK,KAAK,eAAiB,EAAI,IAEpC,UACC,IACO,GACH,QAAQ,KAAK,IAGjB,IACO,KAAA,OAAO,MAAM,GAClB,QAAQ,KAAK,OAKrB,YAAY,EAAc,EAAS,KAAM,GAEhC,OADP,QAAQ,IAAI,GACL,KAAK,cAAc,eAAe,EAAM,EAAQ,GAGnD,oBAAoB,EAAkB,IAvGjC,OAAA,EAAA,UAAA,OAAA,EAAA,YAwGL,GAAA,EAAA,SAAS,kBAAmB,CAC1B,IAAA,EACE,MAAA,EAAW,EAAA,cAAc,iBAAkB,gBAC7C,IACF,QAAa,KAAK,YAAY,YAAY,GAC1C,MAAO,GACP,QAAQ,4BACK,uBAEb,QAAQ,KAAK,GAER,aAAM,KAAK,SAAS,WAAW,GAElC,OAAE,GAAY,EAAQ,SAAS,OAAU,EAAQ,SAAS,WAG/C,QAAQ,QAAQ,KAAK,sBAFrB,KAAK,SAAS,QAAQ,KAOzC,0BACE,EACA,EACA,EACA,EACA,EACA,EAAc,WAEV,IAAA,EACA,EACA,EAA0B,KAAK,eAC/B,EAA0B,KAAK,eAC7B,MAAA,EAA+B,KAAK,eACtC,IAAA,EACA,EAEG,OADF,KAAA,OAAO,IAAI,uBACT,EAAA,KAAK,KAAK,YAAY,EAAA,UAAU,EAAS,IAAM,GAAO,KAAgB,EAAK,MAAM,KAAK,UAAU,KACrG,EAAA,IAAI,KACG,KAAA,OAAO,IAAI,wBAEX,KAAA,OAAO,6BAA6B,YAE3C,EAAA,UAAU,IAAW,EAAA,UAAA,OAAA,EAAA,YAAC,OAAA,KAAK,oBAAoB,MAC/C,EAAA,IAAI,IACF,EAAc,EACT,KAAA,OAAO,IAAI,+BAGlB,EAAA,UAAU,IAAM,KAAK,YAAY,YAAY,KAAe,EAAK,MAAM,KAAK,UAC5E,EAAA,IAAI,KACG,KAAA,OAAO,sBAAsB,KAAe,EAAK,MAAM,KAAK,uBAGnE,EAAA,UAAW,GAAgB,KAAK,SAAS,QAAQ,IACjD,EAAA,IAAI,IACF,EAAW,EACN,KAAA,OAAO,4BAA4B,KAAe,EAAK,MAAM,KAAK,WAClE,KAAA,OAAO,IAAI,6CAGlB,EAAA,UAAU,IAAM,EAAA,KAAK,KAAK,iBAAiB,aAAa,EAAW,KAAW,kBAC9E,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,6DAC1B,EAAA,UAAU,IAAM,KAAK,YAAY,YAAY,iBAC7C,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,8DAC1B,EAAA,UAAW,GACH,EACG,KAAK,SAAS,QAAQ,IAExB,KAAA,cAAc,eAAe,CAChC,QAAS,CACP,OAAQ,UACR,QAAS,iEAGN,QAAQ,QAAQ,KAAK,kBAGhC,EAAA,IAAI,KACF,EAAc,GACE,GAAG,MACZ,KAAA,OAAO,IAAI,4EAGpB,EAAA,UAAU,IAAM,KAAK,YAAY,6BAA6B,KAAU,MACxE,EAAA,UAAiB,GAAa,EAAA,UAAA,OAAA,EAAA,YACxB,IACF,EAAM,KAAK,MAAM,GACjB,MAAO,GACD,MAAA,IAAI,sBAAsB,0BAElC,EAAgB,CACd,KAAM,EACN,OAAQ,EAAS,GAAG,KACpB,UAAW,IAAI,MAGb,EAAY,GAAG,OACjB,EAAc,QAAU,EAAY,GAAG,MAGrC,EAAY,GAAG,OACjB,EAAc,QAAU,EAAY,GAAG,MAGrC,EAAiB,GAAG,OACtB,EAAc,SAAW,EAAiB,GAAG,MAI/C,EAAc,SAAW,IAAK,EAAI,UAAY,IAC1C,IA6BA,EA7BA,EAGA,CAAE,KAAM,IACR,SAAM,KAAK,oBAAoB,aAAa,KAAU,KAAqB,CACxE,KAAA,OAAO,6BAA6B,gDACrC,IACF,EAAI,KAAK,YAAY,KAAK,YAAY,YAAY,KAAU,MAC5D,MAAO,GACD,MAAA,IAAI,uCAAuC,KAAU,KAEzD,EAAE,eACJ,EAAc,aAAe,EAAE,cAE3B,MAAA,EAAyB,GAC3B,EAAE,MAAQ,EAAE,KAAK,SACnB,EAAE,KAAK,QAAQ,GAAK,EAAE,aAAa,QAAQ,GAAK,EAAa,KAAK,KAC9D,EAAa,SACf,EAAc,aAAe,IAK/B,GADC,KAAA,OAAO,oCAAoC,KAAK,UAAU,MAC3D,EAAA,SAAS,sBAAuB,CAC5B,MAAA,QAAiB,KAAK,mBAAmB,uBAAuB,kBAClE,EAAS,SACX,EAAc,SAAW,GAkCtB,OA9BH,EAAA,SAAS,kBACL,KAAK,cAAc,eAAe,EAAA,cAAc,SAAU,IAAK,SACrE,QAAiB,KAAK,YAAY,SAAS,EAAA,cAAc,SAAU,MAErE,QAAmB,KAAK,SAAS,uBAE7B,EAAA,aACA,EACA,EAAA,cACE,oBACA,8GAGF,GAAsB,iBAExB,CAAE,QAAS,iBAEb,QAAQ,IAAI,GAGR,EAAc,SAAS,QAAU,IACnC,EAAc,SAAS,QAEzB,EAAc,SAAW,IAAI,EAAc,SAAU,EAAW,GAAG,MAC/D,EAAE,OACJ,EAAc,KAAO,EAAE,YAEnB,KAAK,gBAAgB,YAAY,KAAU,IAAoB,KAAK,UAAU,EAAe,KAAM,IAGlG,KAET,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,0CAC1B,EAAA,UAAU,IAAW,EAAA,UAAA,OAAA,EAAA,YACf,IAAA,QAAc,KAAK,iBAAiB,oBAAoB,GAMrD,OALF,IACH,QAAc,KAAK,iBAAiB,OAAO,CACzC,KAAM,KAGH,KAET,EAAA,UAAU,GACR,EAAA,cAAc,CACZ,KAAK,oBAAoB,OAAiB,CACxC,OAAQ,CACN,KAAM,KAAK,cAAc,iBAAiB,KAC1C,QAAS,KAAK,cAAc,iBAAiB,QAC7C,OAAQ,KAAK,cAAc,iBAAiB,QAE9C,KAAM,EAAW,GAAG,KACpB,KAAM,EACN,QAAS,EAAY,GAAG,KACxB,OAAQ,EAAS,GAAG,KACpB,SAAU,EAAiB,GAAG,KAC9B,QAAS,EAAY,GAAG,KACxB,YAAa,EAAK,MAEpB,KAAK,gBAAgB,OAAO,CAC1B,KAAM,EACN,KAAM,EAAW,GAAG,UAI1B,EAAA,IAAI,KAAO,CACT,KAAM,EACN,QAAS,EACT,OAAQ,KAEV,EAAA,IAAI,IAAW,EAAA,UAAA,OAAA,EAAA,YAGR,KAAA,OAAO,IAAI,uCACX,GACE,KAAA,mBAAmB,GAE1B,QAAQ,IAAI,GAAK,KAAK,aAAa,iBAAiB,EAAc,WAClE,QAAQ,IAAI,GAAK,KAAK,aAAa,aAAa,EAAc,WAC9D,QAAQ,IAAI,GAAK,KAAK,aAAa,kBAAkB,EAAW,GAAG,OACnE,QAAQ,IAAI,GAAK,KAAK,aAAa,YAAY,EAAU,EAAa,IAGhE,MAAA,EAAqB,GAAc,EAAc,SAAS,EAAc,SAAS,OAAS,SAC1F,KAAK,UAAU,EAAkB,GAAI,EAAkB,QAKnE,mBAAmB,GACjB,QAAQ,kCAAkC,KAAK,UAAU,MACzD,QAAQ,oEAAoE,EAAK,GAAG,QAGtF,eAAe,EAAe,EAAkB,GACxC,MAAA,EAAwB,kDAC9B,QAAQ,IAAI,EAAI,OAAQ,EAAK,GAAG,MAC5B,EAAI,SAAW,EAAK,GAAG,OACpB,KAAA,OAAO,IAAI,2MAKX,KAAA,cAAc,eAAe,CAChC,KAAM,CACJ,OAAQ,UACR,QAAS,GAEX,OAAQ,CACN,OAAQ,UACR,QAAS,MAKX,EAAI,UAAY,EAAQ,GAAG,OACxB,KAAA,OAAO,IAAI,6MAKX,KAAA,cAAc,eAAe,CAChC,QAAS,CACP,OAAQ,UACR,QAAS,MAMX,UAAU,EAAS,GAtXd,OAAA,EAAA,UAAA,OAAA,EAAA,YAuXF,aAAM,IAAI,QAAQ,IAErB,OAAO,KAAK,KAAK,cAAc,kBAAkB,OAC/C,GAAuD,YAAlD,KAAK,cAAc,iBAAiB,GAAG,QAC5C,QAEG,KAAA,mBAAmB,qBAAqB,EAAS,GAExD,WAAW,KACT,KACC,SAIP,eAAe,GACN,OAAA,EAAA,KAAK,KAAK,YAAY,YAAY,IAAO,KAC9C,EAAA,UAAU,GAAW,KAAK,SAAS,WAAW,IAC9C,EAAA,IAAI,IACF,QAAQ,IAAI,GAAK,KAAK,aAAa,iBAAiB,OAI1D,WAAW,GAET,QAAQ,iDAAiD,KAAK,0BAGhE,2BAA2B,EAAoB,cAEzC,IAAA,EACG,OAAA,EAAA,KACL,KAAK,gBAAgB,UACnB,wKAWA,WACA,IAEF,KACA,EAAA,UAAU,IACR,EAAA,KAAK,KAAK,gBAAgB,UAAU,KAAK,kBAAkB,YApB9C,SAoBqE,gBAAiB,KAErG,EAAA,UAAU,IAAM,EAAA,KAAK,KAAK,cAAc,0BAA0B,gBAClE,EAAA,UAAU,IAAM,KAAK,YAAY,SAAS,qBAC1C,EAAA,UAAW,GAAgB,KAAK,SAAS,QAAQ,IACjD,EAAA,IAAI,GAAQ,EAAW,GACvB,EAAA,UAAU,IACR,EAAA,KAAK,KAAK,iBAAiB,aAAa,aAAsB,IAAa,wBAE7E,EAAA,UAAU,IAAM,EAAA,GAAG,KAIvB,gBACE,EACA,EACA,EACA,EACA,EACA,EAAc,WAEV,IAAA,EACA,EACA,EAA0B,KAAK,eAC/B,EAA0B,KAAK,eAC7B,MAAA,EAA+B,KAAK,eACtC,IAAA,EACA,EACC,KAAA,OAAO,IAAI,uBAEV,MAAA,EAAmB,EAOlB,MANS,MAAZ,EAAK,KACP,EAAO,EAAK,OAAO,IAErB,QAAQ,IAAI,GACZ,EAAO,EAAK,QAAQ,YAAa,IACjC,QAAQ,IAAI,GACL,EAAA,KACL,KAAK,YACH,EAAA,UAAU,EAAS,IAAM,MACtB,KAAU,OACV,EAAK,MAAM,KAAK,UAErB,KACA,EAAA,IAAI,KACG,KAAA,OAAO,IAAI,wBAEX,KAAA,OAAO,6BAA6B,YAE3C,EAAA,UAAU,IAAW,EAAA,UAAA,OAAA,EAAA,YAAC,OAAA,KAAK,oBAAoB,MAC/C,EAAA,IAAI,IACF,EAAc,EACT,KAAA,OAAO,IAAI,+BAGlB,EAAA,UAAU,IAAM,KAAK,YAAY,YAAY,KAAU,KAAe,EAAK,MAAM,KAAK,UACtF,EAAA,IAAI,KACG,KAAA,OAAO,sBAAsB,KAAU,KAAe,EAAK,MAAM,KAAK,uBAG7E,EAAA,UAAW,GAAgB,KAAK,SAAS,QAAQ,IACjD,EAAA,IAAI,IACF,EAAW,EACN,KAAA,OAAO,4BAA4B,KAAU,KAAe,EAAK,MAAM,KAAK,WAC5E,KAAA,OAAO,IAAI,6CAGlB,EAAA,UAAU,IACR,EAAA,KACE,KAAK,iBAAiB,aACpB,EACA,EAAA,UAAU,EAAS,EAAiB,UAAU,EAAG,EAAiB,YAAY,MAAM,QAAQ,IAAK,KACjG,EAAA,aAAa,KAAU,mBAI7B,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,6DAC1B,EAAA,UAAU,IAAM,KAAK,YAAY,YAAY,KAAU,iBACvD,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,8DAC1B,EAAA,UAAW,GACH,EACG,KAAK,SAAS,QAAQ,IAExB,KAAA,cAAc,eAAe,CAChC,QAAS,CACP,OAAQ,UACR,QAAS,iEAGN,QAAQ,QAAQ,KAAK,kBAGhC,EAAA,IAAI,KACF,EAAc,GACE,GAAG,MACZ,KAAA,OAAO,IAAI,4EAGpB,EAAA,UAAU,IAAM,KAAK,YAAY,6BAA6B,KAAU,MACxE,EAAA,UAAiB,GAAa,EAAA,UAAA,OAAA,EAAA,YACxB,IACF,EAAM,KAAK,MAAM,GACjB,MAAO,GACD,MAAA,IAAI,sBAAsB,0BAElC,EAAgB,CACd,KAAM,EACN,OAAQ,EAAS,GAAG,KACpB,UAAW,IAAI,MAGb,EAAY,GAAG,OACjB,EAAc,QAAU,EAAY,GAAG,MAGrC,EAAY,GAAG,OACjB,EAAc,QAAU,EAAY,GAAG,MAGrC,EAAiB,GAAG,OACtB,EAAc,SAAW,EAAiB,GAAG,MAI/C,EAAc,SAAW,IAAK,EAAI,UAAY,IAC1C,IA8BA,EA9BA,EAGA,CAAE,KAAM,IACR,SAAM,KAAK,oBAAoB,aAAa,KAAU,KAAqB,CACxE,KAAA,OAAO,6BAA6B,gDACrC,IACF,EAAI,KAAK,YAAY,KAAK,YAAY,YAAY,KAAU,MAC5D,MAAO,GACD,MAAA,IAAI,uCAAuC,KAAU,KAEzD,EAAE,eACJ,EAAc,aAAe,EAAE,cAE3B,MAAA,EAAyB,GAC3B,EAAE,MAAQ,EAAE,KAAK,SACnB,EAAE,KAAK,QAAQ,GAAK,EAAE,aAAa,QAAQ,GAAK,EAAa,KAAK,KAC9D,EAAa,SACf,EAAc,aAAe,IAK/B,GADC,KAAA,OAAO,oCAAoC,KAAK,UAAU,MAC3D,EAAA,SAAS,sBAAuB,CAC5B,MAAA,QAAiB,KAAK,mBAAmB,uBAAuB,kBAClE,EAAS,SACX,EAAc,SAAW,GAkCtB,OA7BH,EAAA,SAAS,kBACL,KAAK,cAAc,eAAe,EAAA,cAAc,SAAU,IAAK,SACrE,QAAiB,KAAK,YAAY,SAAS,EAAA,cAAc,SAAU,MAErE,QAAmB,KAAK,SAAS,uBAE7B,EAAA,aACA,EACA,EAAA,cACE,oBACA,8GAGF,GAAsB,iBAExB,CAAE,QAAS,iBAIT,EAAc,SAAS,QAAU,IACnC,EAAc,SAAS,QAEzB,EAAc,SAAW,IAAI,EAAc,SAAU,EAAW,GAAG,MAC/D,EAAE,OACJ,EAAc,KAAO,EAAE,YAEnB,KAAK,gBAAgB,YAAY,KAAU,IAAoB,KAAK,UAAU,EAAe,KAAM,IAGlG,KAET,EAAA,IAAI,IAAM,KAAK,OAAO,IAAI,0CAC1B,EAAA,UAAU,IAAW,EAAA,UAAA,OAAA,EAAA,YACf,IAAA,QAAc,KAAK,iBAAiB,oBAAoB,GAMrD,OALF,IACH,QAAc,KAAK,iBAAiB,OAAO,CACzC,KAAM,KAGH,KAET,EAAA,UAAU,GACR,EAAA,cAAc,CACZ,KAAK,oBAAoB,OAAiB,CACxC,OAAQ,CACN,KAAM,KAAK,cAAc,iBAAiB,KAC1C,QAAS,KAAK,cAAc,iBAAiB,QAC7C,OAAQ,KAAK,cAAc,iBAAiB,QAE9C,KAAM,EAAW,GAAG,KACpB,KAAM,EACN,QAAS,EAAY,GAAG,KACxB,OAAQ,EAAS,GAAG,KACpB,SAAU,EAAiB,GAAG,KAC9B,QAAS,EAAY,GAAG,KACxB,YAAa,EAAK,MAEpB,KAAK,gBAAgB,OAAO,CAC1B,KAAM,EACN,KAAM,EAAW,GAAG,UAI1B,EAAA,IAAI,KAAO,CACT,KAAM,EACN,QAAS,EACT,OAAQ,KAEV,EAAA,IAAI,IAAW,EAAA,UAAA,OAAA,EAAA,YAGR,KAAA,OAAO,IAAI,uCACX,GACE,KAAA,mBAAmB,GAE1B,QAAQ,IAAI,GAAK,KAAK,aAAa,iBAAiB,EAAc,WAClE,QAAQ,IAAI,GAAK,KAAK,aAAa,aAAa,EAAc,WAC9D,QAAQ,IAAI,GAAK,KAAK,aAAa,kBAAkB,EAAW,GAAG,OACnE,QAAQ,IAAI,GAAK,KAAK,aAAa,YAAY,EAAU,EAAa,IAGhE,MAAA,EAAqB,GAAc,EAAc,SAAS,EAAc,SAAS,OAAS,SAC1F,KAAK,UAAU,EAAkB,GAAI,EAAkB,UAppB9C,EAAA,CAApB,EAAA,OAAO,EAAA,aAA+B,EAAA,cAAW,mBAAX,OAAW,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,SAA7B,EAAA,UAAA,gBAAA,GACH,EAAA,CAAjB,EAAA,OAAO,EAAA,UAA0B,EAAA,cAAQ,mBAAR,OAAQ,IAAR,EAAA,UAAA,EAAA,UAAQ,EAAA,SAAxB,EAAA,UAAA,cAAA,GAElB,EAAA,CADC,EAAA,OAAO,EAAA,6BACgB,EAAA,cAA2B,mBAA3B,OAA2B,IAA3B,EAAA,6BAAA,EAAA,6BAA2B,EAAA,SAAnD,EAAA,UAAA,sBAAA,GAEA,EAAA,CADC,EAAA,OAAO,EAAA,+BACkB,EAAA,cAA6B,mBAA7B,OAA6B,IAA7B,EAAA,+BAAA,EAAA,+BAA6B,EAAA,SAAvD,EAAA,UAAA,wBAAA,GACqB,EAAA,CAApB,EAAA,OAAO,EAAA,aAAgC,EAAA,cAAW,mBAAX,OAAW,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,SAA9B,EAAA,UAAA,iBAAA,GACK,EAAA,CAAzB,EAAA,OAAO,EAAA,kBAAyC,EAAA,cAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAAvC,EAAA,UAAA,qBAAA,GACA,EAAA,CAAzB,EAAA,OAAO,EAAA,kBAAqC,EAAA,cAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAAnC,EAAA,UAAA,iBAAA,GATf,EAAa,EAAA,CADzB,EAAA,SAqB0B,EAAA,oBAAA,CAAoB,mBAApB,OAAoB,IAApB,EAAA,sBAAA,EAAA,sBAAoB,EAAA,OACZ,mBADY,OACZ,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OACE,mBADF,OACE,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OACG,mBADH,OACG,IAAf,EAAA,aAAA,EAAA,aAAe,EAAA,OACI,mBADJ,OACI,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OACsB,mBADtB,OACsB,IAApC,EAAA,sCAAA,EAAA,sCAAoC,EAAA,OACZ,mBADY,OACZ,IAAvB,EAAA,yBAAA,EAAA,yBAAuB,EAAA,OAChB,mBADgB,OAChB,IAAZ,EAAA,cAAA,EAAA,cAAY,EAAA,OACc,mBADd,OACc,IAAnB,EAAA,qBAAA,EAAA,qBAAmB,EAAA,OACR,mBADQ,OACR,IAAf,EAAA,iBAAA,EAAA,iBAAe,EAAA,OACE,mBADF,OACE,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,OACI,mBADJ,OACI,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,OACV,mBADU,OACV,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,OACU,mBADV,OACU,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,OACN,mBADM,OACN,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,UAlC/B,GAAA,QAAA,cAAA;;AC1BA,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAPb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,iCACA,EAAA,QAAA,kBAGA,IAAa,EAAb,MACE,YAAyC,EAA+C,GAA/C,KAAA,OAAA,EAA+C,KAAA,YAAA,EAExF,SACE,EAAA,SAAS,YAAa,KAAK,WAGvB,WAPK,OAAA,EAAA,UAAA,OAAA,EAAA,YAQJ,KAAA,OAAO,MAAM,CAChB,OAAQ,MACR,KAAM,kBACN,QAAS,CACP,UAAW,CACT,QAAS,KAAK,oBACd,SAAS,EACT,MAAO,CAAC,sBAfL,EAAY,EAAA,CADxB,EAAA,UAEc,EAAA,EAAA,EAAA,OAAO,EAAA,cAAsC,EAAA,EAAA,EAAA,OAAO,EAAA,gBAAhB,EAAA,oBAAA,CAAM,mBAAN,OAAM,IAAN,EAAA,QAAA,EAAA,QAAM,EAAA,OAA2D,mBAA3D,OAA2D,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UADvG,GAAA,QAAA,aAAA;;ACEA,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,SAAA,SAAA,EAAA,GAAA,OAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,cACA,EAAA,QAAA,QACA,EAAA,QAAA,kBACA,EAAA,QAAA,kBAGA,IAAa,EAAb,MAOE,YAC+B,EACrB,EACA,EACA,GAHqB,KAAA,OAAA,EACrB,KAAA,YAAA,EACA,KAAA,oBAAA,EACA,KAAA,YAAA,EARV,KAAA,aAA6B,IAAI,EAAA,QACjC,KAAA,SAA6B,IAAI,EAAA,QACjC,KAAA,gBAAoC,IAAI,EAAA,QAQjC,KAAA,YAAY,aAAa,UAAgB,GAAI,EAAA,UAAA,OAAA,EAAA,YAAC,aAAM,KAAK,uBAKxD,MAAA,EAAW,EAAA,cAAc,yBAA0B,IAAU,GAAK,OAAW,IAAJ,IAC/E,EAAA,MAAM,EAAG,GACN,KAAK,EAAA,IAAI,IAAM,KAAK,SAAS,MAAK,KAClC,YAEE,KAAA,oBAAoB,WACtB,KACC,EAAA,YAAY,KAAK,aAAa,IAC9B,EAAA,KAAK,GACL,EAAA,OAAO,KAAO,KAAK,WACnB,EAAA,OAAO,IAAM,EAAA,SAAS,mBACtB,EAAA,IAAI,IAAM,KAAK,YAAY,mBAAmB,KAAK,OAAO,KAAK,WAAW,KAAK,OAAO,KAAK,gBAE5F,YAGL,aAAa,GACJ,OAAA,EAAA,WAAW,OAAO,IACjB,MAAA,EAAU,WAAW,IAAM,EAAE,MAAK,GAAa,IAAN,GACxC,MAAA,IAAM,aAAa,KAI9B,SACO,KAAA,WAGD,WA7CK,OAAA,EAAA,UAAA,OAAA,EAAA,aA8CL,EAAA,SAAS,2BAA6B,EAAA,SAAS,aAC5C,KAAA,wBAIH,oBAnDK,OAAA,EAAA,UAAA,OAAA,EAAA,YAoDF,aAAM,IAAI,QAAQ,GAAW,KAAK,cAAc,MAAM,IAAM,QAG7D,sBACD,KAAA,cAAgB,EAAA,aAAa,KAAK,UAAU,KAAK,OACjD,KAAA,cAAc,OAAO,EAAA,cAAc,8BAA+B,OAGzE,UAAU,EAAsB,GAC1B,MAAY,YAAZ,EAAI,KACD,KAAK,YACH,KAAA,gBAAgB,MAAK,GAC1B,EAAI,MAAM,SAAW,KAAK,UAAU,CAAE,SAAU,CAAE,MAAM,KAAY,SAEjE,KAAA,WAAY,EAEjB,EAAI,UAAU,IAAK,CACD,eAAA,oBACe,8BAAA,IACd,gBAAA,WACjB,WAAY,eAGT,KAAA,aAAa,UAAU,GAAQ,EAAI,MAAM,SAAW,KAAK,UAAU,GAAQ,SAE3E,KAAA,SAAS,UAAU,GACtB,EAAI,MAAM,SAAW,KAAK,UAAU,CAAE,MAAM,IAAI,MAAO,uBAA0B,SAG9E,KAAA,SAAS,UAAU,GACtB,EAAI,MACF,SACE,KAAK,UAAU,CACb,OAAQ,CAAE,QAAS,GAAI,KAAM,KAAK,OAAO,QAE3C,cAGN,EAAI,GAAG,MAAO,KACP,KAAA,WAAY,EACjB,EAAI,cAIR,EAAI,WAAa,IACV,EAAI,SAjGF,EAAiB,EAAA,CAD7B,EAAA,UASI,EAAA,EAAA,EAAA,OAAO,EAAA,cAA6B,EAAA,oBAAA,CAAU,mBAAV,OAAU,IAAV,EAAA,QAAA,EAAA,QAAU,EAAA,OACR,mBADQ,OACR,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,OACS,mBADT,OACS,IAAnB,EAAA,qBAAA,EAAA,qBAAmB,EAAA,OAChB,mBADgB,OAChB,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,UAXvB,GAAA,QAAA,kBAAA;;ACPA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,SAAW,IAAI,EAAA,kBAAkB,CAC5C,KAAM,WACN,OAAQ,CACN,QAAS,CACP,KAAM,EAAA;;ACAC,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,cACA,EAAA,QAAA,WACA,EAAA,QAAA,qBAGA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,OAAA,EAQd,SAAS,GAAM,QAAE,IATZ,OAAA,EAAA,UAAA,OAAA,EAAA,YAUF,MAAA,CACL,QAAA,KAOJ,8BAA6B,QAAE,IACtB,MAAA,CAAE,QAAA,KAVX,EAAA,CANC,EAAA,KAAK,EAAA,UACL,EAAA,MAAM,CACL,QAAS,CACP,KAAM,EAAA,iBAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,WAAA,MASA,EAAA,CAHC,EAAA,KAAK,EAAA,UACL,EAAA,UAAW,GAAgC,EAAK,OAAO,cAAc,wBACrE,EAAA,eACD,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,+BAAA,MAlBW,EAAqB,EAAA,CADjC,EAAA,aAE6B,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAD9B,GAAA,QAAA,sBAAA;;ACOA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAbb,MAAA,EAAA,QAAA,WAEa,QAAA,YAAc,IAAI,EAAA,kBAAkB,CAC/C,KAAM,cACN,OAAQ,CACN,OAAQ,CACN,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,kBAIC,QAAA,gBAAkB,IAAI,EAAA,kBAAkB,CACnD,KAAM,kBACN,OAAQ,CACN,KAAM,CACJ,KAAM,QAAA,aAER,QAAS,CACP,KAAM,QAAA,aAER,OAAQ,CACN,KAAM,QAAA;;AClBC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,uCAIa,QAAA,YAAc,IAAI,EAAA,kBAAkB,CAC/C,KAAM,cACN,OAAQ,CACN,IAAK,CACH,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,EAAA,eAER,SAAU,CACR,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,EAAA,iBAER,YAAa,CACX,KAAM,EAAA,eAER,UAAW,CACT,KAAM,EAAA,eAER,UAAW,CACT,KAAM,EAAA;;ACnCC,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,wBAGA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,OAAA,EAKpB,mBAAmB,GACV,MAAA,CAAE,QAAA,KADX,EAAA,CAHC,EAAA,KAAK,EAAA,aACL,EAAA,UAAW,GAAwC,EAAK,OAAO,cAAc,sBAC7E,EAAA,eACD,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,qBAAA,MANW,EAA6B,EAAA,CADzC,EAAA,aAE6B,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAD9B,GAAA,QAAA,8BAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,qCAKA,IAAa,EAAb,QAAa,EAAa,EAAA,CAHzB,EAAA,OAAO,CACN,YAAa,CAAC,EAAA,kCAEH,GAAA,QAAA,cAAA;;ACDA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,wCAIA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,cAAA,EAEpB,UACE,EAAiB,cACjB,EAAe,WACf,EAAkB,UAClB,EAAoB,SACpB,GAEO,OAAA,KAAK,cAAc,0BACxB,EACA,EACA,EACA,EACA,gBACA,GAIJ,gBACE,EAAiB,cACjB,EAAe,WACf,EAAkB,UAClB,EAAoB,SACpB,GAEO,OAAA,KAAK,cAAc,gBAAgB,EAAQ,EAAM,EAAS,EAAW,gBAAiB,KA3BpF,EAAc,EAAA,CAD1B,EAAA,UAEoC,EAAA,oBAAA,CAAa,mBAAb,OAAa,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UADrC,GAAA,QAAA,eAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,oCACA,EAAA,QAAA,cACA,EAAA,QAAA,qBAEa,QAAA,cAAgB,IAAI,EAAA,kBAAkB,CACjD,KAAM,gBACN,OAAQ,CACN,IAAK,CACH,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,IAAI,EAAA,YAAY,EAAA,aACtB,QAAe,GAAO,EAAA,UAAA,OAAA,EAAA,YACd,MAAA,EAAsB,EAAA,UAAU,IAAI,EAAA,qBACnC,aAAM,EAAoB,QAAQ,EAAG,IAAK,KAAM,CACrD,YAAa,EAAK;;AChBf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,oBAEa,QAAA,kBAAoB,IAAI,EAAA,kBAAkB,CACrD,KAAM,oBACN,OAAQ,CACN,MAAO,CACL,KAAM,EAAA,YAER,KAAM,CACJ,KAAM,IAAI,EAAA,YAAY,EAAA;;ACHf,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAPb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,0BACA,EAAA,QAAA,gCACA,EAAA,QAAA,+BAIA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,iBAAA,EAQpB,aAAa,GAAM,GAAE,IACZ,OAAA,KAAK,iBAAiB,iBAAiB,GAS1C,gBAAgB,GAAM,KAAE,IAnBnB,OAAA,EAAA,UAAA,OAAA,EAAA,YAqBL,SADoB,KAAK,iBAAiB,oBAAoB,GAE1D,MAAA,IAAI,MAAM,6BAEX,aAAM,KAAK,iBAAiB,OAAO,CAAE,KAAA,MAYxC,eAAe,GAAM,KAAE,EAAF,MAAQ,IApCxB,OAAA,EAAA,UAAA,OAAA,EAAA,YAqCH,MAAA,QAAmB,KAAK,iBAAiB,eAAe,EAAM,GAC7D,MAAA,CACL,MAAO,EAAW,OAClB,KAAM,OA/BV,EAAA,CANC,EAAA,KAAK,EAAA,eACL,EAAA,MAAM,CACL,GAAI,CACF,KAAM,EAAA,iBAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,eAAA,MAUA,EAAA,CANC,EAAA,KAAK,EAAA,eACL,EAAA,SAAS,CACR,KAAM,CACJ,KAAM,EAAA,iBAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,kBAAA,MAiBA,EAAA,CATC,EAAA,KAAK,EAAA,mBACL,EAAA,MAAM,CACL,KAAM,CACJ,KAAM,EAAA,YAER,MAAO,CACL,KAAM,EAAA,cAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAA6C,EAAA,oBAAO,mBAAP,EAAO,oBAAP,SAAA,SAAO,EAAA,SAApD,EAAA,UAAA,iBAAA,MApCW,EAAmB,EAAA,CAD/B,EAAA,aAEuC,EAAA,oBAAA,CAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,UAD3C,GAAA,QAAA,oBAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,0BACA,EAAA,QAAA,gCAMA,IAAa,EAAb,QAAa,EAAe,EAAA,CAJ3B,EAAA,OAAO,CACN,YAAa,CAAC,EAAA,qBACd,SAAU,CAAC,EAAA,qBAEA,GAAA,QAAA,gBAAA;;ACNA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,cAAgB,IAAI,EAAA,kBAAkB,CACjD,KAAM,gBACN,OAAQ,KAAO,CACb,KAAM,CACJ,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA;;ACNC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,0BAEa,QAAA,UAAY,IAAI,EAAA,kBAAkB,CAC7C,KAAM,YACN,OAAQ,CACN,KAAM,CACJ,KAAM,IAAI,EAAA,YAAY,EAAA,gBAExB,QAAS,CACP,KAAM,IAAI,EAAA,YAAY,EAAA,gBAExB,OAAQ,CACN,KAAM,IAAI,EAAA,YAAY,EAAA,gBAExB,OAAQ,CACN,KAAM,EAAA;;ACbC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,kBAEa,QAAA,gBAAkB,IAAI,EAAA,kBAAkB,CACnD,KAAM,kBACN,OAAQ,CACN,MAAO,CACL,KAAM,EAAA,YAER,KAAM,CACJ,KAAM,IAAI,EAAA,YAAY,EAAA;;ACRf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,cAEa,QAAA,kBAAoB,IAAI,EAAA,kBAAkB,CACrD,KAAM,oBACN,OAAQ,CACN,OAAQ,CACN,KAAM,EAAA;;ACmBC,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzBb,MAAA,EAAA,QAAA,cAaA,EAAA,QAAA,sBACA,EAAA,QAAA,+BAEA,EAAA,QAAA,kBACA,EAAA,QAAA,sCACA,EAAA,QAAA,6BACA,EAAA,QAAA,wBACA,EAAA,QAAA,MACA,EAAA,QAAA,QAIA,IAAa,EAAb,MACE,YACU,EACA,EACA,EACA,EACA,EACA,GALA,KAAA,eAAA,EACA,KAAA,oBAAA,EACA,KAAA,OAAA,EACA,KAAA,YAAA,EACA,KAAA,YAAA,EACA,KAAA,cAAA,EAqBJ,aAAa,GAAM,OAAE,EAAF,KAAU,EAAV,QAAgB,EAAhB,UAAyB,EAAzB,YAAoC,IA5BlD,OAAA,EAAA,UAAA,OAAA,EAAA,YA6BF,OAAA,IAAI,QAAQ,CAAO,EAAS,IAAU,EAAA,UAAA,OAAA,EAAA,YACvC,UACI,KAAK,YAAY,UACrB,EAAS,iBACT,KAAK,YAAY,YAAY,EAAK,QAAQ,MAAO,MAE7C,MAAA,EAAW,EAAA,qBAAqB,KAAU,QAAY,CAC1D,MAAO,MAEH,EAAe,KAAK,cAAc,OAAO,UAAU,IACvD,EAAS,MAAM,EAAA,OAAO,GAAO,MACxB,KAAA,OAAO,QAAQ,sBAAuB,CAAE,QAAS,EAAA,OAAO,OAE3D,IAAA,EACE,MAAA,EAAqB,KACzB,EAAa,cACb,EAAS,QACT,EAAI,eAEN,EAAM,KAAK,eAAe,UAAU,EAAQ,EAAM,EAAS,EAAW,GAAa,UACjF,IACE,EAAO,OAAA,OAAA,CACL,OAAQ,UACL,IAEL,KAEF,IACE,IACA,EAAO,GAAK,kBAGhB,MAAO,GACP,EAAO,GAAK,sBA2BZ,gBAAgB,GAAM,KAAE,EAAF,MAAQ,EAAR,MAAe,IAzFhC,OAAA,EAAA,UAAA,OAAA,EAAA,YA0FH,MAAA,QAAc,KAAK,oBAAoB,QAAQ,EAAM,EAAO,KAAM,GACjE,MAAA,CACL,MAAO,EAAM,OACb,KAAM,KAOV,YAAY,GACH,MAAA,CAAE,QAAA,GAMX,cAAc,GACL,MAAA,CAAE,QAAA,KAhFX,EAAA,CAlBC,EAAA,KAAK,EAAA,WACL,EAAA,SAAS,CACR,OAAQ,CACN,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,KAAM,CACJ,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,QAAS,CACP,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,UAAW,CACT,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,YAAa,CACX,KAAM,EAAA,iBAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,eAAA,MA6DA,EAAA,CAtBC,EAAA,KAAK,EAAA,iBACL,EAAA,MAAM,CACL,KAAM,CACJ,KAAM,EAAA,YAER,MAAO,CACL,KAAM,EAAA,YAER,MAAO,CACL,KAAM,IAAI,EAAA,uBAAuB,CAC/B,KAAM,iBACN,OAAQ,CACN,YAAa,CACX,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,qBAMhB,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAqD,EAAA,oBAAO,mBAAP,EAAO,oBAAP,SAAA,SAAO,EAAA,SAA5D,EAAA,UAAA,kBAAA,MAWA,EAAA,CAHC,EAAA,KAAK,EAAA,iBACL,EAAA,UAAW,GAA0B,EAAK,OAAO,cAAc,sBAC/D,EAAA,eACD,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,cAAA,MAOA,EAAA,CAHC,EAAA,KAAK,EAAA,mBACL,EAAA,UAAW,GAA0B,EAAK,OAAO,cAAc,mBAC/D,EAAA,eACD,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,gBAAA,MA3GW,EAAe,EAAA,CAD3B,EAAA,aAG2B,EAAA,oBAAA,CAAc,mBAAd,OAAc,IAAd,EAAA,gBAAA,EAAA,gBAAc,EAAA,OACU,mBADV,OACU,IAAnB,EAAA,qBAAA,EAAA,qBAAmB,EAAA,OACnB,mBADmB,OACnB,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,OACG,mBADH,OACG,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,OACY,mBADZ,OACY,IAAvB,EAAA,yBAAA,EAAA,yBAAuB,EAAA,OACR,mBADQ,OACR,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAP3B,GAAA,QAAA,gBAAA;;ACnBA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,sBAKA,IAAa,EAAb,QAAa,EAAW,EAAA,CAHvB,EAAA,OAAO,CACN,YAAa,CAAC,EAAA,oBAEH,GAAA,QAAA,YAAA;;ACJA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,cAAgB,CAC3B,KAAM,CACJ,KAAM,EAAA,eAER,UAAW,CACT,KAAM,EAAA,eAER,MAAO,CACL,KAAM,EAAA,eAER,MAAO,CACL,KAAM,EAAA,eAER,MAAO,CACL,KAAM,EAAA,eAER,YAAa,CACX,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,EAAA,YAER,IAAK,CACH,KAAM,EAAA,YAER,QAAS,CACP,KAAM,EAAA,YAER,KAAM,CACJ,KAAM,EAAA,YAER,IAAK,CACH,KAAM,EAAA,YAER,IAAK,CACH,KAAM,EAAA,YAER,MAAO,CACL,KAAM,EAAA,YAER,KAAM,CACJ,KAAM,EAAA,YAER,IAAK,CACH,KAAM,EAAA;;ACpDG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,oBAEa,QAAA,eAAiB,IAAI,EAAA,kBAAkB,CAClD,KAAM,iBACN,OAAQ,EAAA;;ACFG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,sBAEa,QAAA,oBAAsB,IAAI,EAAA,kBAAkB,CACvD,KAAM,sBACN,OAAQ,CACN,KAAM,CACJ,KAAM,EAAA,eAER,UAAW,CACT,KAAM,EAAA,gBAER,KAAM,CACJ,KAAM,EAAA,gBAER,KAAM,CACJ,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,EAAA;;AChBC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,2BAEa,QAAA,SAAW,IAAI,EAAA,kBAAkB,CAC5C,KAAM,WACN,OAAQ,CACN,MAAO,CACL,KAAM,IAAI,EAAA,YAAY,EAAA;;ACLf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,YAAc,IAAI,EAAA,kBAAkB,CAC/C,KAAM,cACN,OAAQ,CACN,QAAS,CACP,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA;;ACCC,aAAA,IAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,cACA,EAAA,QAAA,qBACA,EAAA,QAAA,2BACA,EAAA,QAAA,oCACA,EAAA,QAAA,yBACA,EAAA,QAAA,kBACA,EAAA,QAAA,WAGA,IAAa,EAAb,MACE,YAAoB,EAAkD,GAAlD,KAAA,oBAAA,EAAkD,KAAA,YAAA,EAQhE,UAAU,GAAM,OAAE,IATb,OAAA,EAAA,UAAA,OAAA,EAAA,YAUL,IAAA,EAOG,OANH,EAAA,SAAS,+BACX,EAAW,GAEX,EAAS,EAAO,QAAQ,IAAK,IAC7B,EAAW,QAAQ,MAAQ,GAEtB,CACL,YAAa,KAAK,oBAAoB,WAAW,MAU/C,SAAS,GAAM,OAAE,GAA8B,GA5B1C,OAAA,EAAA,UAAA,OAAA,EAAA,YA6BL,IAAA,EACA,EAAA,SAAS,+BACX,EAAW,GAEX,EAAS,EAAO,QAAQ,IAAK,IAC7B,EAAW,QAAQ,MAAQ,GAEvB,MAAA,EAAY,EAAS,MAAM,KAAK,MAChC,EAAwB,QAAd,GAAqC,SAAd,GAAsC,QAAd,EAC3D,IAAA,QAAa,KAAK,YAAY,SAAS,GACvC,IAEF,gBAAqB,aADrB,SAAc,KAAK,YAAY,YAAY,IAAW,SAAS,aAI7D,IAAA,EAAkB,KAClB,IACF,QAAwB,KAAK,YAAY,SACvC,EAAS,UAAU,EAAG,EAAS,YAAY,MAAQ,kBAErD,MAAO,IACF,MAAA,CACL,QAAS,EACT,KAAA,KAaE,SAAS,GAAM,OAAE,EAAF,QAAU,IAjEpB,OAAA,EAAA,UAAA,OAAA,EAAA,YAkEL,IAAA,EAQG,OAPH,EAAA,SAAS,+BACX,EAAW,GAEX,EAAS,EAAO,QAAQ,IAAK,IAC7B,EAAW,QAAQ,MAAQ,SAEvB,KAAK,YAAY,UAAU,EAAU,GACpC,CACL,WAAY,KAAK,YAAY,SAAS,QAlE1C,EAAA,CANC,EAAA,KAAK,EAAA,UACL,EAAA,MAAM,CACL,OAAQ,CACN,KAAM,EAAA,iBAGV,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,YAAA,MAmBA,EAAA,CANC,EAAA,KAAK,EAAA,aACL,EAAA,MAAM,CACL,OAAQ,CACN,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,WAAA,MAqCA,EAAA,CATC,EAAA,KAAK,EAAA,aACL,EAAA,MAAM,CACL,OAAQ,CACN,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,QAAS,CACP,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,oBAAA,UAAA,EAAA,UAAA,WAAA,MAjEW,EAAc,EAAA,CAD1B,EAAA,aAE0C,EAAA,oBAAA,CAAmB,mBAAnB,OAAmB,IAAnB,EAAA,aAAA,EAAA,aAAmB,EAAA,OAAkC,mBAAlC,OAAkC,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,UADnF,GAAA,QAAA,eAAA;;ACFA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,2BACA,EAAA,QAAA,qBAMA,IAAa,EAAb,QAAa,EAAU,EAAA,CAJtB,EAAA,OAAO,CACN,SAAU,CAAC,EAAA,aACX,YAAa,CAAC,EAAA,mBAEH,GAAA,QAAA,WAAA;;ACNA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,WAEa,QAAA,oBAAsB,IAAI,EAAA,gBAAgB,CACrD,KAAM,uBACN,OAAQ,CACN,SAAU,CACR,MAAO,YAET,SAAU,CACR,MAAO,YAET,QAAS,CACP,MAAO,WAET,MAAO,CACL,MAAO;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,MAAA,EAAA,QAAA,WACA,EAAA,QAAA,2BAEa,QAAA,gBAAkB,IAAI,EAAA,kBAAkB,CACnD,KAAM,kBACN,OAAQ,CACN,IAAK,CACH,KAAM,EAAA,eAER,OAAQ,CACN,KAAM,EAAA,qBAER,UAAW,CACT,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,eAER,WAAY,CACV,KAAM,EAAA,eAER,KAAM,CACJ,KAAM,EAAA,eAER,UAAW,CACT,KAAM,EAAA,eAER,QAAS,CACP,KAAM,EAAA;;ACdC,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAdb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,uCAEA,EAAA,QAAA,qCACA,EAAA,QAAA,cACA,EAAA,QAAA,yBACA,EAAA,QAAA,uCACA,EAAA,QAAA,QACA,EAAA,QAAA,MAGA,EAAA,QAAA,QAGA,IAAa,EAAb,MAEE,YACU,EACA,EACA,EACA,EACA,EACA,GALA,KAAA,eAAA,EACA,KAAA,OAAA,EACA,KAAA,YAAA,EACA,KAAA,eAAA,EACA,KAAA,YAAA,EACA,KAAA,cAAA,EAEV,mBAAmB,GACV,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,YAAY,QAAQ,CAAE,IAAA,GAAO,CAAC,EAAG,KAChC,GACF,EAAO,GAET,QAAQ,IAAI,GACZ,EAAQ,OAKd,qBAAqB,EAAc,EAAoB,GAC9C,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,YAAY,QAAQ,CAAE,KAAA,EAAM,WAAA,GAAc,CAAC,EAAG,KAC7C,GACF,EAAO,GAET,EAAQ,OAKd,qBAAqB,EAAoB,EAA4B,IAC5D,OAAA,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,YAAY,QAAO,OAAA,OAAA,CAAG,WAAA,GAAe,GAAW,CAAC,EAAG,KACnD,GACF,EAAO,GAET,EAAQ,OAKR,IAAI,GA5CC,OAAA,EAAA,UAAA,OAAA,EAAA,YA6CH,MAAA,QAAiB,KAAK,qBAAqB,EAAI,KAAM,EAAI,WAAY,CACzE,OAAQ,YAEN,GAAA,EACI,MAAA,IAAI,8CACgC,EAAQ,QAAQ,EAAQ,wDAG7D,aAAM,IAAI,QAAQ,CAAC,EAAS,KAC5B,KAAA,YAAY,OAAO,EAAK,CAAO,EAAG,IAAK,EAAA,UAAA,OAAA,EAAA,YACtC,GACF,EAAO,GAEL,UACI,KAAK,YAAY,qBAAqB,EAAE,IAAK,EAAE,WAAY,EAAE,MACnE,MAAO,GACA,OAAA,EAAO,GAEhB,EAAQ,UAKR,SAAS,GApEJ,OAAA,EAAA,UAAA,OAAA,EAAA,YAqEH,MAAA,QAAqB,KAAK,qBAAqB,EAAI,KAAM,EAAI,YAC/D,IAAC,EACG,MAAA,IAAI,mCAAmC,EAAI,QAG5C,aADD,KAAK,YAAY,kBAAkB,EAAY,IAAK,EAAY,WAAY,EAAY,MAAM,kBACvF,IAAI,QAAQ,CAAC,EAAS,KAC5B,KAAA,YAAY,OAAO,EAAa,CAAC,EAAG,KACnC,GACF,EAAO,GAET,EAAQ,SAKR,OAAO,EAAoB,GApFtB,OAAA,EAAA,UAAA,OAAA,EAAA,YAqFF,aAAM,IAAI,QAAQ,CAAC,EAAS,KAC5B,KAAA,YAAY,OAAO,CAAE,WAAA,GAAc,EAAS,GAAI,CAAO,EAAG,IAAK,EAAA,UAAA,OAAA,EAAA,YAC9D,GACF,EAAO,GAET,EAAQ,UAKR,QAAO,WAAE,EAAF,QAAc,IA/FhB,OAAA,EAAA,UAAA,OAAA,EAAA,YAgGT,QAAQ,IAAI,EAAY,GAClB,MAAA,QAAqB,KAAK,qBAAqB,GACjD,IAAC,EACG,MAAA,IAAI,mCAAmC,KAM3C,GAJJ,EAAY,QAAU,EACtB,EAAY,OAAS,mBAEG,KAAK,OAAO,EAAY,IAExC,MAAA,IAAI,MAAM,4BAEX,OAAA,IAGD,OAAO,EAAuB,EAAoB,EAAkB,EAAiB,GAErF,MAAA,SAAE,EAAF,kBAAY,EAAZ,SAA+B,GAAa,KAAK,YAAY,gBACjE,EACA,EACA,GAEK,OAAA,IAAI,QAAQ,CAAO,EAAS,IAAU,EAAA,UAAA,OAAA,EAAA,kBACrC,KAAK,eAAe,UACxB,EAAW,iBACX,KAAK,YAAY,YAAY,EAAS,QAAQ,MAAO,MAEnD,IAAA,EAAmB,CAAE,aAAc,IACnC,SAAM,EAAA,UAAU,EAAA,OAAV,CAAkB,EAAA,KAAK,EAAU,iBAAkB,CAMvD,IALJ,EAAc,KAAK,YACX,EAAA,UAAU,EAAA,SAAV,CAAoB,EAAA,KAAK,EAAU,gBAAiB,CACxD,SAAU,YAGE,cAAgB,EAAY,aAAa,OAAQ,CAClC,EAAY,aAAa,KAAM,GAC1D,EAAK,SAAS,4BAGd,EAAY,aAAa,KAAK,+BAGhC,EAAY,aAAa,KAAK,gCAE1B,EAAA,UAAU,EAAA,UAAV,CAAqB,EAAA,KAAK,EAAU,gBAAiB,KAAK,UAAU,eAEpE,KAAK,eAAe,UAAU,EAAW,gBAAiB,KAAK,YAAY,kBAG7E,MAAA,EAAW,EAAA,qBAAqB,KAAqB,QAAgB,CAAE,MAAO,MAC9E,EAAe,KAAK,cAAc,OAAO,UAAU,IACvD,EAAS,MAAM,EAAA,OAAO,GAAO,MACxB,KAAA,OAAO,QAAQ,sBAAuB,CAAE,QAAS,EAAA,OAAO,OAE3D,IAAA,EACE,MAAA,EAAqB,KACzB,EAAa,cACb,EAAS,QACT,EAAI,eAEN,EAAM,KAAK,eAAe,gBAAgB,EAAmB,EAAU,EAAS,EAAW,SAAS,UAClG,EAAG,OAAA,MACD,EAAQ,CACN,QAAA,EACA,IAAK,EACL,KAAM,EAAO,OAEf,KAEF,IACE,IACA,EAAO,GAAK,qBAMd,MAAK,WAAE,IA7KF,OAAA,EAAA,UAAA,OAAA,EAAA,YA8KH,MAAA,QAAqB,KAAK,qBAAqB,EAAY,CAC/D,OAAQ,aAEN,IAAC,EACG,MAAA,IAAI,yCAC2B,yEAYnC,SATE,KAAK,OACT,EAAY,IACZ,EAAY,WACZ,EAAY,KACZ,EAAY,QACZ,EAAY,WAEd,EAAY,OAAS,mBACG,KAAK,OAAO,EAAY,IAExC,MAAA,IAAI,MAAM,4BAEX,OAAA,IAGT,iBACE,EACA,EACA,EAAe,EACf,EAAgB,IAChB,EAAO,CAAE,WAAY,IAEf,MAAA,EAAO,GAMN,MALQ,YAAX,IACF,EAAK,OAAS,GAEhB,EAAK,WAAa,EAClB,QAAQ,IAAI,GACL,IAAI,QAAQ,CAAC,EAAS,KACtB,KAAA,YACF,KAAK,GACL,KAAK,GACL,KAAK,GACL,MAAM,GACN,KAAK,CAAC,EAAG,KACJ,GACF,EAAO,GAET,EAAQ,SA3NiB,EAAA,CAAhC,EAAA,OAAO,EAAA,yBAA8C,EAAA,cAAuB,mBAAvB,OAAuB,IAAvB,EAAA,yBAAA,EAAA,yBAAuB,EAAA,SAA5C,EAAA,UAAA,mBAAA,GADtB,EAAkB,EAAA,CAD9B,EAAA,aAI2B,EAAA,oBAAA,CAAc,mBAAd,OAAc,IAAd,EAAA,gBAAA,EAAA,gBAAc,EAAA,OACT,mBADS,OACT,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,OACG,mBADH,OACG,IAAX,EAAA,aAAA,EAAA,aAAW,EAAA,OACM,mBADN,OACM,IAAd,EAAA,aAAA,EAAA,aAAc,EAAA,OACM,mBADN,OACM,IAAvB,EAAA,yBAAA,EAAA,yBAAuB,EAAA,OACR,mBADQ,OACR,IAAb,EAAA,eAAA,EAAA,eAAa,EAAA,UAR3B,GAAA,QAAA,mBAAA;;ACdb,aAoMA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA;;ACjLa,aAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,GAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,OAAA,QAAA,SAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnBb,MAAA,EAAA,QAAA,cAUA,EAAA,QAAA,4BACA,EAAA,QAAA,8CACA,EAAA,QAAA,iCACA,EAAA,QAAA,gCAMA,IAAa,EAAb,MACE,YAAoB,GAAA,KAAA,kBAAA,EAgBpB,eAAe,EAAM,GACZ,OAAA,KAAK,kBAAkB,IAAG,OAAA,OAAA,GAAM,EAAO,CAAE,OAAQ,aAW1D,oBAAoB,EAAM,GACjB,OAAA,KAAK,kBAAkB,SAAS,GAWzC,kBAAkB,EAAM,GACf,OAAA,KAAK,kBAAkB,OAAO,GAQvC,wBAAwB,EAAM,GACrB,OAAA,KAAK,kBAAkB,KAAK,GAYrC,iBAAiB,GAAM,OAAE,EAAF,WAAU,IACxB,OAAA,KAAK,kBAAkB,iBAAiB,EAAQ,KA/CzD,EAAA,CAdC,EAAA,SAAS,CACR,KAAM,CACJ,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,UAAW,CACT,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,WAAY,CACV,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,UAAW,CACT,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAA8B,EAAA,oBAAA,CAAA,OAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAA9C,EAAA,yBAAA,IAAA,EAAA,UAAA,iBAAA,MAYA,EAAA,CARC,EAAA,SAAS,CACR,KAAM,CACJ,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,WAAY,CACV,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAmC,EAAA,oBAAA,CAAA,OAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAAnD,EAAA,yBAAA,IAAA,EAAA,UAAA,sBAAA,MAYA,EAAA,CARC,EAAA,SAAS,CACR,QAAS,CACP,KAAM,IAAI,EAAA,eAAe,EAAA,gBAE3B,WAAY,CACV,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAiC,EAAA,oBAAA,CAAA,OAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAAjD,EAAA,yBAAA,IAAA,EAAA,UAAA,oBAAA,MASA,EAAA,CALC,EAAA,SAAS,CACR,WAAY,CACV,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAuC,EAAA,oBAAA,CAAA,OAAgB,mBAAhB,OAAgB,IAAhB,EAAA,kBAAA,EAAA,kBAAgB,EAAA,SAAvD,EAAA,yBAAA,IAAA,EAAA,UAAA,0BAAA,MAaA,EAAA,CATC,EAAA,KAAK,IAAI,EAAA,YAAY,EAAA,kBACrB,EAAA,MAAM,CACL,OAAQ,CACN,KAAM,EAAA,qBAER,WAAY,CACV,KAAM,IAAI,EAAA,eAAe,EAAA,kBAG7B,EAAA,cAAA,UAAA,EAAA,oBAAA,CAAA,OAAA,SAAA,EAAA,yBAAA,IAAA,EAAA,UAAA,mBAAA,MA/DW,EAAsB,EAAA,CAJlC,EAAA,WAAqC,CACpC,OAAQ,GACR,KAAM,EAAA,kBAGiC,EAAA,oBAAA,CAAkB,mBAAlB,OAAkB,IAAlB,EAAA,oBAAA,EAAA,oBAAkB,EAAA,UAD9C,GAAA,QAAA,uBAAA;;ACXA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,6BACA,EAAA,QAAA,8CAMA,IAAa,EAAb,QAAa,EAAkB,EAAA,CAJ9B,EAAA,OAAO,CACN,YAAa,CAAC,EAAA,wBACd,UAAW,CAAC,EAAA,uBAED,GAAA,QAAA,mBAAA;;AC4DA,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApEb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,4BACA,EAAA,QAAA,kCACA,EAAA,QAAA,kCACA,EAAA,QAAA,4BACA,EAAA,QAAA,8BACA,EAAA,QAAA,gCACA,EAAA,QAAA,wBACA,EAAA,QAAA,sBACA,EAAA,QAAA,sCACA,EAAA,QAAA,cASA,EAAA,QAAA,8BACA,EAAA,QAAA,eAgDA,IAAa,EAAb,QAAa,EAAY,EAAA,CA9CxB,EAAA,OAAO,CACN,QAAS,CAAC,EAAA,cAAe,EAAA,gBAAiB,EAAA,YAAa,EAAA,WAAY,EAAA,oBACnE,SAAU,CAAC,EAAA,aAAc,EAAA,kBAAmB,EAAA,gBAC5C,YAAa,CAAC,EAAA,uBACd,UAAW,CACT,CACE,QAAS,EAAA,mBACT,KAAM,CAAC,EAAA,uBACP,WAAa,GAAkC,CAAO,EAAM,EAAkB,EAAoB,IAAc,EAAA,UAAA,OAAA,EAAA,YAC1G,IAAA,EACA,IACF,EAAc,EAAA,UAAU,IAAqB,EAAA,gBAC7C,MAAO,IACL,GAAA,GAAe,EAAY,QACzB,IACF,EAAO,eAAe,cAAgB,EAAY,QAAQ,GAC1D,MAAO,GACA,OAAA,EAAA,KAAK,oBAGd,EAAO,eAAe,QAAU,KAE3B,OAAA,OAGX,CACE,QAAS,EAAA,cACT,WAAY,IAAO,IACX,MAAA,EAAU,EAAS,QAAQ,KAAK,EAAS,QAC3C,GAAA,EAAA,cAAc,iBAAkB,CAC9B,IAAA,EACA,IACF,EAAc,EAAA,UAAU,IAAqB,EAAA,gBAC7C,MAAO,IACL,GAAe,EAAY,eAC7B,EAAS,QAAU,SAAe,EAAM,EAAM,EAAS,KAAS,GAW/D,OAAA,EAAA,UAAA,OAAA,EAAA,YATQ,aADD,EAAY,aAAa,EAAU,EAAM,EAAM,EAAS,GACvD,EAAQ,EAAM,EAAM,EAAS,KAAS,OAI5C,OAAA,QAKF,GAAA,QAAA,aAAA;;AClEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,MAAA,EAAA,QAAA,iBAEa,QAAA,oBAAsB,EAAC,EAAiB,IAC5C,IAAI,QAAQ,CAAC,EAAS,KACrB,MAAA,EAAQ,EAAA,MAAM,MAAO,CACzB,OACA,QACA,YACG,EAAM,aACT,WACA,IAGF,EAAM,OAAO,KAAK,QAAQ,QAC1B,EAAM,GAAG,QAAU,GAAiB,EAAQ;;ACThD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALA,MAAA,EAAA,QAAA,QAKA,SAAgB,EAAgB,GAC1B,IAAC,EACI,OAAA,KAEL,IAAA,EACC,IAAA,MAAM,KAAO,EAAQ,CACxB,EAAW,EACX,MAEE,IAAC,EAAO,GACJ,MAAA,IAAI,wBAAwB,KAK7B,OAHH,EAAA,WAAW,EAAO,MACpB,EAAS,EAAO,IAEX,EAfT,QAAA,aAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALA,MAAA,EAAA,QAAA,QAKA,SAAgB,EAAiB,GAC3B,IAAC,EACI,OAAA,KAEL,IACA,EADA,EAAQ,EAEP,IAAA,MAAM,KAAO,EAAQ,CACpB,GAAU,IAAV,EAAa,CACb,EAAY,EACZ,MAEJ,IAEE,IAAC,EAAO,GACJ,MAAA,IAAI,wBAAwB,KAK7B,OAHH,EAAA,WAAW,EAAO,MACpB,EAAS,EAAO,IAEX,EAnBT,QAAA,cAAA;;ACsFa,aAAA,IAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3Fb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,cACA,EAAA,QAAA,qBACA,EAAA,QAAA,0CACA,EAAA,QAAA,gCACA,EAAA,QAAA,oDACA,EAAA,QAAA,qCACA,EAAA,QAAA,kDACA,EAAA,QAAA,4DACA,EAAA,QAAA,0CACA,EAAA,QAAA,0BACA,EAAA,QAAA,kDACA,EAAA,QAAA,gDACA,EAAA,QAAA,oCACA,EAAA,QAAA,gCACA,EAAA,QAAA,cAQA,EAAA,QAAA,0BACA,EAAA,QAAA,uCACA,EAAA,QAAA,QACA,EAAA,QAAA,iCACA,EAAA,QAAA,2BACA,EAAA,QAAA,kCAEM,EAAW,CACf,EAAA,iBAAiB,QAAQ,CACvB,KAAM,EAAA,cAAc,sBAAuB,MAC3C,OAAQ,CACN,UAAW,CACT,IAAK,QAAQ,IAAI,cACb,QAAQ,IAAI,cACZ,EAAA,cAAc,kBAAmB,wBAAyB,uBAAyB,KACvF,QAAS,QAAQ,IAAI,iBACjB,QAAQ,IAAI,iBACZ,EAAA,cAAc,qBAAsB,wBAAyB,uBAAyB,KAC1F,MAAO,EAAA,cAAc,gBAAiB,CAAC,wBAAyB,oBAAqB,GAAK,EAAE,MAAM,UAIxG,EAAA,WAAW,UACX,EAAA,cAGF,EAAA,SAAS,YAAa,EAAS,KAAK,EAAA,cA0CpC,IAAa,EAAb,QAAa,EAAS,EAAA,CAxCrB,EAAA,OAAO,CACN,QAAS,EACT,SAAU,CACR,EAAA,gBACA,EAAA,YACA,EAAA,qBACA,EAAA,gBACA,EAAA,qCACA,EAAA,wBACA,EAAA,aACA,EAAA,oBACA,EAAA,mBACA,EAAA,YACA,EAAA,oBACA,EAAA,mBACA,EAAA,gBACA,EAAA,eAEF,QAAS,CAAC,EAAA,eACV,UAAW,CACT,CACE,QAAS,EAAA,eACT,MAAM,EACN,WAAY,IAAW,EAAA,UAAA,OAAA,EAAA,YACf,MAAA,EAA0B,EAAA,cAAc,gBAAiB,MAC3D,GAAA,EAAiB,OACb,EAAA,oBAAoB,CAAC,EAAgB,QAAQ,IAAK,KAAM,eACxD,MAAA,EAAa,EAAA,KAAK,QAAQ,MAAO,cAAe,EAAgB,QAAQ,KAAM,OAC7E,MAAA,CACL,QAAS,EAAA,aAAa,QAAQ,IAC9B,aAAc,EAAA,cAAc,QAAQ,KAGjC,MAAA,CACL,QAAS,aAMN,GAAA,QAAA,UAAA;;ACtFA,aAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,SAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,cACA,EAAA,QAAA,kCAIA,IAAa,EAAoB,EAAjC,MACgB,eAAQ,GAChB,IAAA,EAAU,GAuDP,OAtDH,IACF,EAAU,CACR,EAAA,WAAW,QAAQ,CACjB,OAAQ,CACN,YAAa,QAAQ,IAAI,aAAc,EAAA,cAAc,iBAAiB,EAAO,SAC7E,KAAM,CACJ,KAAM,QAAQ,IAAI,SAAW,QAAQ,IAAI,SAAW,EAAA,cAAc,qBAAsB,KAAM,QAC9F,OAAQ,CACN,KAAM,CACJ,OAAQ,CAAC,KACT,kBAAmB,CACjB,OACA,aACA,SACA,kBACA,kBACA,gCACA,8BACA,iCACA,SACA,aACA,SACA,qBAMV,QAAS,CACP,KAAM,EAAA,cAAc,qBAAsB,YAC1C,YAAa,EAAA,SAAS,2BACtB,YAAa,EAAA,cAAc,0BAA2B,MACtD,aAAc,EAAA,SAAS,mBAEvB,mBAAoB,EAAA,SAAS,yBAC7B,aAAc,EAAA,cAAc,sBAAuB,aACnD,gBAAiB,CACf,YAAa,EAAA,cAAc,qBAAsB,YACjD,+BAAgC,EAAA,cAAc,wBAAyB,OACvE,sBAAuB,EAAA,cACrB,mCACA,qCAEF,0BAA2B,CACzB,MAAO,EAAA,cAAc,wBAAyB,MAGlD,eAAgB,CACd,OAAQ,WAMX,CACL,OAAQ,EACR,iBAAkB,KA3DX,EAAoB,EAAA,EAAA,CADhC,EAAA,UACY,GAAA,QAAA,qBAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,MAAA,EAAA,QAAA,iBACA,EAAA,QAAA,QACA,EAAA,QAAA,QACA,EAAA,QAAA,MAEa,QAAA,WAAa,EAAO,EAAqB,KAAM,EAAA,UAAA,OAAA,EAAA,YACpD,MAAA,EAAO,GACT,SAAM,EAAA,UAAU,EAAA,OAAV,CAAkB,EAAA,KAAK,QAAQ,MAAO,iBAAkB,CAC1D,MAAA,EAAuD,KAAK,YAAa,EAAA,UAAU,EAAA,SAAV,CAAoB,EAAA,KAAK,QAAQ,MAAO,gBAAiB,CAAC,SAAU,WAC/I,GAAA,EAAY,aAAc,CACtB,MAAA,EAAW,OAAO,KAAK,EAAY,cAAc,IAAI,MAAU,KAAO,EAAY,aAAa,MACrG,EAAK,QAAQ,SAGf,EAAK,QAAQ,GAGR,OADP,QAAQ,IAAI,6BAA8B,EAAK,KAAK,MAC7C,IAAI,QAAQ,CAAC,EAAS,KACrB,MAAA,EAAQ,EAAA,MAAM,MAAO,CAAC,aAAc,GAAO,CAAC,IAAK,QAAQ,MAAM,QAAQ,QAAS,MACtF,EAAM,OAAO,KAAK,QAAQ,QAC1B,EAAM,OAAO,KAAK,QAAQ,QAC1B,EAAM,GAAG,QAAU,GAAiB,EAAQ;;;ACkF5C,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArGJ,MAAA,EAAA,QAAA,qBACA,EAAA,QAAA,cACA,EAAA,QAAA,0BACA,EAAA,QAAA,kCACA,EAAA,QAAA,wCACM,EAAQ,QAAQ,kBAChB,EAAc,QAAQ,IAS5B,GAPA,QAAQ,IAAM,YAAY,GAEjB,OADP,EAAA,UAAU,IAAI,EAAA,eAAe,OAAO,KAAK,EAAE,YACpC,KAAe,IAGxB,EAAA,SAAS,cAAe,QAAQ,IAAM,KAAM,OAExC,EAAA,SAAS,UAAW,CAChB,MAAA,EAAI,IAAI,EAAM,CAClB,YAAa,EACb,gBAAgB,EAChB,MAAO,CAAC,MAAO,OACf,YAAa,IAEf,EAAE,KAAK,CAAC,UAAW,gBACnB,EAAE,KAAK,CAAC,6BACR,OAAO,KAAK,EAAA,oBAAoB,QAAQ,GAAK,EAAE,KAAK,CAAC,EAAG,EAAA,mBAAmB,MAC3E,EAAE,UACA,CAAE,IAAK,CAAC,EAAG,IACX,CACE,MAAO,SACP,MAAO,QACP,GAAI,UAGR,QAAQ,IAAI,GAAK,GACjB,QAAQ,KAAK,GAGf,EAAA,iBAEA,MAAA,EAAA,QAAA,+BACA,EAAA,QAAA,oBACA,EAAA,QAAA,4BACA,EAAA,QAAA,2CACA,EAAA,QAAA,QACA,EAAA,QAAA,qCACA,EAAA,QAAA,kCAEA,EAAA,UAAU,IAAI,EAAA,eAAe,UAAS,OAAA,OAAA,GAChC,QAAQ,KAAK,WAAW,SAAS,OAAS,QAAQ,KAAK,WAAW,SAAS,aAC3E,CACE,OAAQ,CACN,SAAS,EACT,QAAQ,EACR,MAAM,EACN,aAAa,EACb,aAAa,IAGjB,GAAG,CACP,MAAM,EACN,YAAa,CACX,UAAU,EACV,SAAS,EACT,aAAa,MAIjB,MAAM,EAAqB,CACzB,EAAA,wBACA,EAAA,qBAAqB,QAAQ,EAAA,SAAS,YAAc,EAAA,SAAS,2BAG/D,SAAe,IA6BX,OAAA,EAAA,UAAA,OAAA,EAAA,YA5BE,GAAA,EAAA,SAAS,aAAc,CACnB,MAAA,EAAW,EAAA,cAAc,YAAa,IACtC,GAAY,GAAuB,IAAI,MAAM,KAC9C,EAAQ,QACX,EAAQ,KAAK,SAET,EAAA,WAAW,GAEf,GAAA,EAAA,SAAS,YAAa,CAClB,MAAA,EAA0B,EAAA,cAAc,WAAY,eACtD,UACI,EAAA,oBAAoB,CAAC,EAAgB,QAAQ,IAAK,KAAM,UACxD,MAAA,EAAa,EAAA,KAAK,QAAQ,MAAO,SAAU,EAAgB,QAAQ,KAAM,OAC/E,EAAmB,KAAK,EAAA,aAAa,QAAQ,KAC7C,MAAO,GACP,QAAQ,IAAI,IAGhB,EAAA,mBAAmB,EAAA,UAAW,GAAoB,UAChD,KACE,QAAQ,IAAI,oDAEd,IACQ,MAAA,IAAI,MAAM,OAKtB","file":"main.js","sourceRoot":"../src","sourcesContent":["export const CommandDescription = {\n  '--message': 'Simple commit message when deploying module',\n  '--out-dir': 'Parcel build out dir',\n  '--file': 'Pass file path after this argument',\n  '--namespace': `How this module will be named ? Later when you install it you can use it as follow import { MyModule } from '@mynamespace'`,\n  '--beat': `How many seconds the application should stay after deploy recomended 20 seconds so file will be distributed accross the network`,\n  '--html': 'Pass your html file this will override module and will injet your html before metadata',\n  '--html-message':\n    'Pass your html file this will override --message or 3-th argument message and you can put whole html',\n  '--webui': `Will spawn web ui with many settings, history, last deployed module etc. can be passed with --open-browser argument`,\n  '--open-browser': `Will open browser for web user interface`,\n  '--graphiql-playground': `Development purposes open graphiql-playground dev tools`,\n  '--node-only': `Will just spawn node so you can use it for persistent data`,\n  '--silent': `Will silent every program output log`,\n  '--unminify': 'Tell ParcelJS to not minify or uglify current deployed module',\n  '--browser': 'Will tell ParcelJS to build current module for browser',\n  '--tsconfig': `Create tsconfig file if not exist`,\n  '--verbose': 'Better logging or you can use -v argument for simplicity',\n  '--default-ipfs-node': `Default ipfs node is GO but if you want you can use JS '--default-ipfs-node js'`,\n  '--ipfs-api-gateway': 'This is the address of the IPFS Gatway default: 8081',\n  '--ipfs-api-port': 'This is the port of the IPFS Api default: 5002',\n  '--ipfs-swarms': `These are the swarms for the Ipfs daemon passing them with comma separated example: --ipfs-swarms /ip4/0.0.0.0/tcp/4001,/ip6/::/tcp/4001, etc...`,\n  '--deployer-config-name': `This is default reactive.json filename you can change with other but in this moment is not tested very well`,\n  '--graphiql': `Open GraphiQL dev screen`,\n  '--open-browser-graphiql': 'Open browser for development purposes with Graphiql Dev tools',\n  '--webui-server-watcher':\n    'If this argument passed we can spawn our server watcher so we can manage syncronization with UI and passing data from the rxdi-deploy server',\n  '--webui-server-watcher-port':\n    'Watcher port is the main status port for webui if changed webui will not work defaults: 8957',\n  '--graphiql-subscription-endpoint': 'Graphiql Dev tool subscription endpoint',\n  '--graphiql-auth-token': 'Authentication token for graphiql dev tools',\n  '--graphql-endpoint': 'Endpoint for the Graphql webserver',\n  '--write-effects':\n    'Development effects are for graphql webserver can be checked here for more info https://github.com/Stradivario/gapi',\n  '--graphql-server-only':\n    'This argument will start also graphql web server so you can start making queries and interact with deployer only via API',\n  '--graphiql-endpoint': `Endpoint for Graphiql development tools`,\n  '--graphql-api-port': 'Development server api port is random, if not set --random-port will default to: 9300',\n  '--random-port':\n    'This parameter will set random port to Graphql Server if for example you dont have the port avalable',\n  '--disable-package-collection': `Disable collecting dependencies from package.json`,\n  '--collect-packages': 'Collect dependencies from package.json and transfer it to reactive.json',\n  '--help': `This help suite :)`,\n  '--server-push-interval':\n    'Interval for server push service this is how fast the data will update by default is 7 seconds',\n  '--enable-full-folder-access':\n    'Will give you reading and writing the whole file system so you can scan and build every folder and file (development only)',\n  '--customComponent': 'Default ipfs module view component link',\n  '--interceptor': 'Pass Javascript or Typescript file to customize your Request/Response logic and Authorization',\n  '--import': 'Pass @rxdi module like a regular Import object',\n  '--globals': 'Install npm packages inside container separated by comma `@rxdi/core, @rxdi/hapi`, etc.',\n};\n","import { CommandDescription } from './commands-description';\n\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  return o.reduce((res, key) => {\n    res[key] = key;\n    return res;\n  }, Object.create(null));\n}\n\nexport const Commands = strEnum([\n  '--message',\n  '--out-dir',\n  '--file',\n  '--namespace',\n  '--beat',\n  '--html',\n  '--html-message',\n  '--webui',\n  '--open-browser',\n  '--node-only',\n  '--silent',\n  '--unminify',\n  '--browser',\n  '--v',\n  '--tsconfig',\n  '--verbose',\n  '--default-ipfs-node',\n  '--deployer-config-name',\n  '--open-browser-graphiql',\n  '--webui-server-watcher',\n  '--webui-server-watcher-port',\n  '--random-port',\n  '--graphiql',\n  '--graphiql-subscription-endpoint',\n  '--graphiql-playground',\n  '--graphiql-auth-token',\n  '--graphiql-endpoint',\n  '--graphql-endpoint',\n  '--write-effects',\n  '--graphql-api-port',\n  '--disable-package-collection',\n  '--collect-packages',\n  '--server-push-interval',\n  '--help',\n  '--ipfs-api-gateway',\n  '--ipfs-api-port',\n  '--ipfs-swarms',\n  '--graphql-server-only',\n  '--enable-full-folder-access',\n  '--customComponent',\n  '--interceptor',\n  '--import',\n  '--globals'\n]);\nexport type Commands = keyof typeof Commands;\n\nexport const ExcludedFromHelpers = strEnum(['--v']);\nexport type ExcludedFromHelpers = keyof typeof ExcludedFromHelpers;\n\nObject.keys(Commands).map(command => {\n  if (Object.keys(ExcludedFromHelpers).filter(c => c === command).length) {\n    return;\n  }\n  const commandExist = Object.keys(CommandDescription).filter(c => c === command).length;\n  if (!commandExist) {\n    console.error(`\nMissing helper for command ${command} if you seen this message the developers don't do their job very well and this release is broken...\n        `);\n    process.exit(0);\n  }\n});\n","import { Commands } from './commands';\nimport { CommandDescription } from './commands-description';\n\nconst compareString = (a: string, b: string, percentage: number = 32) => {\n  const first = a.split('');\n  const second = b.split('');\n  const similarity = first.filter((string, index) => string === second[index]).length;\n  const similarPercentage = (similarity / first.length) * 100;\n  if (similarPercentage > percentage) {\n    console.log('Command similarity', similarPercentage + '%');\n    return a;\n  } else {\n    return false;\n  }\n};\nconst args = process.argv.slice(2);\nconst argumentCommands = args.filter(c => c.includes('--'));\n\nexport const checkArguments = () => {\n  argumentCommands.map(command => {\n    const commandExist = Object.keys(CommandDescription).filter(c => c === command).length;\n    if (!commandExist && args.length) {\n      const predicted = Object.keys(Commands)\n        .filter(c => compareString(c.split('--')[1], command.split('--')[1]))\n        .toString();\n      let message = '';\n      if (predicted.length) {\n        message = `maybe you mean '${predicted}'`;\n      }\n      console.error(`\nUnknown option '${command}' ${message}?\nMore options you can find passing --help argument\n            `);\n      process.exit(0);\n    }\n  });\n};\n","import { Commands } from '../../../commands';\n\nexport const includes = (i: Commands) => process.argv.toString().includes(i);\nexport const nextOrDefault = (i: Commands, fb: any = true, type = p => p) => {\n  if (process.argv.toString().includes(i)) {\n    const isNextArgumentPresent = process.argv[process.argv.indexOf(i) + 1];\n    if (!isNextArgumentPresent) {\n      return fb;\n    }\n    if (isNextArgumentPresent.includes('--')) {\n      return fb;\n    }\n    return type(isNextArgumentPresent);\n  }\n  return fb;\n};\n","import { Service } from '@rxdi/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Service()\nexport class LoggerService {\n  stdout: BehaviorSubject<string> = new BehaviorSubject('');\n}\n","import { Service } from '@rxdi/core';\nimport { Commands } from '../../../commands';\nimport { nextOrDefault } from '../helpers/helpers';\n\n@Service()\nexport class ArgumentsService {\n  nextOrDefault(i: Commands, fallback: any = null, type = p => p) {\n    return nextOrDefault(i, fallback, type);\n  }\n}\n","import { InjectionToken } from '@rxdi/core';\nimport * as Datastore from 'nedb';\nimport GraphQLServerOptions from 'apollo-server-core/dist/graphqlOptions';\nimport { Request } from 'hapi';\nimport { Resolver } from './app/server/context';\n\nexport type __DEPLOYER_ARGUMENTS = string[];\nexport type __PARCEL_BROWSER_BUILD = boolean;\nexport type __PARCEL_MINIFY = boolean;\nexport type __GENERATE_TS_CONFIG = boolean;\nexport type __PARCEL_BUILD_OUT_DIR = 'build';\nexport type __FILE_PATH = './index';\nexport type __HOME_DIR = string;\nexport type __FILE_NAME = string;\nexport type __NAMESPACE = '@rxdi/core';\nexport type __FOLDER = string;\nexport type __FILE_EXTENSION = '.ts' | '.js';\nexport type __IPFS_NODE_RESOLUTION_TIME = number;\nexport type __DEPLOYER_OUTPUT_CONFIG_NAME = 'reactive.json' | 'package.json';\nexport type __PROCESSING_TIME_INIT = Date;\nexport type __PROCESSING_TIME_FINISH = Date;\nexport type __PROCESSING_TIME_END = Date;\nexport type __SETTINGS_DATABASE = Datastore;\nexport type __NAMESPACE_DB = Datastore;\nexport type __BUILD_HISTORY_DATABASE = Datastore;\nexport type __PREVIWS_DATABASE = Datastore;\nexport type __TRANSACTIONS_DATABASE = Datastore;\n\nexport type __COMMIT_MESSAGE = string;\nexport type __CREATE_HTML_PAGE = string;\nexport type __NODE_MODULES = string;\nexport type __ROOT_FOLDER = string;\n\nexport const __ROOT_FOLDER = new InjectionToken('root_folder');\nexport const __NODE_MODULES = new InjectionToken('local_node_modules');\nexport const __DEPLOYER_ARGUMENTS = new InjectionToken('rxdi-deployer-command-arguments');\nexport const __PARCEL_BROWSER_BUILD = new InjectionToken<boolean>('rxdi-deployer-parcel-is-browser-build');\nexport const __PARCEL_MINIFY = new InjectionToken<boolean>('rxdi-deployer-parcel-minify');\nexport const __PARCEL_BUILD_OUT_DIR = new InjectionToken<boolean>('rxdi-deployer-parcel-build-out-dir');\nexport const __PARCEL_SETTINGS = new InjectionToken('rxdi-deployer-parcel-settings');\nexport const __GENERATE_TS_CONFIG = new InjectionToken<boolean>('rxdi-deployer-tsconfig-generate');\nexport const __FILE_PATH = new InjectionToken<boolean>('rxdi-deployer-file-path');\nexport const __FILE_NAME = new InjectionToken<boolean>('rxdi-deployer-file-name');\nexport const __NAMESPACE = new InjectionToken<boolean>('rxdi-deployer-namespace');\nexport const __FOLDER = new InjectionToken<boolean>('rxdi-deployer-folder');\nexport const __FILE_EXTENSION = new InjectionToken<boolean>('rxdi-deployer-file-extension');\nexport const __IPFS_NODE_RESOLUTION_TIME = new InjectionToken<boolean>('rxdi-deployer-node-resolution-time');\nexport const __DEPLOYER_OUTPUT_CONFIG_NAME = new InjectionToken<boolean>(\n  'rxdi-deployer-default-migration-package-name'\n);\nexport const __PROCESSING_TIME_INIT = new InjectionToken<boolean>('rxdi-deployer-processin-time-init');\nexport const __PROCESSING_TIME_FINISH = new InjectionToken<boolean>('rxdi-deployer-processin-time-finish');\nexport const __PROCESSING_TIME_END = new InjectionToken<boolean>('rxdi-deployer-processin-time-end');\nexport const __SETTINGS_DATABASE = new InjectionToken<boolean>('rxdi-deployer-home-settings');\nexport const __BUILD_HISTORY_DATABASE = new InjectionToken<boolean>('rxdi-deployer-build-history-database');\nexport const __PREVIWS_DATABASE = new InjectionToken<boolean>('rxdi-deployer-previews-database');\nexport const __TRANSACTIONS_DATABASE = new InjectionToken<boolean>('rxdi-deployer-transactions-database');\nexport const __NAMESPACE_DB = new InjectionToken<boolean>('rxdi-deployer-namespace-database');\nexport const __HOME_DIR = new InjectionToken<boolean>('rxdi-deployer-home-directory');\nexport const __COMMIT_MESSAGE = new InjectionToken<boolean>('rxdi-deployer-commit-message');\nexport const __CREATE_HTML_PAGE = new InjectionToken<boolean>('rxdi-deployer-commit-message');\nexport type RequestHandler = InterceptorType;\nexport const RequestHandler = new InjectionToken<InterceptorType>('rxdi-deployer-request-handler-external');\n\nexport interface __PARCEL_SETTINGS {\n  watch?: boolean;\n  detailedReport?: boolean;\n  outFile?: string;\n  publicUrl?: string;\n  cache?: boolean;\n  cacheDir?: '.cache';\n  contentHash?: false;\n  scopeHoist?: false;\n  https?: { cert: string; key: string };\n  logLevel?: 1 | 2 | 3;\n  hmr?: true;\n  hmrPort?: 0;\n  sourceMaps?: true;\n  hmrHostname?: string;\n  detailedReports?: boolean;\n}\n\nexport class DagModel {\n  name: string;\n  typings?: string;\n  module: string;\n  metadata?: {};\n  message?: string;\n  hash?: string;\n  createdAt?: Date;\n  previous?: string[];\n  dependencies?: string[];\n  packages?: { name: string; version: string }[];\n  ipfs?: { provider: string; dependencies: string[] }[];\n}\n\nexport class PreviousModel {\n  id?: string;\n  name: string;\n  hash: string;\n}\n\nexport interface InterceptorType {\n  handler: (request: Request) => Promise<GraphQLServerOptions>;\n  resolverHook: (resolver: Resolver, root, args, context, info) => void;\n}\n\n\n","import { Service } from '@rxdi/core';\n\n@Service()\nexport class TsConfigGenratorService {\n  getTsConfig(filename: string) {\n    return `\n{\n    \"compilerOptions\": {\n        \"declaration\": true,\n        \"module\": \"commonjs\",\n        \"target\": \"es6\",\n        \"baseUrl\": \"src\",\n        \"stripInternal\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"moduleResolution\": \"node\",\n        \"outDir\": \".\",\n        \"lib\": [\n            \"es2017\",\n            \"es2016\",\n            \"es2015\",\n            \"es6\",\n            \"dom\",\n            \"esnext.asynciterable\"\n        ],\n        \"skipLibCheck\": true,\n        \"typeRoots\": [\n            \"node_modules/@types\"\n        ]\n    },\n    \"include\": [\n        \".\"\n    ],\n    \"files\": [\n        \"${filename}.ts\"\n    ]\n}`;\n  }\n\n  getPackageJson() {\n    return `\n{\n  \"browserslist\": [\n      \"last 1 chrome versions\"\n  ]\n}\n`;\n  }\n}\n","import { Service, FileService as RxdiFileService, BootstrapLogger } from '@rxdi/core';\nimport { readFile, writeFile } from 'fs';\n\n@Service()\nexport class FileService {\n  constructor(private fileService: RxdiFileService, private logger: BootstrapLogger) {}\n\n  ensureDir(dir: string) {\n    return this.fileService.mkdirp(dir);\n  }\n\n  async readFile(file: string): Promise<string> {\n    return await this.readFilePromisify(file);\n  }\n\n  async writeFile(path: string, data: any) {\n    return await this.writeFilePromisify(path, data);\n  }\n\n  async createFolder(folder: string) {\n    return await this.fileService.mkdirp(folder).toPromise();\n  }\n\n  fileWalker(folder: string) {\n    return this.fileService.fileWalker(folder);\n  }\n\n  private readFilePromisify(file: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(data);\n      });\n    });\n  }\n\n  readFilePromisifyFallback(file: string) {\n    return new Promise(async (resolve, reject) => {\n      readFile(file, 'utf8', (err, data) => {\n        if (err) {\n          this.logger.error('Fallback missing reactive.json file will create one!');\n          return this.writeFile(\n            file,\n            JSON.stringify({\n              name: '',\n              typings: '',\n              module: '',\n              message: '',\n              previews: [],\n            })\n          )\n            .then(async () => resolve(await this.readFilePromisify(file)))\n            .catch(e => reject(e));\n        }\n        return resolve(data);\n      });\n    });\n  }\n\n  private writeFilePromisify(path: string, data: any, encoding: string = 'utf-8'): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      writeFile(path, data, { encoding }, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve(true);\n      });\n    });\n  }\n\n  readFileRaw(file: string): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      readFile(file, (err, data) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(data);\n      });\n    });\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { ArgumentsService } from './app/services/arguments/arguments.service';\nimport {\n  __NODE_MODULES,\n  __DEPLOYER_ARGUMENTS,\n  __PARCEL_BROWSER_BUILD,\n  __PARCEL_MINIFY,\n  __PARCEL_BUILD_OUT_DIR,\n  __PARCEL_SETTINGS,\n  __GENERATE_TS_CONFIG,\n  __FILE_PATH,\n  __NAMESPACE,\n  __FOLDER,\n  __FILE_EXTENSION,\n  __IPFS_NODE_RESOLUTION_TIME,\n  __DEPLOYER_OUTPUT_CONFIG_NAME,\n  __PROCESSING_TIME_INIT,\n  __PROCESSING_TIME_FINISH,\n  __PROCESSING_TIME_END,\n  __FILE_NAME,\n  __HOME_DIR,\n  __SETTINGS_DATABASE,\n  __BUILD_HISTORY_DATABASE,\n  __PREVIWS_DATABASE,\n  __COMMIT_MESSAGE,\n  __CREATE_HTML_PAGE,\n  __ROOT_FOLDER,\n  __NAMESPACE_DB,\n  __TRANSACTIONS_DATABASE,\n} from './env.injection.tokens';\nimport { TsConfigGenratorService } from './app/services/tsconfig-generator/tsconfig-generator.service';\nimport { FileService } from './app/services/file/file.service';\nimport { homedir } from 'os';\nconst Datastore = require('nedb');\nimport { includes, nextOrDefault } from './app/services/helpers/helpers';\nimport { unlinkSync } from 'fs';\n\n@Module({\n  services: [\n    {\n      provide: 'isLockExists',\n      deps: [FileService],\n      lazy: true,\n      useFactory: async (fileService: FileService) => {\n        const repoLockPath = `${homedir()}/.jsipfs/repo.lock`;\n        const lockPath = `${homedir()}/.jsipfs/datastore/LOCK`;\n        try {\n          await fileService.readFile(repoLockPath);\n          unlinkSync(repoLockPath);\n        } catch (e) {}\n        try {\n          await fileService.readFile(lockPath);\n          unlinkSync(lockPath);\n        } catch (e) {}\n        return true;\n      },\n    },\n    {\n      provide: __DEPLOYER_ARGUMENTS,\n      useFactory: () => process.argv.slice(2),\n    },\n    {\n      provide: __NODE_MODULES,\n      useValue: __dirname.replace('dist', '') + '/node_modules',\n    },\n    {\n      provide: __ROOT_FOLDER,\n      useValue: __dirname.replace('dist', ''),\n    },\n    {\n      provide: __HOME_DIR,\n      useValue: homedir(),\n    },\n    {\n      provide: __COMMIT_MESSAGE,\n      deps: [__DEPLOYER_ARGUMENTS],\n      useFactory: (args: __DEPLOYER_ARGUMENTS) => {\n        const hasArgument = nextOrDefault('--message', false);\n        if (hasArgument) {\n          return hasArgument;\n        }\n        if (args[2] && args[2].includes('--')) {\n          return '';\n        }\n        return args[2] || '';\n      },\n    },\n    {\n      provide: __PARCEL_BROWSER_BUILD,\n      useFactory: () => includes('--browser'),\n    },\n    {\n      provide: __PARCEL_MINIFY,\n      useFactory: () => !includes('--unminify'),\n    },\n    {\n      provide: __PARCEL_BUILD_OUT_DIR,\n      useFactory: () => nextOrDefault('--out-dir', 'build'),\n    },\n    {\n      provide: __PARCEL_SETTINGS,\n      useFactory: () => ({\n        watch: false,\n        logLevel: 3,\n        detailedReport: true,\n      }),\n    },\n    {\n      provide: __GENERATE_TS_CONFIG,\n      useFactory: (): __GENERATE_TS_CONFIG => includes('--tsconfig'),\n    },\n    {\n      provide: __FILE_PATH,\n      deps: [__DEPLOYER_ARGUMENTS],\n      useFactory: (args: __DEPLOYER_ARGUMENTS) => {\n        if (includes('--file')) {\n          return nextOrDefault('--file', '');\n        }\n        if (args[0] && args[0].includes('--') && args[0] && !args[0].match(/[^\\\\]*\\.(\\w+)$/)) {\n          return './index.ts';\n        }\n        return args[0] || './index.ts';\n      },\n    },\n    {\n      provide: __FILE_NAME,\n      deps: [__FILE_PATH],\n      useFactory: (filePath: __FILE_PATH) => filePath.split('/').pop(),\n    },\n    {\n      provide: __NAMESPACE,\n      deps: [__DEPLOYER_ARGUMENTS],\n      useFactory: (args: __DEPLOYER_ARGUMENTS) => {\n        if (includes('--namespace')) {\n          return nextOrDefault('--namespace', '@rxdi');\n        }\n        if (args[1] && args[1].includes('--')) {\n          return '@rxdi';\n        }\n        return args[1] || '@rxdi';\n      },\n    },\n    {\n      provide: __FOLDER,\n      deps: [__FILE_PATH],\n      useFactory: (filePath: __FILE_PATH) => filePath.substring(0, filePath.lastIndexOf('/')),\n    },\n    {\n      provide: __FILE_EXTENSION,\n      deps: [__FILE_PATH],\n      useFactory: (filePath: __FILE_PATH) => {\n        return filePath.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i) ? filePath.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i)[0] : 'ts';\n      },\n    },\n    {\n      provide: __IPFS_NODE_RESOLUTION_TIME,\n      useFactory: () => nextOrDefault('--beat', 20, Number),\n    },\n    {\n      provide: __DEPLOYER_OUTPUT_CONFIG_NAME,\n      useValue: nextOrDefault('--deployer-config-name', 'reactive.json'),\n    },\n    {\n      provide: __PROCESSING_TIME_INIT,\n      useFactory: () => Date.now(),\n    },\n    {\n      provide: __PROCESSING_TIME_FINISH,\n      useFactory: () => nextOrDefault('--deployer-config-name', 'reactive.json'),\n    },\n    {\n      provide: __PROCESSING_TIME_END,\n      deps: [ArgumentsService],\n      useFactory: () => nextOrDefault('--deployer-config-name', 'reactive.json'),\n    },\n    {\n      provide: __CREATE_HTML_PAGE,\n      deps: [ArgumentsService],\n      useFactory: () => nextOrDefault('--html', '<h1>@rxdi decentralized module</h1>'),\n    },\n    {\n      provide: 'init-ts-config-file',\n      deps: [__GENERATE_TS_CONFIG, __FILE_NAME, __FOLDER, TsConfigGenratorService, FileService],\n      lazy: true,\n      useFactory: async (\n        tsConfig: __GENERATE_TS_CONFIG,\n        fileName: __FILE_NAME,\n        folder: __FOLDER,\n        generator: TsConfigGenratorService,\n        fileService: FileService\n      ) => {\n        if (tsConfig) {\n          await fileService.writeFile(folder + '/tsconfig.json', generator.getTsConfig(fileName.replace('.ts', '')));\n        }\n        return tsConfig;\n      },\n    },\n    {\n      provide: __SETTINGS_DATABASE,\n      deps: [__HOME_DIR],\n      lazy: true,\n      useFactory: homeDir =>\n        new Promise(resolve => {\n          const database = new Datastore({\n            filename: `${homeDir}/.rxdi/settings`,\n            autoload: true,\n            timestampData: true,\n          });\n          database.loadDatabase(e => {\n            if (e) {\n              throw new Error('Error loading database!');\n            }\n            resolve(database);\n          });\n        }),\n    },\n    {\n      provide: __NAMESPACE_DB,\n      deps: [__HOME_DIR],\n      lazy: true,\n      useFactory: homeDir =>\n        new Promise(resolve => {\n          const database = new Datastore({\n            filename: `${homeDir}/.rxdi/namespace`,\n            autoload: true,\n            timestampData: true,\n          });\n          database.loadDatabase(e => {\n            if (e) {\n              throw new Error('Error loading database!');\n            }\n            resolve(database);\n          });\n        }),\n    },\n    {\n      provide: __BUILD_HISTORY_DATABASE,\n      deps: [__HOME_DIR],\n      lazy: true,\n      useFactory: homeDir =>\n        new Promise(resolve => {\n          const database = new Datastore({\n            filename: `${homeDir}/.rxdi/history`,\n            autoload: true,\n            timestampData: true,\n          });\n          database.loadDatabase(e => {\n            if (e) {\n              throw new Error('Error loading database!');\n            }\n            resolve(database);\n          });\n        }),\n    },\n    {\n      provide: __PREVIWS_DATABASE,\n      deps: [__HOME_DIR],\n      lazy: true,\n      useFactory: homeDir =>\n        new Promise(resolve => {\n          const database = new Datastore({\n            filename: `${homeDir}/.rxdi/previews`,\n            autoload: true,\n          });\n          database.loadDatabase(e => {\n            if (e) {\n              throw new Error('Error loading database!');\n            }\n            resolve(database);\n          });\n        }),\n    },\n    {\n      provide: __TRANSACTIONS_DATABASE,\n      deps: [__HOME_DIR],\n      lazy: true,\n      useFactory: homeDir =>\n        new Promise(resolve => {\n          const database = new Datastore({\n            filename: `${homeDir}/.rxdi/transactions`,\n            autoload: true,\n            timestampData: true,\n          });\n          database.loadDatabase(e => {\n            if (e) {\n              throw new Error('Error loading database!');\n            }\n            resolve(database);\n          });\n        }),\n    },\n  ],\n})\nexport class EnvironemntSetterModule {}\n\n// import { Commands } from 'commands';\n\n// process.argv.push(<Commands>'--webui');\n// process.argv.push(<Commands>'--verbose');\n// process.argv.push(<Commands>'--write-effects');\n// process.argv.push(<Commands>'--graphiql-playground');\n// process.argv.push(<Commands>'--server-push-interval');\n// process.argv.push(<Commands>'--graphiql');\n","import { Service, Inject, BootstrapLogger } from '@rxdi/core';\nimport { IPFSFile, FilesAPI } from '@gapi/ipfs';\nimport { Readable } from 'stream';\nimport { IpfsDaemonInfoService } from '@gapi/ipfs-daemon/ipfs-daemon-node-info';\nimport { DaemonNodeInfo, IPFS_DAEMON } from '@gapi/ipfs-daemon';\nimport { Observable, combineLatest } from 'rxjs';\nimport { get as http, IncomingMessage } from 'http';\nimport { get as https } from 'https';\nimport { switchMap } from 'rxjs/operators';\n\n@Service()\nexport class FileIpfsService {\n  nodeInfo: DaemonNodeInfo = this.ipfsDaemonNodeInfo.info;\n  providers = {\n    infura: 'https://ipfs.infura.io/ipfs/',\n    cloudflare: 'https://cloudflare-ipfs.com/ipfs/',\n    ipfsOriginal: 'https://ipfs.io/ipfs/',\n    thisNode: `http://${this.ipfsDaemonNodeInfo.info.gatewayHost}:${this.ipfsDaemonNodeInfo.info.gatewayPort}/ipfs/`,\n  };\n  constructor(\n    @Inject(IPFS_DAEMON) private ipfsDaemon: { api: FilesAPI },\n    private ipfsDaemonNodeInfo: IpfsDaemonInfoService,\n    private logger: BootstrapLogger\n  ) {}\n\n  async addFile(file: string, options?: { path: string }) {\n    const content = new Readable();\n\n    content.push(file);\n    content.push(null);\n\n    const fileToAdd = { content, path: null };\n    if (options) {\n      Object.assign(fileToAdd, options);\n    }\n    const ipfsFile = await this.ipfsDaemon.api.add([fileToAdd]);\n    try {\n      this.ping(ipfsFile[0].hash).subscribe();\n    } catch (e) {}\n\n    // this.logger.log(`\\nLocal: http://${this.nodeInfo.gatewayHost}:${this.nodeInfo.gatewayPort}/ipfs/${ipfsFile[0].hash}`);\n    // this.logger.log(`\\nInfura: ${providers.infura}${ipfsFile[0].hash}`);\n    this.logger.log(`\\Cloudflare: ${this.providers.cloudflare}${ipfsFile[0].hash}`);\n    // this.logger.log(`\\nIpfs: ${providers.ipfsOriginal}${ipfsFile[0].hash}`);\n\n    return ipfsFile;\n  }\n\n  async addFiles(files: IPFSFile[]) {\n    const readableFiles = files.map(f => {\n      const content = new Readable();\n      content.push(f);\n      content.push(null);\n      return { content };\n    });\n    return await this.ipfsDaemon.api.add(readableFiles);\n  }\n\n  ping(hash: string) {\n    return this.httpObservable(`${this.providers.thisNode}${hash}`).pipe(\n      switchMap(() =>\n        combineLatest(\n          this.httpObservable(`${this.providers.infura}${hash}`),\n          this.httpObservable(`${this.providers.cloudflare}${hash}`),\n          this.httpObservable(`${this.providers.ipfsOriginal}${hash}`)\n        )\n      )\n    );\n  }\n\n  httpObservable(link: string): Observable<IncomingMessage> {\n    return Observable.create(o => {\n      if (link.includes('https')) {\n        https(link, r => o.next(r));\n      } else {\n        http(link, r => o.next(r));\n      }\n    });\n  }\n  async wait(ipfsFile: IPFSFile[]) {\n    return await new Promise((resolve, reject) =>\n      this.ping(ipfsFile[0].hash).subscribe(stream => resolve(stream), e => reject(e))\n    );\n  }\n\n  async addPackage(p) {\n    return await this.addFile(JSON.stringify(p, null, 4));\n  }\n\n  async catIpfsFile(hash: string) {\n    return await this.ipfsDaemon.api.cat(hash);\n  }\n\n  async getIpfsFile(hash: string) {\n    return await this.ipfsDaemon.api.get(hash);\n  }\n\n  async addRawFile(content: Buffer) {\n    const ipfsFile = await this.ipfsDaemon.api.add([{ content }]);\n    this.ping(ipfsFile[0].hash).subscribe();\n    return ipfsFile;\n  }\n}\n","import { Service, Inject } from '@rxdi/core';\nimport Bundler = require('parcel-bundler');\nimport {\n  __PARCEL_BROWSER_BUILD,\n  __PARCEL_MINIFY,\n  __PARCEL_BUILD_OUT_DIR,\n  __PARCEL_SETTINGS,\n} from '../../../env.injection.tokens';\n\n@Service()\nexport class ParcelBundlerService {\n  constructor(\n    @Inject(__PARCEL_BROWSER_BUILD)\n    private isBrowserBuild: __PARCEL_BROWSER_BUILD,\n    @Inject(__PARCEL_MINIFY) private isBuildMinfied: __PARCEL_BROWSER_BUILD,\n    @Inject(__PARCEL_BUILD_OUT_DIR) private buildOutDir: __PARCEL_BUILD_OUT_DIR,\n    @Inject(__PARCEL_SETTINGS) private settings: __PARCEL_SETTINGS\n  ) {}\n\n  async prepareBundler(file, outDir = null, fileName?: string) {\n    return new Promise((resolve, reject) => {\n      const options = {\n        target: this.isBrowserBuild ? 'browser' : 'node',\n        minify: this.isBuildMinfied,\n        autoInstall: true,\n        outFile: fileName,\n        outDir: outDir || this.buildOutDir,\n        ...this.settings,\n      };\n      const bundler = new Bundler(file, options);\n      let bundle = null;\n      bundler.on('bundled', compiledBundle => {\n        // const inter: {\n        //     id; name; basename; relativeName; options; encoding; type; processed; contents; ast; generated; hash; parentDeps; dependencies\n        //     depAssets; parentBundle; bundles; cacheData; startTime; endTime; buildTime; bundledSize; resolver;\n        // } = compiledBundle.entryAsset;\n        // console.log(inter.buildTime, inter.startTime, inter.endTime, inter.bundledSize);\n        bundle = compiledBundle;\n      });\n      bundler.on('buildEnd', () => {\n        process.argv.toString().includes('--silent')\n          ? (console.log = () => null)\n          : process.stdout.write(`Parcel Build finished! Bundle source: ${bundle.name}\\n`);\n        bundle = null;\n        setTimeout(() => resolve(), 1000);\n      });\n      bundler.on('buildError', e => reject(e));\n      bundler.bundle();\n    });\n  }\n}\n","import { Service, Inject } from '@rxdi/core';\nimport { FileService } from './file.service';\nimport { __PARCEL_BUILD_OUT_DIR } from '../../../env.injection.tokens';\n\n@Service()\nexport class FileUserService {\n  @Inject(__PARCEL_BUILD_OUT_DIR)\n  private parcelBuildDir: __PARCEL_BUILD_OUT_DIR;\n\n  constructor(private fileService: FileService) {}\n\n  async writeFile(file: string, fileName: string, namespace: string) {\n    return await new Promise(async (resolve, reject) => {\n      this.fileService.ensureDir(`${this.parcelBuildDir}/${namespace}`).subscribe(\n        async () => {\n          await this.fileService.writeFile(`${this.parcelBuildDir}/${namespace}/${fileName}`, file);\n          resolve(true);\n        },\n        e => reject(e)\n      );\n    });\n  }\n\n  async writeDag(path: string, file: string) {\n    return await new Promise(async (resolve, reject) => {\n      await this.fileService.writeFile(path, file);\n      resolve(true);\n    });\n  }\n}\n","import { Service, BootstrapLogger, Inject } from '@rxdi/core';\nimport childProcess = require('child_process');\nimport { __NODE_MODULES } from '../../../env.injection.tokens';\n\n@Service()\nexport class TypescriptDefinitionGeneratorService {\n  child: childProcess.ChildProcess;\n\n  constructor(private logger: BootstrapLogger, @Inject(__NODE_MODULES) private node_modules: string) {}\n\n  private validateEntries(namespace: string, projectPath: string, outPath: string) {\n    if (!projectPath) {\n      throw new Error('Missing project path');\n    }\n    if (!namespace) {\n      throw new Error('Missing project namespace');\n    }\n\n    if (!outPath) {\n      throw new Error('Missing project outPath');\n    }\n  }\n\n  async mergeTypings(namespace: string, projectPath, outPath: string) {\n    this.validateEntries(namespace, projectPath, outPath);\n    return new Promise((resolve, reject) => {\n      if (this.child) {\n        this.child.stdout.removeAllListeners('data');\n        this.child.stderr.removeAllListeners('data');\n        this.child.removeAllListeners('exit');\n        this.child.kill();\n      }\n      process.env = Object.assign(process.env, {});\n      this.logger.log('Typescript merging definitions started in child process...\\n');\n      this.child = childProcess.spawn(`${this.node_modules}/.bin/rxdi-merge`, [\n        '--name',\n        namespace,\n        '--project',\n        projectPath,\n        '--out',\n        outPath,\n      ]);\n      this.child.stdout.on('data', data => {\n        process.argv.toString().includes('--silent') ? (console.log = () => null) : process.stdout.write(data);\n      });\n      this.child.stderr.on('data', data => {\n        if (data.toString().includes('Unable to resolve configuration')) {\n          this.logger.log('If you want rxdi-deploy to create tsconfig.json for you pass parameter --tsconfig');\n        }\n        reject(process.stdout.write(data));\n      });\n      this.child.on('exit', code => {\n        this.child.kill();\n        this.child = null;\n        this.logger.log(`Child process exited with code ${code}\\n`);\n        resolve(true);\n      });\n    });\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { InjectionToken } from '@rxdi/core';\n\nexport type STATUS_TYPE = BehaviorSubject<boolean>;\nexport type BUILD_STATUS = 'SUCCESS' | 'FAILED' | 'WARNING';\n\nclass BuildStatus {\n  status: BUILD_STATUS = 'SUCCESS';\n  message?: string = '';\n}\nexport class FILE_DEPLOYMENT_STATUS_INTERFACE {\n  file?: BuildStatus = new BuildStatus();\n  typings?: BuildStatus = new BuildStatus();\n  module?: BuildStatus = new BuildStatus();\n}\nexport type FILE_DEPLOYMENT_STATUS = BehaviorSubject<FILE_DEPLOYMENT_STATUS_INTERFACE>;\n\nexport const START = new InjectionToken('compilation-started');\nexport const FILE_DEPLOYMENT_STATUS = new InjectionToken('files-deploy-ment');\n","import { Service, Inject } from '@rxdi/core';\nimport { IPFSFile } from '@gapi/ipfs';\nimport { FILE_DEPLOYMENT_STATUS } from '../../status/status-injection.tokens';\nimport { FileIpfsService } from '../ipfs-file/ipfs-file.service';\nimport { DagModel } from '../../../env.injection.tokens';\nconst Table = require('terminal-table');\n\n@Service()\nexport class TableService {\n  @Inject(FILE_DEPLOYMENT_STATUS)\n  private $deploymentStatus: FILE_DEPLOYMENT_STATUS;\n\n  constructor(private fileIpfsService: FileIpfsService) {}\n\n  createGenericTableStatus(ModuleStatus) {\n    let Icon, Color;\n\n    if (ModuleStatus === 'WARNING') {\n      Icon = '⚠';\n      Color = 'yellow';\n    }\n    if (ModuleStatus === 'FAILED') {\n      Icon = '✘';\n      Color = 'red';\n    }\n\n    if (ModuleStatus === 'SUCCESS') {\n      Icon = '✔';\n      Color = 'green';\n    }\n    return { Icon, Color };\n  }\n\n  createTable(file: IPFSFile[], typings: IPFSFile[], m: IPFSFile[]) {\n    if (m.length < 1) {\n      m.push(m[0]);\n    }\n    const provider = this.fileIpfsService.providers.ipfsOriginal;\n    const FileStatus = this.$deploymentStatus.getValue().file;\n    const TypingsStatus = this.$deploymentStatus.getValue().typings;\n    const ModuleStatus = this.$deploymentStatus.getValue().module;\n    const statusFile = this.createGenericTableStatus(FileStatus.status);\n    const statusTypings = this.createGenericTableStatus(TypingsStatus.status);\n    const statusModule = this.createGenericTableStatus(ModuleStatus.status);\n    const columns = ['', 'Status', 'File Type', 'Size', 'Gateway'];\n    let width = [4, '6%', '6%', '8%', '78%'];\n    const fileRow = [\n      statusFile.Icon,\n      FileStatus.status,\n      'Bundle',\n      `${file[0].size} bytes`,\n      `${provider}${file[0].hash}`,\n    ];\n    const typingsRow = [\n      statusTypings.Icon,\n      TypingsStatus.status,\n      'Typings',\n      `${typings[0].size} bytes`,\n      `${provider}${typings[0].hash}`,\n    ];\n    const moduleRow = [\n      statusModule.Icon,\n      ModuleStatus.status,\n      'Module',\n      `${m[1].size} bytes`,\n      `${provider}${m[1].hash}`,\n    ];\n\n    if (FileStatus.status !== 'SUCCESS' || TypingsStatus.status !== 'SUCCESS' || ModuleStatus.status !== 'SUCCESS') {\n      columns.push('Errors');\n      width = [4, '6%', '6%', '8%', '40%', '38%'];\n    }\n\n    if (FileStatus.status !== 'SUCCESS') {\n      fileRow.push(FileStatus.message);\n    }\n\n    if (TypingsStatus.status !== 'SUCCESS') {\n      typingsRow.push(TypingsStatus.message);\n    }\n\n    if (ModuleStatus.status !== 'SUCCESS') {\n      moduleRow.push(ModuleStatus.message);\n    }\n\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width,\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(columns);\n    t.push(fileRow);\n    t.push(typingsRow);\n    t.push(moduleRow);\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      { column: [0, 1] },\n      {\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      { column: [0, 2], row: [0, 4] },\n      {\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      { column: [0, 1], row: [0, 2] },\n      {\n        color: 'green',\n      }\n    );\n\n    t.attrRange(\n      { column: [0, 2], row: [0, 2] },\n      {\n        color: statusFile.Color,\n      }\n    );\n    t.attrRange(\n      { column: [0, 2], row: [2, 3] },\n      {\n        color: statusTypings.Color,\n      }\n    );\n    t.attrRange(\n      { column: [0, 2], row: [3, 4] },\n      {\n        color: statusModule.Color,\n      }\n    );\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        // leftPadding: 5\n      }\n    );\n\n    if (FileStatus.status !== 'SUCCESS' || TypingsStatus.status !== 'SUCCESS' || ModuleStatus.status !== 'SUCCESS') {\n      t.attrRange(\n        { column: [5, 6] },\n        {\n          color: 'red',\n        }\n      );\n      t.attrRange(\n        { column: [5, 6], row: [5, 6] },\n        {\n          color: 'red',\n        }\n      );\n    }\n    return t;\n  }\n\n  previewsVersions(previewsVersions: string[]) {\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width: ['50%', '50%'],\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(['Previews versions', 'Gateway']);\n    previewsVersions.forEach(v => {\n      t.push([v, `${this.fileIpfsService.providers.ipfsOriginal}${v}`]);\n    });\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        align: 'center',\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        leftPadding: 5,\n      }\n    );\n\n    return t;\n  }\n\n  endInstallCommand(hash) {\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width: ['50%'],\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(['Install command']);\n    t.push([`rxdi i ${hash}`]);\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        align: 'center',\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        leftPadding: 5,\n      }\n    );\n\n    return t;\n  }\n\n  previewsNext(previewsVersions: string[]) {\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width: ['50%', '50%'],\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(['Previews version', 'Next version']);\n    let isNext = false;\n    const previews = [];\n    const next = [];\n    previewsVersions.forEach(v => {\n      if (isNext) {\n        isNext = false;\n        next.push(v);\n      } else {\n        previews.push(v);\n        isNext = true;\n      }\n    });\n    previews.forEach((v, index) => {\n      t.push([v, next[index]]);\n    });\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        align: 'center',\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        leftPadding: 5,\n      }\n    );\n\n    return t;\n  }\n\n  getHistoryTable(history: DagModel[]) {\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width: [3, '50%', '50%'],\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(['', 'Date', 'Hash']);\n    console.log(history);\n    history.forEach(v => {\n      t.push(['', `${v.createdAt}`, `rxdi-deploy --find ${v.hash}`]);\n    });\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        align: 'center',\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        leftPadding: 5,\n      }\n    );\n\n    return t;\n  }\n\n  fileUploadStatus(file: IPFSFile[]) {\n    const t = new Table({\n      borderStyle: 2,\n      horizontalLine: true,\n      width: ['100%'],\n      rightPadding: 0,\n      leftPadding: 1,\n    });\n\n    t.push(['File upload status']);\n    t.push([`\\File size: ${file[0].size} bytes`]);\n    t.push([`\\IPFS address: ${this.fileIpfsService.providers.ipfsOriginal}${file[0].hash}`]);\n\n    t.attrRange(\n      { row: [0, 1] },\n      {\n        align: 'center',\n        color: 'green',\n        bg: 'black',\n      }\n    );\n\n    t.attrRange(\n      {\n        row: [1],\n        column: [1],\n      },\n      {\n        leftPadding: 5,\n      }\n    );\n\n    return t;\n  }\n}\n","import { Service, Inject } from '@rxdi/core';\nimport { FILE_DEPLOYMENT_STATUS, FILE_DEPLOYMENT_STATUS_INTERFACE } from './status-injection.tokens';\n\n@Service()\nexport class StatusService {\n  @Inject(FILE_DEPLOYMENT_STATUS)\n  private $deploymentStatus: FILE_DEPLOYMENT_STATUS;\n\n  getBuildStatus() {\n    return this.$deploymentStatus.getValue();\n  }\n\n  setBuildStatus(status: FILE_DEPLOYMENT_STATUS_INTERFACE) {\n    this.$deploymentStatus.next({\n      ...this.$deploymentStatus.getValue(),\n      ...status,\n    });\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { START, FILE_DEPLOYMENT_STATUS, FILE_DEPLOYMENT_STATUS_INTERFACE } from './status-injection.tokens';\nimport { StatusService } from './status.service';\n\n@Module({\n  services: [\n    StatusService,\n    {\n      provide: START,\n      useValue: new BehaviorSubject(true),\n    },\n    {\n      provide: FILE_DEPLOYMENT_STATUS,\n      useValue: new BehaviorSubject(<FILE_DEPLOYMENT_STATUS_INTERFACE>{\n        file: {\n          status: 'SUCCESS',\n          message: 'success',\n        },\n        typings: {\n          status: 'SUCCESS',\n          message: 'success',\n        },\n        module: {\n          status: 'SUCCESS',\n          message: 'success',\n        },\n      }),\n    },\n  ],\n})\nexport class StatusModule {}\n","import { Service, Inject } from '@rxdi/core';\nimport { Observable } from 'rxjs';\nimport { __BUILD_HISTORY_DATABASE, DagModel } from '../../../env.injection.tokens';\nimport { IHistoryType } from '../../core/api-introspection';\n\n@Service()\nexport class BuildHistoryService {\n  @Inject(__BUILD_HISTORY_DATABASE)\n  private buildHistoryDatabase: __BUILD_HISTORY_DATABASE;\n  insert(doc: DagModel): Observable<DagModel> {\n    return new Observable(o => {\n      this.buildHistoryDatabase.insert(doc, (e, d) => {\n        if (e) {\n          throw new Error('Unable to insert to database');\n        }\n        o.next(d);\n      });\n    });\n  }\n\n  find(doc: DagModel | {}): Observable<DagModel> {\n    return new Observable(o => {\n      this.buildHistoryDatabase.find(doc, (e, d) => {\n        if (e) {\n          o.error(e);\n        }\n        o.next(d);\n      });\n    });\n  }\n\n  findAll(skip: number = 0, limit: number = 100, sort = { createdAt: -1 }, where = {}): Promise<IHistoryType[]> {\n    return new Promise((resolve, reject) => {\n      this.buildHistoryDatabase\n        .find(where)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .exec((e, d: any) => {\n          if (e) {\n            reject(e);\n          }\n          resolve(\n            d\n              .map(doc => {\n                doc.createdAt = new Date(doc.createdAt).valueOf();\n                return doc;\n              })\n              .sort((a, b) => b.createdAt - a.createdAt)\n              .map(doc => {\n                doc.createdAt = new Date(doc.createdAt);\n                return doc;\n              })\n          );\n        });\n    });\n  }\n}\n","import { Service } from '@rxdi/core';\n\n@Service()\nexport class ErrorReasonService {\n  moduleIntegrityError(oldHash, newHash) {\n    console.log(`Module is with the same integrity like in the previws version ${oldHash}`);\n    console.log(`To check this version write down following command rxdi-deploy --find ${newHash}`);\n    // console.log(`Nothing is deployed!`);\n  }\n}\n","import { Service, Inject } from '@rxdi/core';\nimport { Observable } from 'rxjs';\nimport { __PREVIWS_DATABASE, PreviousModel } from '../../../env.injection.tokens';\n\n@Service()\nexport class PreviousService {\n  @Inject(__PREVIWS_DATABASE) private previwsDatabase: __PREVIWS_DATABASE;\n\n  insert(doc: PreviousModel): Observable<PreviousModel> {\n    return new Observable(o => {\n      this.previwsDatabase.insert(doc, (e, d) => {\n        if (e) {\n          throw new Error('Unable to insert to database');\n        }\n        o.next(d);\n      });\n    });\n  }\n\n  find(doc: PreviousModel): Observable<PreviousModel> {\n    return new Observable(o => {\n      this.previwsDatabase.find(doc, (e, d) => {\n        if (e) {\n          o.error(e);\n        }\n        o.next(d);\n      });\n    });\n  }\n}\n","import { FileService } from '../file/file.service';\nimport { Service, Inject } from '@rxdi/core';\nimport { __DEPLOYER_OUTPUT_CONFIG_NAME } from '../../../env.injection.tokens';\nimport { includes } from '../helpers/helpers';\n\n@Service()\nexport class PackageJsonService {\n  defaultOutputConfig: __DEPLOYER_OUTPUT_CONFIG_NAME;\n\n  constructor(\n    private fileService: FileService,\n    @Inject(__DEPLOYER_OUTPUT_CONFIG_NAME)\n    private deployerOutputConfigName: __DEPLOYER_OUTPUT_CONFIG_NAME\n  ) {}\n\n  OnInit() {\n    if (includes('--collect-packages')) {\n      this.defaultOutputConfig = 'package.json';\n    } else {\n      this.defaultOutputConfig = this.deployerOutputConfigName;\n    }\n  }\n\n  async prepareDependencies(path?: string) {\n    const file = await this.read(path);\n    if (file.dependencies) {\n      return Object.keys(file.dependencies).map(name => ({\n        name,\n        version: file.dependencies[name],\n      }));\n    }\n    return [];\n  }\n\n  async readModifyWrite(modifier: any = {}, path?: string) {\n    let file = await this.read(path);\n    file = { ...modifier, ...file };\n    return await this.write(file, path);\n  }\n\n  async read(path?: string) {\n    return JSON.parse(await this.fileService.readFile(path || `${process.cwd()}/${this.defaultOutputConfig}`));\n  }\n\n  async write(data, path?: string) {\n    return await this.fileService.writeFile(\n      path || `${process.cwd()}/${this.defaultOutputConfig}`,\n      JSON.stringify(data)\n    );\n  }\n}\n","import { Service, Inject } from '@rxdi/core';\nimport { __NAMESPACE_DB } from '../../../../env.injection.tokens';\nimport { INamespacetype } from '../../../core/api-introspection/index';\n\n@Service()\nexport class NamespaceService {\n  @Inject(__NAMESPACE_DB) private namespace: __NAMESPACE_DB;\n\n  getNamespace(name: string) {\n    return new Promise((resolve, reject) => {\n      this.namespace.find({ name }).exec((e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  getNamespaceById(_id: string) {\n    return new Promise((resolve, reject) => {\n      this.namespace.findOne({ _id }, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        console.log(d);\n        resolve(d);\n      });\n    });\n  }\n\n  searchForDuplicates(name) {\n    return new Promise((resolve, reject) => {\n      this.namespace.findOne({ name }, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  async insert(doc: { name: string }) {\n    return await new Promise((resolve, reject) => {\n      this.namespace.insert(doc, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  listNamespaces(skip: number = 0, limit: number = 100, sort = { createdAt: -1 }): Promise<INamespacetype[]> {\n    return new Promise((resolve, reject) => {\n      this.namespace\n        .find({})\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .exec((e, d: any) => {\n          if (e) {\n            reject(e);\n          }\n          resolve(d);\n        });\n    });\n  }\n}\n","import { Service } from '@rxdi/core';\n\n@Service()\nexport class TimeService {\n  calculateTime(time: string) {\n    const date = new Date(time);\n    return {\n      day: this.getDay(date),\n      month: this.getDay(date),\n      year: this.getDay(date),\n    };\n  }\n\n  getDay(date: Date): number {\n    return date.getUTCDate();\n  }\n\n  getMonth(date: Date): number {\n    return date.getUTCDate();\n  }\n\n  getYear(date: Date): number {\n    return date.getUTCFullYear();\n  }\n}\n","import { Service } from '@rxdi/core';\n\n@Service()\nexport class HtmlTemplateBuilder {\n  // createTemplateFromModule()\n}\n","export * from './file/file-user.service';\nexport * from './file/file.service';\nexport * from './ipfs-file/ipfs-file.service';\nexport * from './parcel-bundler/parcel-bundler.service';\nexport * from './arguments/arguments.service';\nexport * from './dts-generator/dts-generator.service';\nexport * from './tsconfig-generator/tsconfig-generator.service';\nexport * from './table-service/table-service';\nexport * from './build-history/build-history.service';\nexport * from './previous/previous.service';\nexport * from './error-reason/error-reason.service';\nexport * from './time/time.service';\nexport * from './package-json/package-json.service';\nexport * from './html-template-builder/html-template-builder.service';\nexport * from './helpers/helpers';\nexport * from './logger/logger.service';\n","import { Service, Inject } from '@rxdi/core';\nimport { switchMap } from 'rxjs/operators';\nimport { stat, Stats, readdir, rename, unlink, copyFile, exists } from 'fs';\nimport { includes } from '../../../services';\nimport { resolve, normalize, join } from 'path';\nimport { from } from 'rxjs';\nimport { promisify } from 'util';\nimport { __HOME_DIR } from '../../../../env.injection.tokens';\nimport { mkdirp } from '@rxdi/core/dist/services/file/dist';\n\nconst ncp = require('ncp').ncp;\nconst rimraf = require('rimraf');\n\n@Service()\nexport class FileService {\n  units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  results: string[] = [];\n  @Inject(__HOME_DIR) private homeDir: __HOME_DIR;\n  constructor() {}\n  async wholeReadDirRecursive(path: string = '.') {\n    const directory = await this.readDir(path);\n    const pathinternal = path;\n    const self = this;\n    return (await Promise.all(\n      directory.map(async file => {\n        const path = resolve(pathinternal, file);\n        const stat = await this.statAsync(path);\n        if (stat && stat.isDirectory()) {\n          if (!file.includes('node_modules')) {\n            await self.wholeReadDirRecursive.bind(this)(path);\n          } else {\n            return null;\n          }\n        } else {\n          this.results = [...this.results, path];\n        }\n      })\n    )).filter(a => !!a);\n  }\n\n  async readCurrentDirFlat(path: string = '.') {\n    return (await this.readDir(path)).map(file => resolve(path, file)).filter(a => !!a);\n  }\n\n  async listFolder(folder: string) {\n    return await new Promise((resolve, reject) => {\n      from(this.readCurrentDirFlat(folder))\n        .pipe(switchMap(res => this.map(res)))\n        .subscribe(res => resolve(res), e => reject(e));\n    });\n  }\n\n  async readDir(folder: string, limit: number = 200) {\n    return await new Promise<string[]>((resolve, reject) => {\n      readdir(folder, (err, list: string[]) => {\n        if (err) {\n          resolve([]);\n        } else {\n          let count = 0;\n          resolve(\n            list\n              .map(f => {\n                count++;\n                if (limit > count) {\n                  return f;\n                } else {\n                  return null;\n                }\n              })\n              .filter(res => !!res)\n          );\n        }\n      });\n    });\n  }\n\n  async map(res) {\n    const foldersCount = 100;\n    let counter = 0;\n    return (await Promise.all(\n      res.map(async r => {\n        counter++;\n        const mapping = {\n          path: r,\n          directory: null,\n          file: null,\n          name: null,\n          status: null,\n        };\n        const status: Stats = await this.statAsync(r);\n        const pathMapping = v => r.replace(process.cwd(), v);\n\n        if (!status.isDirectory || (status && status['prototype'] === String)) {\n          return null;\n        }\n        if (status.isDirectory()) {\n          mapping.directory = true;\n        } else {\n          mapping.file = true;\n        }\n        mapping.name = r.split('/').pop();\n        mapping.path = pathMapping('.');\n\n        if (includes('--enable-full-folder-access')) {\n          mapping.path = r;\n        }\n\n        mapping.status = status;\n        mapping.status.size = this.niceBytes(status.size);\n        if (counter === foldersCount) {\n          return null;\n        }\n        return mapping;\n      })\n    )).filter(res => !!res);\n  }\n\n  private niceBytes(x) {\n    let l = 0,\n      n = parseInt(x, 10) || 0;\n    while (n >= 1024 && ++l) n = n / 1024;\n    return n.toFixed(n >= 10 || l < 1 ? 0 : 1) + ' ' + this.units[l];\n  }\n\n  async statAsync(path: string): Promise<any> {\n    return await new Promise((resolve, reject) => {\n      stat(path, (e, stats) => {\n        if (e) {\n          resolve(e);\n        }\n        resolve(stats);\n      });\n    });\n  }\n\n  moveFile(filePath: string, newPath?: string) {\n    return from(promisify(rename)(filePath, newPath || `${this.homeDir}/.rxdi/builds`));\n  }\n\n  ensureDir(path: string) {\n    return new Promise((resolve, reject) => {\n      mkdirp(path, err => {\n        if (err) {\n          console.error(err);\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  private getFolderFromPath(path: string) {\n    return path.substring(0, path.lastIndexOf('/'));\n  }\n  async copyTransactionFiles(transactionId: string, repoFolder: string, fileName: string) {\n    const getJson = (path: string, type: 'package.json' | 'reactive.json' | string) => `${path}/${type}`;\n    const { saveFolder, originalFilePath, filePath } = this.prepareCopyData(transactionId, repoFolder, fileName);\n    await this.copyFolderRecursive(this.getFolderFromPath(originalFilePath), this.getFolderFromPath(saveFolder));\n    const reactiveJsonRepoPath = getJson(repoFolder, 'reactive.json');\n    const reactiveJsonFilePath = getJson(filePath, 'reactive.json');\n    const mainFile = normalize(getJson(repoFolder, fileName));\n    let hasConfiguration = false;\n    await this.ensureDir(this.getFolderFromPath(saveFolder));\n    if (await this.isFileExist(mainFile)) {\n      await this.copyFile(mainFile, saveFolder);\n    }\n    if (await this.isFileExist(reactiveJsonRepoPath)) {\n      await this.copyFile(reactiveJsonRepoPath, reactiveJsonFilePath);\n      hasConfiguration = true;\n    }\n\n    if (!hasConfiguration) {\n      console.error(\n        'Missing package.json or reactive.json bundle will proceed but if you depend on some modules you cannot use them since they will not be installed'\n      );\n    }\n  }\n\n  prepareCopyData(transactionId: string, repoFolder: string, fileName: string) {\n    const transactionFolder = `${this.homeDir}/.rxdi/builds/${transactionId}`;\n    const originalFilePath = normalize(`${repoFolder}/${fileName}`);\n    const saveFolder = normalize(`${transactionFolder}/${fileName}`);\n    const filename = originalFilePath.replace(/^.*[\\\\\\/]/, '');\n    const filePath = saveFolder.replace(filename, '');\n\n    return {\n      saveFolder,\n      originalFilePath,\n      transactionFolder,\n      filename,\n      filePath,\n    };\n  }\n\n  removeTransaction(transactionId: string, repoFolder: string, fileName: string) {\n    const { transactionFolder } = this.prepareCopyData(transactionId, repoFolder, fileName);\n    return from(new Promise(r => rimraf(transactionFolder, r)));\n  }\n\n  removeFile(path: string) {\n    path = normalize(path);\n    return from(promisify(unlink)(path));\n  }\n\n  copyFile(path: string, newPath: string) {\n    return promisify(copyFile)(path, newPath);\n  }\n\n  isFileExist(path: string) {\n    return promisify(exists)(path);\n  }\n\n  copyFolderRecursive(source: string, destination: string) {\n    // ncp.limit = 16;\n    return new Promise((resolve, reject) => {\n      console.log('WHY');\n      ncp(source, destination, function(err) {\n        console.log(err);\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n}\n","import { DagModel } from '../../../env.injection.tokens';\n\nexport const templateHtml = (currentModule: DagModel, link: string, containerName: string = 'container') => `\n<!DOCTYPE html>\n<div id=\"meta-rxdi-ipfs-module\" style=\"visibility:hidden;z-index:-10000;position:absolute;\">\n<!--meta-rxdi-ipfs-module-->\n${JSON.stringify(currentModule, null, 2)}\n<!--meta-rxdi-ipfs-module-->\n</div>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=no\"\n    />\n    <title>@rxdi client side example</title>\n    <meta name=\"theme-color\" content=\"#33383a\" />\n    <style>\n      body {\n        margin: 0px;\n        padding: 0px;\n        color: #f8f8f8;\n        font-family: 'Roboto', sans-serif;\n        background-color: #1c1f24;\n        overflow-y: scroll;\n      }\n      a {\n        color: cornflowerblue;\n      }\n    </style>\n    <base href=\"/\" />\n    <!-- iOS -->\n    <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"mobile-web-app-status-bar-style\" content=\"black\" />\n    <meta name=\"mobile-web-app-title\" content=\"Expenses\" />\n  </head>\n  <body>\n    <div id=\"${containerName}\"></div>\n    <script src=\"${link}\"></script>\n  </body>\n</html>\n\n`;\n","import {\n  __FOLDER,\n  __IPFS_NODE_RESOLUTION_TIME,\n  __FILE_NAME,\n  __DEPLOYER_OUTPUT_CONFIG_NAME,\n  __NAMESPACE,\n  DagModel,\n  __COMMIT_MESSAGE,\n  __FILE_EXTENSION,\n} from '../../../env.injection.tokens';\nimport { Inject, BootstrapLogger, PluginInterface, Plugin } from '@rxdi/core';\nimport { tap, switchMapTo, take, map, switchMap } from 'rxjs/operators';\nimport { interval, from, of, combineLatest, Observable } from 'rxjs';\nimport { FileUserService } from '../../services/file/file-user.service';\nimport { IPFSFile } from '@gapi/ipfs';\nimport { ParcelBundlerService } from '../../services/parcel-bundler/parcel-bundler.service';\nimport { FileIpfsService } from '../../services/ipfs-file/ipfs-file.service';\nimport { FileService as CoreFileService } from '../../services/file/file.service';\nimport { TypescriptDefinitionGeneratorService } from '../../services/dts-generator/dts-generator.service';\nimport { TsConfigGenratorService } from '../../services/tsconfig-generator/tsconfig-generator.service';\nimport { TableService } from '../../services/table-service/table-service';\nimport { BuildHistoryService } from '../../services/build-history/build-history.service';\nimport { PreviousService } from '../../services/previous/previous.service';\nimport { ErrorReasonService } from '../../services/error-reason/error-reason.service';\nimport { StatusService } from '../../status/status.service';\nimport { PackageJsonService } from '../../services/package-json/package-json.service';\nimport { includes, nextOrDefault } from '../../services/helpers/helpers';\nimport { NamespaceService } from '../../server/namespace/services/namespace.service';\nimport { FileService } from '../../server/file/services/file.service';\nimport { normalize } from 'path';\nimport { templateHtml } from './template';\n\n@Plugin()\nexport class CompilePlugin implements PluginInterface {\n  @Inject(__FILE_NAME) private fileName: __FILE_NAME;\n  @Inject(__FOLDER) private folder: __FOLDER;\n  @Inject(__IPFS_NODE_RESOLUTION_TIME)\n  private resolutionTime: __IPFS_NODE_RESOLUTION_TIME;\n  @Inject(__DEPLOYER_OUTPUT_CONFIG_NAME)\n  private outputConfigName: __DEPLOYER_OUTPUT_CONFIG_NAME;\n  @Inject(__NAMESPACE) private namespace: __NAMESPACE;\n  @Inject(__COMMIT_MESSAGE) private commitMessage: __COMMIT_MESSAGE;\n  @Inject(__FILE_EXTENSION) private extension: __FILE_EXTENSION;\n  fileNotDeployed: string = '';\n  initIpfsModule = [\n    {\n      size: 0,\n      hash: this.fileNotDeployed,\n      path: this.fileNotDeployed,\n      content: this.fileNotDeployed,\n    },\n  ];\n  constructor(\n    private parcelBundler: ParcelBundlerService,\n    private logger: BootstrapLogger,\n    private ipfsFile: FileIpfsService,\n    private fileService: CoreFileService,\n    private fileUserService: FileUserService,\n    private typingsGenerator: TypescriptDefinitionGeneratorService,\n    private tsConfigGenerator: TsConfigGenratorService,\n    private tableService: TableService,\n    private buildHistoryService: BuildHistoryService,\n    private previousService: PreviousService,\n    private namespaceService: NamespaceService,\n    private errorReasonService: ErrorReasonService,\n    private statusService: StatusService,\n    private packageJsonService: PackageJsonService,\n    private internalFileService: FileService\n  ) {}\n\n  async register() {\n    if (includes('--webui') || includes('--node-only')) {\n      return await Promise.resolve();\n    }\n    if (this.isJavascriptCompilation()) {\n      return await this.compile();\n    }\n    return await new Promise(resolve => {\n      this.writeOtherFile(`${this.folder}${this.fileName}`)\n        .pipe(\n          tap(r => this.logSuccess(r)),\n          switchMapTo(interval(1000)),\n          take(this.resolutionTime),\n          map(v => this.resolutionTime - 1 - v)\n        )\n        .subscribe(\n          counter => {\n            if (!counter) {\n              resolve(true);\n              process.exit(0);\n            }\n          },\n          e => {\n            this.logger.error(e);\n            process.exit(1);\n          }\n        );\n    });\n  }\n\n  isJavascriptCompilation() {\n    return !!['.ts', '.js', '.tsx'].filter(e => e === this.extension).length;\n  }\n\n  async compile() {\n    return this.completeBuildAndAddToIpfs(\n      this.folder,\n      this.fileName,\n      this.commitMessage,\n      this.namespace,\n      this.outputConfigName\n    )\n      .pipe(\n        tap(r => this.logSuccess(r)),\n        switchMapTo(interval(1000)),\n        take(this.resolutionTime),\n        map(v => this.resolutionTime - 1 - v)\n      )\n      .subscribe(\n        counter => {\n          if (!counter) {\n            process.exit(0);\n          }\n        },\n        e => {\n          this.logger.error(e);\n          process.exit(1);\n        }\n      );\n  }\n\n  parcelBuild(path: string, outDir = null, fileName: string) {\n    console.log(outDir);\n    return this.parcelBundler.prepareBundler(path, outDir, fileName);\n  }\n\n  async createCommitMessage(message: string = '') {\n    if (includes('--html-message')) {\n      let file: Buffer;\n      const filePath = nextOrDefault('--html-message', './index.html');\n      try {\n        file = await this.fileService.readFileRaw(filePath);\n      } catch (e) {\n        console.log(`\nError loading file ${filePath}\n                `);\n        process.exit(0);\n      }\n      return await this.ipfsFile.addRawFile(file);\n    } else {\n      if (!!message && !message.includes('--') && !message.includes('-')) {\n        return await this.ipfsFile.addFile(message);\n      } else {\n        return await Promise.resolve(this.initIpfsModule);\n      }\n    }\n  }\n\n  completeBuildAndAddToIpfs(\n    folder: string,\n    file: string,\n    message,\n    namespace: string,\n    outputConfigName: __DEPLOYER_OUTPUT_CONFIG_NAME,\n    buildFolder = './build'\n  ) {\n    let ipfsFile: IPFSFile[];\n    let ipfsModule: IPFSFile[];\n    let ipfsTypings: IPFSFile[] = this.initIpfsModule;\n    let ipfsMessage: IPFSFile[] = this.initIpfsModule;\n    const ipfsFileMetadata: IPFSFile[] = this.initIpfsModule;\n    let currentModule: DagModel;\n    let dag: DagModel;\n    this.logger.log('Bundling Started!\\n');\n    return from(this.parcelBuild(normalize(folder + '/' + file), buildFolder, `${file.split('.')[0]}.js`)).pipe(\n      tap(() => {\n        this.logger.log('Bundling finished!\\n');\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundling finished' });\n        this.logger.log(`Adding commit message ${message}...\\n`);\n      }),\n      switchMap(async () => this.createCommitMessage(message)),\n      tap(res => {\n        ipfsMessage = res;\n        this.logger.log(`Commit message added...\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Commit message added' });\n      }),\n      switchMap(() => this.fileService.readFile(`${buildFolder}/${file.split('.')[0]}.js`)),\n      tap(() => {\n        this.logger.log(`Reading bundle ${buildFolder}/${file.split('.')[0]}.js finished!\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Reading bundle finished' });\n      }),\n      switchMap((res: string) => this.ipfsFile.addFile(res)),\n      tap(res => {\n        ipfsFile = res;\n        this.logger.log(`Bundle added to ipfs ${buildFolder}/${file.split('.')[0]}.js\\n`);\n        this.logger.log(`Typescript definitions merge started!\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Typescript definitions merge starte' });\n      }),\n      switchMap(() => from(this.typingsGenerator.mergeTypings(namespace, folder, `${buildFolder}/index.d.ts`))),\n      tap(() => this.logger.log(`Typescript definitions merge finished! Reading file...\\n`)),\n      switchMap(() => this.fileService.readFile(`${buildFolder}/index.d.ts`)),\n      tap(() => this.logger.log(`Typescript definitions read finished! Adding to IPFS...\\n`)),\n      switchMap((res: string) => {\n        if (!!res) {\n          return this.ipfsFile.addFile(res);\n        } else {\n          this.statusService.setBuildStatus({\n            typings: {\n              status: 'WARNING',\n              message: 'Missing typescript definition.Typings will not be uploaded!',\n            },\n          });\n          return Promise.resolve(this.initIpfsModule);\n        }\n      }),\n      tap(res => {\n        ipfsTypings = res;\n        if (ipfsTypings[0].hash) {\n          this.logger.log(`Typescript definitions added to IPFS! Adding module configuration...\\n`);\n        }\n      }),\n      switchMap(() => this.fileService.readFilePromisifyFallback(`${folder}/${outputConfigName}`)),\n      switchMap(async (d: string) => {\n        try {\n          dag = JSON.parse(d);\n        } catch (e) {\n          throw new Error(`Cannot parse ${outputConfigName} from root directory!`);\n        }\n        currentModule = {\n          name: namespace,\n          module: ipfsFile[0].hash,\n          createdAt: new Date(),\n        };\n\n        if (ipfsTypings[0].hash) {\n          currentModule.typings = ipfsTypings[0].hash;\n        }\n\n        if (ipfsMessage[0].hash) {\n          currentModule.message = ipfsMessage[0].hash;\n        }\n\n        if (ipfsFileMetadata[0].hash) {\n          currentModule.metadata = ipfsFileMetadata[0].hash;\n        }\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundldadada' });\n\n        currentModule.previous = [...(dag.previous || [])];\n        let f: {\n          dependencies?: string[];\n          ipfs?: { provider: string; dependencies: string[] }[];\n        } = { ipfs: [] };\n        if (await this.internalFileService.statAsync(`${folder}/${outputConfigName}`)) {\n          this.logger.log(`Reactive file present ${outputConfigName} package dependencies will be taken from it`);\n          try {\n            f = JSON.parse(await this.fileService.readFile(`${folder}/${outputConfigName}`));\n          } catch (e) {\n            throw new Error(`Cannot parce reactive file at ${folder}/${outputConfigName}`);\n          }\n          if (f.dependencies) {\n            currentModule.dependencies = f.dependencies;\n          }\n          const dependencies: string[] = [];\n          if (f.ipfs && f.ipfs.length) {\n            f.ipfs.forEach(p => p.dependencies.forEach(d => dependencies.push(d)));\n            if (dependencies.length) {\n              currentModule.dependencies = dependencies;\n            }\n          }\n        }\n        this.logger.log(`Current module before deploy ${JSON.stringify(currentModule)}`);\n        if (includes('--collect-packages')) {\n          const packages = await this.packageJsonService.prepareDependencies(`${folder}/package.json`);\n          if (packages.length) {\n            currentModule.packages = packages;\n          }\n        }\n        let htmlFile: string;\n        if (includes('--html')) {\n          await this.parcelBundler.prepareBundler(nextOrDefault('--html', ''), 'index');\n          htmlFile = await this.fileService.readFile(nextOrDefault('--html', ''));\n        }\n        ipfsModule = await this.ipfsFile.addFile(\n          `\n          ${templateHtml(\n            currentModule,\n            nextOrDefault(\n              '--customComponent',\n              'https://gitcdn.xyz/repo/rxdi/ui-registry/master/my-project/module-view/build/module-view.js'\n            )\n          )}\n          ${htmlFile ? htmlFile : ''}\n          `,\n          { path: `${namespace}/index.html` }\n        );\n        console.log(ipfsModule);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Module added to ipfs' });\n\n        if (currentModule.previous.length >= 20) {\n          currentModule.previous.shift();\n        }\n        currentModule.previous = [...currentModule.previous, ipfsModule[1].hash];\n        if (f.ipfs) {\n          currentModule.ipfs = f.ipfs;\n        }\n        await this.fileUserService.writeDag(`${folder}/${outputConfigName}`, JSON.stringify(currentModule, null, 2));\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Dag written' });\n        // this.integrityCheck(dag, ipfsFile, ipfsTypings);\n        return ipfsModule;\n      }),\n      tap(() => this.logger.log(`Module configuration added to ipfs!\\n`)),\n      switchMap(async () => {\n        let nmspc = await this.namespaceService.searchForDuplicates(namespace);\n        if (!nmspc) {\n          nmspc = await this.namespaceService.insert({\n            name: namespace,\n          });\n        }\n        return nmspc;\n      }),\n      switchMap(nmspc =>\n        combineLatest([\n          this.buildHistoryService.insert(<DagModel>{\n            status: {\n              file: this.statusService.getBuildStatus().file,\n              typings: this.statusService.getBuildStatus().typings,\n              module: this.statusService.getBuildStatus().module,\n            },\n            hash: ipfsModule[1].hash,\n            name: namespace,\n            typings: ipfsTypings[0].hash,\n            module: ipfsFile[0].hash,\n            metadata: ipfsFileMetadata[0].hash,\n            message: ipfsMessage[0].hash,\n            namespaceId: nmspc['_id'],\n          }),\n          this.previousService.insert({\n            name: namespace,\n            hash: ipfsModule[1].hash,\n          }),\n        ])\n      ),\n      map(() => ({\n        file: ipfsFile,\n        typings: ipfsTypings,\n        module: ipfsModule,\n      })),\n      tap(async () => {\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Module saved to persisten history!' });\n\n        this.logger.log('Module saved to persistant history!');\n        if (!ipfsModule) {\n          this.fileNotAddedToIpfs(ipfsModule);\n        }\n        console.log('' + this.tableService.previewsVersions(currentModule.previous));\n        console.log('' + this.tableService.previewsNext(currentModule.previous));\n        console.log('' + this.tableService.endInstallCommand(ipfsModule[1].hash));\n        console.log('' + this.tableService.createTable(ipfsFile, ipfsTypings, ipfsModule));\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundle finished' });\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: `Ipfs file can be found at ${ipfsModule[1].hash}` });\n        const returnItemByIndex = (i: number) => currentModule.previous[currentModule.previous.length - i];\n        await this.showError(returnItemByIndex(2), returnItemByIndex(1));\n      })\n    );\n  }\n\n  fileNotAddedToIpfs(file: IPFSFile[]) {\n    console.log(`File not added to ipfs for ${JSON.stringify(file)}`);\n    console.log(`More info can be found executing command: rxdi-deploy --find ${file[0].hash}`);\n  }\n\n  integrityCheck(dag: DagModel, file: IPFSFile[], typings: IPFSFile[]) {\n    const genericIntegrityError = 'Integrity is same like in the previews version!';\n    console.log(dag.module, file[0].hash);\n    if (dag.module === file[0].hash) {\n      this.logger.log(`\n        !! Warning !!\n        Module is with the same integrity and will not be uploaded again!\n        You need to make change to the module so it will be with different integrity!\n            `);\n      this.statusService.setBuildStatus({\n        file: {\n          status: 'WARNING',\n          message: genericIntegrityError,\n        },\n        module: {\n          status: 'WARNING',\n          message: genericIntegrityError,\n        },\n      });\n    }\n\n    if (dag.typings === typings[0].hash) {\n      this.logger.log(`\n        !! Warning !!\n        Typings are with the same integrity and will not be uploaded again!\n        You need to make change to the module so it will be with different integrity!\n            `);\n      this.statusService.setBuildStatus({\n        typings: {\n          status: 'WARNING',\n          message: genericIntegrityError,\n        },\n      });\n    }\n  }\n\n  async showError(oldHash, newHash: string) {\n    return await new Promise(resolve => {\n      if (\n        Object.keys(this.statusService.getBuildStatus()).filter(\n          k => this.statusService.getBuildStatus()[k].status !== 'SUCCESS'\n        ).length\n      ) {\n        this.errorReasonService.moduleIntegrityError(oldHash, newHash);\n      }\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    });\n  }\n\n  writeOtherFile(file) {\n    return from(this.fileService.readFileRaw(file)).pipe(\n      switchMap(content => this.ipfsFile.addRawFile(content)),\n      tap(c => {\n        console.log('' + this.tableService.fileUploadStatus(c));\n      })\n    );\n  }\n  logSuccess(res) {\n    // this.logger.log(`Success deploying module! Package added to IPFS: ${JSON.stringify(res, null, 4)}`);\n    console.log(`Deploy finish ipfs node will shutdown in: ${this.resolutionTime} seconds`);\n  }\n\n  completeBuildAndAddToIpfs2(namespace: string = '@gapi/core') {\n    const fileName = 'index';\n    let ipfsFile: IPFSFile[];\n    return from(\n      this.fileUserService.writeFile(\n        `\nimport { Service } from '@rxdi/core';\n\n@Service()\nexport class Pesho {\n    constructor() {\n        console.log('THIS IS PESHO SERVICE');\n    }\n}\n\n        `,\n        fileName + '.ts',\n        namespace\n      )\n    ).pipe(\n      switchMap(() =>\n        from(this.fileUserService.writeFile(this.tsConfigGenerator.getTsConfig(fileName), 'tsconfig.json', namespace))\n      ),\n      switchMap(() => from(this.parcelBundler.prepareBundler(`./build/${namespace}/${fileName}.ts`))),\n      switchMap(() => this.fileService.readFile(`./build/${fileName}.js`)),\n      switchMap((res: string) => this.ipfsFile.addFile(res)),\n      tap(res => (ipfsFile = res)),\n      switchMap(() =>\n        from(this.typingsGenerator.mergeTypings(namespace, `./build/${namespace}`, './build/index.d.ts'))\n      ),\n      switchMap(() => of(ipfsFile))\n    );\n  }\n\n  pushTransaction(\n    folder: string,\n    file: string,\n    message,\n    namespace: string,\n    outputConfigName: __DEPLOYER_OUTPUT_CONFIG_NAME,\n    buildFolder = './build'\n  ) {\n    let ipfsFile: IPFSFile[];\n    let ipfsModule: IPFSFile[];\n    let ipfsTypings: IPFSFile[] = this.initIpfsModule;\n    let ipfsMessage: IPFSFile[] = this.initIpfsModule;\n    const ipfsFileMetadata: IPFSFile[] = this.initIpfsModule;\n    let currentModule: DagModel;\n    let dag: DagModel;\n    this.logger.log('Bundling Started!\\n');\n\n    const filePathFromRepo = file;\n    if (file[0] === '.') {\n      file = file.substr(1);\n    }\n    console.log(file);\n    file = file.replace(/^.*[\\\\\\/]/, '');\n    console.log(file);\n    return from(\n      this.parcelBuild(\n        normalize(folder + '/' + filePathFromRepo),\n        `${folder}/${buildFolder}`,\n        `${file.split('.')[0]}.js`\n      )\n    ).pipe(\n      tap(() => {\n        this.logger.log('Bundling finished!\\n');\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundling finished' });\n        this.logger.log(`Adding commit message ${message}...\\n`);\n      }),\n      switchMap(async () => this.createCommitMessage(message)),\n      tap(res => {\n        ipfsMessage = res;\n        this.logger.log(`Commit message added...\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Commit message added' });\n      }),\n      switchMap(() => this.fileService.readFile(`${folder}/${buildFolder}/${file.split('.')[0]}.js`)),\n      tap(() => {\n        this.logger.log(`Reading bundle ${folder}/${buildFolder}/${file.split('.')[0]}.js finished!\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Reading bundle finished' });\n      }),\n      switchMap((res: string) => this.ipfsFile.addFile(res)),\n      tap(res => {\n        ipfsFile = res;\n        this.logger.log(`Bundle added to ipfs ${folder}/${buildFolder}/${file.split('.')[0]}.js\\n`);\n        this.logger.log(`Typescript definitions merge started!\\n`);\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Typescript definitions merge starte' });\n      }),\n      switchMap(() =>\n        from(\n          this.typingsGenerator.mergeTypings(\n            namespace,\n            normalize(folder + filePathFromRepo.substring(0, filePathFromRepo.lastIndexOf('/')).replace('.', '')),\n            normalize(`${folder}/${buildFolder}/index.d.ts`)\n          )\n        )\n      ),\n      tap(() => this.logger.log(`Typescript definitions merge finished! Reading file...\\n`)),\n      switchMap(() => this.fileService.readFile(`${folder}/${buildFolder}/index.d.ts`)),\n      tap(() => this.logger.log(`Typescript definitions read finished! Adding to IPFS...\\n`)),\n      switchMap((res: string) => {\n        if (!!res) {\n          return this.ipfsFile.addFile(res);\n        } else {\n          this.statusService.setBuildStatus({\n            typings: {\n              status: 'WARNING',\n              message: 'Missing typescript definition.Typings will not be uploaded!',\n            },\n          });\n          return Promise.resolve(this.initIpfsModule);\n        }\n      }),\n      tap(res => {\n        ipfsTypings = res;\n        if (ipfsTypings[0].hash) {\n          this.logger.log(`Typescript definitions added to IPFS! Adding module configuration...\\n`);\n        }\n      }),\n      switchMap(() => this.fileService.readFilePromisifyFallback(`${folder}/${outputConfigName}`)),\n      switchMap(async (d: string) => {\n        try {\n          dag = JSON.parse(d);\n        } catch (e) {\n          throw new Error(`Cannot parse ${outputConfigName} from root directory!`);\n        }\n        currentModule = {\n          name: namespace,\n          module: ipfsFile[0].hash,\n          createdAt: new Date(),\n        };\n\n        if (ipfsTypings[0].hash) {\n          currentModule.typings = ipfsTypings[0].hash;\n        }\n\n        if (ipfsMessage[0].hash) {\n          currentModule.message = ipfsMessage[0].hash;\n        }\n\n        if (ipfsFileMetadata[0].hash) {\n          currentModule.metadata = ipfsFileMetadata[0].hash;\n        }\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundldadada' });\n\n        currentModule.previous = [...(dag.previous || [])];\n        let f: {\n          dependencies?: string[];\n          ipfs?: { provider: string; dependencies: string[] }[];\n        } = { ipfs: [] };\n        if (await this.internalFileService.statAsync(`${folder}/${outputConfigName}`)) {\n          this.logger.log(`Reactive file present ${outputConfigName} package dependencies will be taken from it`);\n          try {\n            f = JSON.parse(await this.fileService.readFile(`${folder}/${outputConfigName}`));\n          } catch (e) {\n            throw new Error(`Cannot parce reactive file at ${folder}/${outputConfigName}`);\n          }\n          if (f.dependencies) {\n            currentModule.dependencies = f.dependencies;\n          }\n          const dependencies: string[] = [];\n          if (f.ipfs && f.ipfs.length) {\n            f.ipfs.forEach(p => p.dependencies.forEach(d => dependencies.push(d)));\n            if (dependencies.length) {\n              currentModule.dependencies = dependencies;\n            }\n          }\n        }\n        this.logger.log(`Current module before deploy ${JSON.stringify(currentModule)}`);\n        if (includes('--collect-packages')) {\n          const packages = await this.packageJsonService.prepareDependencies(`${folder}/package.json`);\n          if (packages.length) {\n            currentModule.packages = packages;\n          }\n        }\n\n        let htmlFile: string;\n        if (includes('--html')) {\n          await this.parcelBundler.prepareBundler(nextOrDefault('--html', ''), 'index');\n          htmlFile = await this.fileService.readFile(nextOrDefault('--html', ''));\n        }\n        ipfsModule = await this.ipfsFile.addFile(\n          `\n          ${templateHtml(\n            currentModule,\n            nextOrDefault(\n              '--customComponent',\n              'https://gitcdn.xyz/repo/rxdi/ui-registry/master/my-project/module-view/build/module-view.js'\n            )\n          )}\n          ${htmlFile ? htmlFile : ''}\n          `,\n          { path: `${namespace}/index.html` }\n        );\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Module added to ipfs' });\n\n        if (currentModule.previous.length >= 20) {\n          currentModule.previous.shift();\n        }\n        currentModule.previous = [...currentModule.previous, ipfsModule[0].hash];\n        if (f.ipfs) {\n          currentModule.ipfs = f.ipfs;\n        }\n        await this.fileUserService.writeDag(`${folder}/${outputConfigName}`, JSON.stringify(currentModule, null, 2));\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Dag written' });\n        // this.integrityCheck(dag, ipfsFile, ipfsTypings);\n        return ipfsModule;\n      }),\n      tap(() => this.logger.log(`Module configuration added to ipfs!\\n`)),\n      switchMap(async () => {\n        let nmspc = await this.namespaceService.searchForDuplicates(namespace);\n        if (!nmspc) {\n          nmspc = await this.namespaceService.insert({\n            name: namespace,\n          });\n        }\n        return nmspc;\n      }),\n      switchMap(nmspc =>\n        combineLatest([\n          this.buildHistoryService.insert(<DagModel>{\n            status: {\n              file: this.statusService.getBuildStatus().file,\n              typings: this.statusService.getBuildStatus().typings,\n              module: this.statusService.getBuildStatus().module,\n            },\n            hash: ipfsModule[0].hash,\n            name: namespace,\n            typings: ipfsTypings[0].hash,\n            module: ipfsFile[0].hash,\n            metadata: ipfsFileMetadata[0].hash,\n            message: ipfsMessage[0].hash,\n            namespaceId: nmspc['_id'],\n          }),\n          this.previousService.insert({\n            name: namespace,\n            hash: ipfsModule[0].hash,\n          }),\n        ])\n      ),\n      map(() => ({\n        file: ipfsFile,\n        typings: ipfsTypings,\n        module: ipfsModule,\n      })),\n      tap(async () => {\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Module saved to persisten history!' });\n\n        this.logger.log('Module saved to persistant history!');\n        if (!ipfsModule) {\n          this.fileNotAddedToIpfs(ipfsModule);\n        }\n        console.log('' + this.tableService.previewsVersions(currentModule.previous));\n        console.log('' + this.tableService.previewsNext(currentModule.previous));\n        console.log('' + this.tableService.endInstallCommand(ipfsModule[0].hash));\n        console.log('' + this.tableService.createTable(ipfsFile, ipfsTypings, ipfsModule));\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: 'Bundle finished' });\n        // this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: `Ipfs file can be found at ${ipfsModule[0].hash}` });\n        const returnItemByIndex = (i: number) => currentModule.previous[currentModule.previous.length - i];\n        await this.showError(returnItemByIndex(2), returnItemByIndex(1));\n      })\n    );\n  }\n}\n","import { HAPI_SERVER } from '@rxdi/hapi';\nimport { Inject, Service, OnInit } from '@rxdi/core';\nimport { Server } from 'hapi';\nimport { __ROOT_FOLDER } from '../../../env.injection.tokens';\nimport { includes } from '../../services';\n\n@Service()\nexport class WebUiService implements OnInit {\n  constructor(@Inject(HAPI_SERVER) private server: Server, @Inject(__ROOT_FOLDER) private root_folder: __ROOT_FOLDER) {}\n\n  OnInit() {\n    includes('--webui') ? this.register() : null;\n  }\n\n  async register() {\n    this.server.route({\n      method: 'GET',\n      path: '/webui/{param*}',\n      handler: {\n        directory: {\n          path: `${this.root_folder}/webui`,\n          listing: true,\n          index: ['index.html'],\n        },\n      },\n    });\n  }\n}\n","import { PluginInterface, Inject, ExitHandlerService, AfterStarterService, Service } from '@rxdi/core';\nimport { createServer, Server, IncomingMessage, ServerResponse } from 'http';\nimport { Server as HapiServer } from 'hapi';\nimport { HAPI_SERVER, OpenService } from '@rxdi/hapi';\nimport { Subject, Observable, timer } from 'rxjs';\nimport { tap, filter, take, switchMapTo } from 'rxjs/operators';\nimport { includes, nextOrDefault } from '../../services';\n\n@Service()\nexport class ServerPushService implements PluginInterface {\n  serverWatcher: Server;\n  connected: boolean;\n  sendToClient: Subject<any> = new Subject();\n  sendTime: Subject<boolean> = new Subject();\n  clientConnected: Subject<boolean> = new Subject();\n\n  constructor(\n    @Inject(HAPI_SERVER) private server: HapiServer,\n    private exitHandler: ExitHandlerService,\n    private afterStarterService: AfterStarterService,\n    private openService: OpenService\n  ) {\n    this.exitHandler.errorHandler.subscribe(async e => await this.stopServerWatcher());\n\n    // this.server.events.on('response',\n    //     (request) => this.sendToClient.next({ query: request.payload, response: request.response['source'] })\n    // );\n    const interval = nextOrDefault('--server-push-interval', 1000 * 7, a => Number(a * 1000));\n    timer(0, interval)\n      .pipe(tap(() => this.sendTime.next(true)))\n      .subscribe();\n\n    this.afterStarterService.appStarted\n      .pipe(\n        switchMapTo(this.waitXSeconds(5)),\n        take(1),\n        filter(() => !this.connected),\n        filter(() => includes('--open-browser')),\n        tap(() => this.openService.openPage(`http://${this.server.info.address}:${this.server.info.port}/webui`))\n      )\n      .subscribe();\n  }\n\n  waitXSeconds(sec): Observable<any> {\n    return Observable.create(o => {\n      const timeout = setTimeout(() => o.next(true), sec * 1000);\n      return () => clearTimeout(timeout);\n    });\n  }\n\n  OnInit() {\n    this.register();\n  }\n\n  async register() {\n    if (includes('--webui-server-watcher') || includes('--webui')) {\n      this.createServerWatcher();\n    }\n  }\n\n  async stopServerWatcher() {\n    return await new Promise(resolve => this.serverWatcher.close(() => resolve()));\n  }\n\n  private createServerWatcher() {\n    this.serverWatcher = createServer(this.OnRequest.bind(this));\n    this.serverWatcher.listen(nextOrDefault('--webui-server-watcher-port', 8957));\n  }\n\n  OnRequest(req: IncomingMessage, res: ServerResponse) {\n    if (req.url === '/status') {\n      if (!this.connected) {\n        this.clientConnected.next(true);\n        res.write('data: ' + JSON.stringify({ response: { init: true } }) + '\\n\\n');\n      }\n      this.connected = true;\n\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'no-cache',\n        Connection: 'keep-alive',\n      });\n\n      this.sendToClient.subscribe(data => res.write('data: ' + JSON.stringify(data) + '\\n\\n'));\n\n      this.sendTime.subscribe(data =>\n        res.write('data: ' + JSON.stringify({ time: new Date().toLocaleTimeString() }) + '\\n\\n')\n      );\n\n      this.sendTime.subscribe(data =>\n        res.write(\n          'data: ' +\n            JSON.stringify({\n              config: { graphql: {}, hapi: this.server.info },\n            }) +\n            '\\n\\n'\n        )\n      );\n      req.on('end', () => {\n        this.connected = false;\n        req.destroy();\n      });\n      return;\n    }\n    res.statusCode = 400;\n    return res.end();\n  }\n}\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\n\nexport const UserType = new GraphQLObjectType({\n  name: 'UserType',\n  fields: {\n    message: {\n      type: GraphQLString,\n    },\n  },\n});\n","import { Controller } from '@rxdi/core';\nimport { Type, Query, Subscription, Subscribe, PubSubService } from '@gapi/core';\nimport { GraphQLString } from 'graphql';\nimport { UserType } from './types/user.type';\n\n@Controller()\nexport class UserQueriesController {\n  constructor(private pubsub: PubSubService) {}\n\n  @Type(UserType)\n  @Query({\n    message: {\n      type: GraphQLString,\n    },\n  })\n  async findUser(root, { message }) {\n    return {\n      message,\n    };\n  }\n\n  @Type(UserType)\n  @Subscribe((self: UserQueriesController) => self.pubsub.asyncIterator('CREATE_SIGNAL_BASIC'))\n  @Subscription()\n  subscribeToUserMessagesBasic({ message }: { message: string }) {\n    return { message };\n  }\n}\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\n\nexport const BuildStatus = new GraphQLObjectType({\n  name: 'BuildStatus',\n  fields: {\n    status: {\n      type: GraphQLString,\n    },\n    message: {\n      type: GraphQLString,\n    },\n  },\n});\nexport const BuildStatusType = new GraphQLObjectType({\n  name: 'BuildStatusType',\n  fields: {\n    file: {\n      type: BuildStatus,\n    },\n    typings: {\n      type: BuildStatus,\n    },\n    module: {\n      type: BuildStatus,\n    },\n  },\n});\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\nimport { BuildStatusType } from '../../build/types/built-status.type';\n// import { HistoryPackageType } from \"./history-package.type\";\n// import { HistoryIpfsType } from \"./history-ipfs.type\";\n\nexport const HistoryType = new GraphQLObjectType({\n  name: 'HistoryType',\n  fields: {\n    _id: {\n      type: GraphQLString,\n    },\n    name: {\n      type: GraphQLString,\n    },\n    typings: {\n      type: GraphQLString,\n    },\n    module: {\n      type: GraphQLString,\n    },\n    metadata: {\n      type: GraphQLString,\n    },\n    message: {\n      type: GraphQLString,\n    },\n    hash: {\n      type: GraphQLString,\n    },\n    status: {\n      type: BuildStatusType,\n    },\n    namespaceId: {\n      type: GraphQLString,\n    },\n    createdAt: {\n      type: GraphQLString,\n    },\n    updatedAt: {\n      type: GraphQLString,\n    },\n    // previews: {\n    //     type: new GraphQLList(GraphQLString)\n    // },\n    // dependencies: {\n    //     type: new GraphQLList(GraphQLString)\n    // },\n    // packages: {\n    //     type: new GraphQLList(HistoryPackageType)\n    // },\n    // ipfs: {\n    //     type: new GraphQLList(HistoryIpfsType)\n    // },\n  },\n});\n","import { Controller, Subscription, Subscribe, Type, PubSubService } from '@gapi/core';\nimport { HistoryType } from './types/history.type';\n\n@Controller()\nexport class HistorySubscriptionController {\n  constructor(private pubsub: PubSubService) {}\n\n  @Type(HistoryType)\n  @Subscribe((self: HistorySubscriptionController) => self.pubsub.asyncIterator('LISTEN_FOR_BUILDS'))\n  @Subscription()\n  listenForNewBuilds(payload) {\n    return { payload };\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { HistorySubscriptionController } from './history-subscription.controller';\n\n@Module({\n  controllers: [HistorySubscriptionController],\n})\nexport class HistoryModule {}\n","import { Service } from '@rxdi/core';\nimport { CompilePlugin } from '../../plugins/compile/compile.plugin';\nimport { Observable } from 'rxjs';\n\n@Service()\nexport class CompileService {\n  constructor(private compilePlugin: CompilePlugin) {}\n\n  buildFile(\n    folder: string = './packages/',\n    file: string = 'index.ts',\n    message: string = 'bla bla',\n    namespace: string = '@pesho',\n    buildFolder\n  ): Observable<{ status: string; typings: string; module: string }> {\n    return this.compilePlugin.completeBuildAndAddToIpfs(\n      folder,\n      file,\n      message,\n      namespace,\n      'reactive.json',\n      buildFolder\n    ) as any;\n  }\n\n  pushTransaction(\n    folder: string = './packages/',\n    file: string = 'index.ts',\n    message: string = 'bla bla',\n    namespace: string = '@pesho',\n    buildFolder\n  ) {\n    return this.compilePlugin.pushTransaction(folder, file, message, namespace, 'reactive.json', buildFolder);\n  }\n}\n","import { GraphQLObjectType, GraphQLString, GraphQLList } from 'graphql';\nimport { HistoryType } from '../../history/types/history.type';\nimport { Container } from '@rxdi/core';\nimport { BuildHistoryService } from '../../../services';\n\nexport const NamespaceType = new GraphQLObjectType({\n  name: 'Namespacetype',\n  fields: {\n    _id: {\n      type: GraphQLString,\n    },\n    name: {\n      type: GraphQLString,\n    },\n    builds: {\n      type: new GraphQLList(HistoryType),\n      resolve: async root => {\n        const buildHistoryService = Container.get(BuildHistoryService);\n        return await buildHistoryService.findAll(0, 100, null, {\n          namespaceId: root._id,\n        });\n      },\n    },\n  },\n});\n","import { GraphQLObjectType, GraphQLList, GraphQLInt } from 'graphql';\nimport { NamespaceType } from './namespace.type';\n\nexport const NamespaceListType = new GraphQLObjectType({\n  name: 'NamespaceListType',\n  fields: {\n    count: {\n      type: GraphQLInt,\n    },\n    rows: {\n      type: new GraphQLList(NamespaceType),\n    },\n  },\n});\n","import { Query, Controller, Type, GraphQLString, GraphQLInt, Mutation } from '@gapi/core';\nimport { NamespaceType } from './types/namespace.type';\nimport { NamespaceService } from './services/namespace.service';\nimport { NamespaceListType } from './types/namespace-list.type';\nimport { INamespaceListType } from '../../core/api-introspection';\n\n@Controller()\nexport class NamespaceController {\n  constructor(private namespaceService: NamespaceService) {}\n\n  @Type(NamespaceType)\n  @Query({\n    id: {\n      type: GraphQLString,\n    },\n  })\n  getNamespace(root, { id }) {\n    return this.namespaceService.getNamespaceById(id);\n  }\n\n  @Type(NamespaceType)\n  @Mutation({\n    name: {\n      type: GraphQLString,\n    },\n  })\n  async insertNamespace(root, { name }) {\n    const namespace = await this.namespaceService.searchForDuplicates(name);\n    if (namespace) {\n      throw new Error('Namespace already exists!');\n    }\n    return await this.namespaceService.insert({ name });\n  }\n\n  @Type(NamespaceListType)\n  @Query({\n    skip: {\n      type: GraphQLInt,\n    },\n    limit: {\n      type: GraphQLInt,\n    },\n  })\n  async listNamespaces(root, { skip, limit }): Promise<INamespaceListType> {\n    const namespaces = await this.namespaceService.listNamespaces(skip, limit);\n    return {\n      count: namespaces.length,\n      rows: namespaces,\n    };\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { NamespaceController } from './namespace.controller';\nimport { NamespaceService } from './services/namespace.service';\n\n@Module({\n  controllers: [NamespaceController],\n  services: [NamespaceService],\n})\nexport class NamespaceModule {}\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\n\nexport const BuildMetaInfo = new GraphQLObjectType({\n  name: 'BuildMetaInfo',\n  fields: () => ({\n    path: {\n      type: GraphQLString,\n    },\n    hash: {\n      type: GraphQLString,\n    },\n  }),\n});\n","import { GraphQLObjectType, GraphQLString, GraphQLList } from 'graphql';\nimport { BuildMetaInfo } from './build-meta-info.type';\n\nexport const BuildType = new GraphQLObjectType({\n  name: 'BuildType',\n  fields: {\n    file: {\n      type: new GraphQLList(BuildMetaInfo),\n    },\n    typings: {\n      type: new GraphQLList(BuildMetaInfo),\n    },\n    module: {\n      type: new GraphQLList(BuildMetaInfo),\n    },\n    status: {\n      type: GraphQLString,\n    },\n  },\n});\n","import { GraphQLObjectType, GraphQLList, GraphQLInt } from 'graphql';\nimport { HistoryType } from './history.type';\n\nexport const HistoryListType = new GraphQLObjectType({\n  name: 'HistoryListType',\n  fields: {\n    count: {\n      type: GraphQLInt,\n    },\n    rows: {\n      type: new GraphQLList(HistoryType),\n    },\n  },\n});\n","import { GraphQLString, GraphQLObjectType } from '@gapi/core';\n\nexport const ProcessStdOutType = new GraphQLObjectType({\n  name: 'ProcessStdOutType',\n  fields: {\n    stdout: {\n      type: GraphQLString,\n    },\n  },\n});\n","import {\n  Type,\n  Controller,\n  Mutation,\n  GraphQLString,\n  GraphQLNonNull,\n  Query,\n  GraphQLInt,\n  GraphQLInputObjectType,\n  Subscribe,\n  Subscription,\n  PubSubService,\n} from '@gapi/core';\nimport { BuildType } from './types/build.type';\nimport { CompileService } from '../services/compile.service';\nimport { IHistoryListType } from '../../core/api-introspection';\nimport { BuildHistoryService, FileService, TsConfigGenratorService, LoggerService } from '../../services';\nimport { HistoryListType } from '../history/types/history-list.type';\nimport { BuildStatusType } from './types/built-status.type';\nimport { ProcessStdOutType } from './types/process.type';\nimport { createWriteStream } from 'fs';\nimport { format } from 'util';\nimport { Subscription as rxjsSubscription } from 'rxjs';\n\n@Controller()\nexport class BuildController {\n  constructor(\n    private compileService: CompileService,\n    private buildHistoryService: BuildHistoryService,\n    private pubsub: PubSubService,\n    private fileService: FileService,\n    private tsGenerator: TsConfigGenratorService,\n    private loggerService: LoggerService\n  ) {}\n\n  @Type(BuildType)\n  @Mutation({\n    folder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    file: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    message: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    namespace: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    buildFolder: {\n      type: GraphQLString,\n    },\n  })\n  async triggerBuild(root, { folder, file, message, namespace, buildFolder }) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.fileService.writeFile(\n          folder + '/tsconfig.json',\n          this.tsGenerator.getTsConfig(file.replace('.ts', ''))\n        );\n        const log_file = createWriteStream(`${folder}/${file}.log`, {\n          flags: 'w',\n        });\n        const subscription = this.loggerService.stdout.subscribe(log => {\n          log_file.write(format(log) + '\\n');\n          this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: format(log) });\n        });\n        let sub: rxjsSubscription;\n        const cancelSubscription = () => {\n          subscription.unsubscribe();\n          log_file.close();\n          sub.unsubscribe();\n        };\n        sub = this.compileService.buildFile(folder, file, message, namespace, buildFolder).subscribe(\n          data => {\n            resolve({\n              status: 'Finish',\n              ...data,\n            });\n            cancelSubscription();\n          },\n          e => {\n            cancelSubscription();\n            reject(e || 'Build failed');\n          }\n        );\n      } catch (e) {\n        reject(e || 'Build failed');\n      }\n    });\n  }\n\n  @Type(HistoryListType)\n  @Query({\n    skip: {\n      type: GraphQLInt,\n    },\n    limit: {\n      type: GraphQLInt,\n    },\n    where: {\n      type: new GraphQLInputObjectType({\n        name: 'BuildWhereType',\n        fields: {\n          namespaceId: {\n            type: GraphQLString,\n          },\n          name: {\n            type: GraphQLString,\n          },\n        },\n      }),\n    },\n  })\n  async getBuildHistory(root, { skip, limit, where }): Promise<IHistoryListType> {\n    const items = await this.buildHistoryService.findAll(skip, limit, null, where);\n    return {\n      count: items.length,\n      rows: items,\n    };\n  }\n\n  @Type(BuildStatusType)\n  @Subscribe((self: BuildController) => self.pubsub.asyncIterator('LISTEN_FOR_BUILDS'))\n  @Subscription()\n  buildStatus(payload) {\n    return { payload };\n  }\n\n  @Type(ProcessStdOutType)\n  @Subscribe((self: BuildController) => self.pubsub.asyncIterator('PROCESS_STDOUT'))\n  @Subscription()\n  processStdOut(payload) {\n    return { payload };\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { BuildController } from './build.controller';\n\n@Module({\n  controllers: [BuildController],\n})\nexport class BuildModule {}\n","import { GraphQLString, GraphQLInt } from 'graphql';\n\nexport const FileArguments = {\n  size: {\n    type: GraphQLString,\n  },\n  birthtime: {\n    type: GraphQLString,\n  },\n  ctime: {\n    type: GraphQLString,\n  },\n  mtime: {\n    type: GraphQLString,\n  },\n  atime: {\n    type: GraphQLString,\n  },\n  birthtimeMs: {\n    type: GraphQLString,\n  },\n  ctimeMs: {\n    type: GraphQLString,\n  },\n  mtimeMs: {\n    type: GraphQLString,\n  },\n  atimeMs: {\n    type: GraphQLString,\n  },\n  blocks: {\n    type: GraphQLInt,\n  },\n  ino: {\n    type: GraphQLInt,\n  },\n  blksize: {\n    type: GraphQLInt,\n  },\n  rdev: {\n    type: GraphQLInt,\n  },\n  gid: {\n    type: GraphQLInt,\n  },\n  uid: {\n    type: GraphQLInt,\n  },\n  nlink: {\n    type: GraphQLInt,\n  },\n  mode: {\n    type: GraphQLInt,\n  },\n  dev: {\n    type: GraphQLInt,\n  },\n};\n","import { GraphQLObjectType } from '@gapi/core';\nimport { FileArguments } from './file.arguments';\n\nexport const FileStatusType = new GraphQLObjectType({\n  name: 'FileStatusType',\n  fields: FileArguments,\n});\n","import { GraphQLObjectType, GraphQLString, GraphQLBoolean } from 'graphql';\nimport { FileStatusType } from './file-status.type';\n\nexport const FolderStructureType = new GraphQLObjectType({\n  name: 'FolderStructureType',\n  fields: {\n    path: {\n      type: GraphQLString,\n    },\n    directory: {\n      type: GraphQLBoolean,\n    },\n    file: {\n      type: GraphQLBoolean,\n    },\n    name: {\n      type: GraphQLString,\n    },\n    status: {\n      type: FileStatusType,\n    },\n  },\n});\n","import { GraphQLObjectType, GraphQLList } from 'graphql';\nimport { FolderStructureType } from './folder-structure.type';\n\nexport const FileType = new GraphQLObjectType({\n  name: 'FileType',\n  fields: {\n    paths: {\n      type: new GraphQLList(FolderStructureType),\n    },\n  },\n});\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\n\nexport const FileRawType = new GraphQLObjectType({\n  name: 'FileRawType',\n  fields: {\n    package: {\n      type: GraphQLString,\n    },\n    file: {\n      type: GraphQLString,\n    },\n  },\n});\n","import { Controller } from '@rxdi/core';\nimport { Query, Type  } from '@gapi/core';\nimport { FileType } from './types/file.type';\nimport { FileService as InternalFileService } from './services/file.service';\nimport { FileService } from '../../services/file/file.service';\nimport { FileRawType } from './types/file-raw.type';\nimport { includes } from '../../services';\nimport { GraphQLString, GraphQLNonNull } from 'graphql';\n\n@Controller()\nexport class FileController {\n  constructor(private fileServiceInternal: InternalFileService, private fileService: FileService) {}\n\n  @Type(FileType)\n  @Query({\n    folder: {\n      type: GraphQLString,\n    },\n  })\n  async listFiles(root, { folder }) {\n    let filePath;\n    if (includes('--enable-full-folder-access')) {\n      filePath = folder;\n    } else {\n      folder = folder.replace('.', '');\n      filePath = process.cwd() + folder;\n    }\n    return {\n      paths: await this.fileServiceInternal.listFolder(filePath),\n    };\n  }\n\n  @Type(FileRawType)\n  @Query({\n    folder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  async readFile(root, { folder }: { folder: string }, context) {\n    let filePath;\n    if (includes('--enable-full-folder-access')) {\n      filePath = folder;\n    } else {\n      folder = folder.replace('.', '');\n      filePath = process.cwd() + folder;\n    }\n    const extension = filePath.split('.').pop();\n    const isImage = extension === 'jpg' || extension === 'jpeg' || extension === 'png';\n    let file = await this.fileService.readFile(filePath);\n    if (isImage) {\n      file = (await this.fileService.readFileRaw(filePath)).toString('base64');\n      file = `data:image/${extension};base64, ${file}`;\n    }\n\n    let reactivePackage = null;\n    try {\n      reactivePackage = await this.fileService.readFile(\n        filePath.substring(0, filePath.lastIndexOf('/')) + '/reactive.json'\n      );\n    } catch (e) {}\n    return {\n      package: reactivePackage,\n      file,\n    };\n  }\n\n  @Type(FileRawType)\n  @Query({\n    folder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    content: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  async saveFile(root, { folder, content }) {\n    let filePath;\n    if (includes('--enable-full-folder-access')) {\n      filePath = folder;\n    } else {\n      folder = folder.replace('.', '');\n      filePath = process.cwd() + folder;\n    }\n    await this.fileService.writeFile(filePath, content);\n    return {\n      file: await this.fileService.readFile(filePath),\n    };\n  }\n}\n","import { Module } from '@rxdi/core';\nimport { FileService } from './services/file.service';\nimport { FileController } from './file.controller';\n\n@Module({\n  services: [FileService],\n  controllers: [FileController],\n})\nexport class FileModule {}\n","import { GraphQLEnumType } from 'graphql';\n\nexport const TransactionTypeEnum = new GraphQLEnumType({\n  name: 'TransactionsTypeEnum',\n  values: {\n    DEPLOYED: {\n      value: 'DEPLOYED',\n    },\n    COMMITED: {\n      value: 'COMMITED',\n    },\n    UNKNOWN: {\n      value: 'UNKNOWN',\n    },\n    BUILD: {\n      value: 'BUILD',\n    },\n  },\n});\n\nexport type TransactionTypeEnum = 'DEPLOYED' | 'COMMITED' | 'UNKNOWN';\n","import { GraphQLObjectType, GraphQLString } from 'graphql';\nimport { TransactionTypeEnum } from './transaction-enum.type';\n\nexport const TransactionType = new GraphQLObjectType({\n  name: 'TransactionType',\n  fields: {\n    _id: {\n      type: GraphQLString,\n    },\n    status: {\n      type: TransactionTypeEnum,\n    },\n    birthtime: {\n      type: GraphQLString,\n    },\n    path: {\n      type: GraphQLString,\n    },\n    repoFolder: {\n      type: GraphQLString,\n    },\n    hash: {\n      type: GraphQLString,\n    },\n    namespace: {\n      type: GraphQLString,\n    },\n    message: {\n      type: GraphQLString,\n    },\n  },\n});\n","import { Injectable, Inject } from '@rxdi/core';\nimport { __TRANSACTIONS_DATABASE, __HOME_DIR } from '../../../../../env.injection.tokens';\nimport { ITransactionType } from '../../../../core/api-introspection/index';\nimport { CompileService } from '../../../services/compile.service';\nimport { PubSubService } from '@gapi/core';\nimport { TsConfigGenratorService, LoggerService, FileService as AppFileService } from '../../../..//services';\nimport { FileService } from '../../../file/services/file.service';\nimport { format, promisify } from 'util';\nimport { createWriteStream, exists, readFile, writeFile } from 'fs';\nimport { Subscription } from 'rxjs';\nimport { IPFSFile } from '@gapi/ipfs';\nimport { join } from 'path';\n\n@Injectable()\nexport class TransactionService {\n  @Inject(__TRANSACTIONS_DATABASE) private transaction: __TRANSACTIONS_DATABASE;\n  constructor(\n    private compileService: CompileService,\n    private pubsub: PubSubService,\n    private fileService: FileService,\n    private appFileService: AppFileService,\n    private tsGenerator: TsConfigGenratorService,\n    private loggerService: LoggerService\n  ) {}\n  getTransactionById(_id: string) {\n    return new Promise((resolve, reject) => {\n      this.transaction.findOne({ _id }, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        console.log(d);\n        resolve(d);\n      });\n    });\n  }\n\n  getTransactionByPath(path: string, repoFolder: string, payload?: ITransactionType) {\n    return new Promise((resolve, reject) => {\n      this.transaction.findOne({ path, repoFolder }, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  getTransactionByRepo(repoFolder: string, payload: ITransactionType = {} as any) {\n    return new Promise((resolve, reject) => {\n      this.transaction.findOne({ repoFolder, ...payload }, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  async add(doc: ITransactionType): Promise<ITransactionType> {\n    const isExist = (await this.getTransactionByPath(doc.path, doc.repoFolder, {\n      status: 'UNKNOWN',\n    } as any)) as ITransactionType;\n    if (isExist) {\n      throw new Error(\n        `File is already added to transaction ${isExist._id}: ${isExist.path} and not commited use (rxdi commit \"my-message\")`\n      );\n    }\n    return await new Promise((resolve, reject) => {\n      this.transaction.insert(doc, async (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        try {\n          await this.fileService.copyTransactionFiles(d._id, d.repoFolder, d.path);\n        } catch (e) {\n          return reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  async checkout(doc: ITransactionType): Promise<number> {\n    const transaction = (await this.getTransactionByPath(doc.path, doc.repoFolder)) as ITransactionType;\n    if (!transaction) {\n      throw new Error(`Transaction doesn't exist ${doc.path}`);\n    }\n    await this.fileService.removeTransaction(transaction._id, transaction.repoFolder, transaction.path).toPromise();\n    return await new Promise((resolve, reject) => {\n      this.transaction.remove(transaction, (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  async update(repoFolder: string, payload: ITransactionType): Promise<number> {\n    return await new Promise((resolve, reject) => {\n      this.transaction.update({ repoFolder }, payload, {}, async (e, d) => {\n        if (e) {\n          reject(e);\n        }\n        resolve(d);\n      });\n    });\n  }\n\n  async commit({ repoFolder, message }: ITransactionType): Promise<ITransactionType> {\n    console.log(repoFolder, message);\n    const transaction = (await this.getTransactionByRepo(repoFolder)) as ITransactionType;\n    if (!transaction) {\n      throw new Error(`Transaction doesn't exist ${repoFolder}`);\n    }\n    transaction.message = message;\n    transaction.status = 'COMMITED';\n\n    const isUpdated = await this.update(repoFolder, transaction);\n    if (!isUpdated) {\n      throw new Error('Transaction not commited');\n    }\n    return transaction;\n  }\n\n  private deploy(transactionId: string, repoFolder: string, fileName: string, message: string, namespace: string) {\n    // const { folder, file, message, namespace, buildFolder } = {} as any;\n    const { filename, transactionFolder, filePath } = this.fileService.prepareCopyData(\n      transactionId,\n      repoFolder,\n      fileName\n    );\n    return new Promise(async (resolve, reject) => {\n      await this.appFileService.writeFile(\n        filePath + '/tsconfig.json',\n        this.tsGenerator.getTsConfig(filename.replace('.ts', ''))\n      );\n      let packageJson: any = { browserslist: [] };\n      if (await promisify(exists)(join(filePath, 'package.json'))) {\n        packageJson = JSON.parse(\n          await promisify(readFile)(join(filePath, 'package.json'), {\n            encoding: 'utf-8',\n          })\n        );\n        if (packageJson.browserslist && packageJson.browserslist.length) {\n          const isExistsLatestChrome = packageJson.browserslist.find((item: string) =>\n            item.includes('last 1 chrome versions')\n          );\n          if (!isExistsLatestChrome) {\n            packageJson.browserslist.push('last 1 chrome versions');\n          }\n        } else {\n          packageJson.browserslist.push('last 1 chrome versions');\n        }\n        await promisify(writeFile)(join(filePath, 'package.json'), JSON.stringify(packageJson));\n      } else {\n        await this.appFileService.writeFile(filePath + '/package.json', this.tsGenerator.getPackageJson());\n      }\n\n      const log_file = createWriteStream(`${transactionFolder}/${filename}.log`, { flags: 'w' });\n      const subscription = this.loggerService.stdout.subscribe(log => {\n        log_file.write(format(log) + '\\n');\n        this.pubsub.publish('CREATE_SIGNAL_BASIC', { message: format(log) });\n      });\n      let sub: Subscription;\n      const cancelSubscription = () => {\n        subscription.unsubscribe();\n        log_file.close();\n        sub.unsubscribe();\n      };\n      sub = this.compileService.pushTransaction(transactionFolder, fileName, message, namespace, 'build').subscribe(\n        ({ module }: { module: IPFSFile }) => {\n          resolve({\n            message,\n            _id: transactionId,\n            hash: module.hash,\n          });\n          cancelSubscription();\n        },\n        e => {\n          cancelSubscription();\n          reject(e || 'Build failed');\n        }\n      );\n    });\n  }\n\n  async push({ repoFolder }: ITransactionType): Promise<ITransactionType> {\n    const transaction = (await this.getTransactionByRepo(repoFolder, {\n      status: 'COMMITED',\n    } as any)) as ITransactionType;\n    if (!transaction) {\n      throw new Error(\n        `No commited transactions inside ${repoFolder} \\n✎ Maybe you forgot to commit? example: (rxdi commit \"my-message\")`\n      );\n    }\n    await this.deploy(\n      transaction._id,\n      transaction.repoFolder,\n      transaction.path,\n      transaction.message,\n      transaction.namespace\n    );\n    transaction.status = 'DEPLOYED';\n    const isUpdated = await this.update(repoFolder, transaction);\n    if (!isUpdated) {\n      throw new Error('Transaction not commited');\n    }\n    return transaction;\n  }\n\n  listTransactions(\n    status: any,\n    repoFolder: string,\n    skip: number = 0,\n    limit: number = 100,\n    sort = { createdAt: -1 }\n  ): Promise<any[]> {\n    const find = {} as any;\n    if (status !== 'UNKNOWN') {\n      find.status = status;\n    }\n    find.repoFolder = repoFolder;\n    console.log(find);\n    return new Promise((resolve, reject) => {\n      this.transaction\n        .find(find)\n        .sort(sort)\n        .skip(skip)\n        .limit(limit)\n        .exec((e, d: any) => {\n          if (e) {\n            reject(e);\n          }\n          resolve(d);\n        });\n    });\n  }\n}\n","// tslint:disable\n// graphql typescript definitions\n\nexport interface IGraphQLResponseRoot {\n  data?: IQuery | IMutation | ISubscription;\n  errors?: Array<IGraphQLResponseError>;\n}\n\nexport interface IGraphQLResponseError {\n  message: string; // Required for all errors\n  locations?: Array<IGraphQLResponseErrorLocation>;\n  [propName: string]: any; // 7.2.2 says 'GraphQL servers may provide additional entries to error'\n}\n\nexport interface IGraphQLResponseErrorLocation {\n  line: number;\n  column: number;\n}\n\n/**\n    description?: Query type for all get requests which will not change persistent data\n  */\nexport interface IQuery {\n  __typename?: 'Query';\n  status?: IStatusQueryType | null;\n  getNamespace?: INamespacetype | null;\n  listNamespaces?: INamespaceListType | null;\n  getBuildHistory?: IHistoryListType | null;\n  listFiles?: IFileType | null;\n  readFile?: IFileRawType | null;\n  saveFile?: IFileRawType | null;\n  listTransactions?: Array<ITransactionType> | null;\n  findUser?: IUserType | null;\n}\n\nexport interface IStatusQueryType {\n  __typename?: 'StatusQueryType';\n  status?: string | null;\n}\n\nexport interface INamespacetype {\n  __typename?: 'Namespacetype';\n  _id?: string | null;\n  name?: string | null;\n  builds?: Array<IHistoryType> | null;\n}\n\nexport interface IHistoryType {\n  __typename?: 'HistoryType';\n  _id?: string | null;\n  name?: string | null;\n  typings?: string | null;\n  module?: string | null;\n  metadata?: string | null;\n  message?: string | null;\n  hash?: string | null;\n  status?: IBuildStatusType | null;\n  namespaceId?: string | null;\n  createdAt?: string | null;\n  updatedAt?: string | null;\n}\n\nexport interface IBuildStatusType {\n  __typename?: 'BuildStatusType';\n  file?: IBuildStatus | null;\n  typings?: IBuildStatus | null;\n  module?: IBuildStatus | null;\n}\n\nexport interface IBuildStatus {\n  __typename?: 'BuildStatus';\n  status?: string | null;\n  message?: string | null;\n}\n\nexport interface INamespaceListType {\n  __typename?: 'NamespaceListType';\n  count?: number | null;\n  rows?: Array<INamespacetype> | null;\n}\n\nexport interface IBuildWhereType {\n  namespaceId?: string | null;\n  name?: string | null;\n}\n\nexport interface IHistoryListType {\n  __typename?: 'HistoryListType';\n  count?: number | null;\n  rows?: Array<IHistoryType> | null;\n}\n\nexport interface IFileType {\n  __typename?: 'FileType';\n  paths?: Array<IFolderStructureType> | null;\n}\n\nexport interface IFolderStructureType {\n  __typename?: 'FolderStructureType';\n  path?: string | null;\n  directory?: boolean | null;\n  file?: boolean | null;\n  name?: string | null;\n  status?: IFileStatusType | null;\n}\n\nexport interface IFileStatusType {\n  __typename?: 'FileStatusType';\n  size?: string | null;\n  birthtime?: string | null;\n  ctime?: string | null;\n  mtime?: string | null;\n  atime?: string | null;\n  birthtimeMs?: string | null;\n  ctimeMs?: string | null;\n  mtimeMs?: string | null;\n  atimeMs?: string | null;\n  blocks?: number | null;\n  ino?: number | null;\n  blksize?: number | null;\n  rdev?: number | null;\n  gid?: number | null;\n  uid?: number | null;\n  nlink?: number | null;\n  mode?: number | null;\n  dev?: number | null;\n}\n\nexport interface IFileRawType {\n  __typename?: 'FileRawType';\n  package?: string | null;\n  file?: string | null;\n}\n\nexport type ITransactionsTypeEnumEnum = 'DEPLOYED' | 'COMMITED' | 'UNKNOWN' | 'BUILD';\n\nexport interface ITransactionType {\n  __typename?: 'TransactionType';\n  _id?: string | null;\n  status?: ITransactionsTypeEnumEnum | null;\n  birthtime?: string | null;\n  path?: string | null;\n  repoFolder?: string | null;\n  hash?: string | null;\n  namespace?: string | null;\n  message?: string | null;\n}\n\nexport interface IUserType {\n  __typename?: 'UserType';\n  message?: string | null;\n}\n\n/**\n    description?: Mutation type for all requests which will change persistent data\n  */\nexport interface IMutation {\n  __typename?: 'Mutation';\n  insertNamespace?: INamespacetype | null;\n  triggerBuild?: IBuildType | null;\n  addTransaction?: ITransactionType | null;\n  checkoutTransaction?: ITransactionType | null;\n  commitTransaction?: ITransactionType | null;\n  pushTransactionMutation?: ITransactionType | null;\n}\n\nexport interface IBuildType {\n  __typename?: 'BuildType';\n  file?: Array<IBuildMetaInfo> | null;\n  typings?: Array<IBuildMetaInfo> | null;\n  module?: Array<IBuildMetaInfo> | null;\n  status?: string | null;\n}\n\nexport interface IBuildMetaInfo {\n  __typename?: 'BuildMetaInfo';\n  path?: string | null;\n  hash?: string | null;\n}\n\n/**\n    description?: Subscription type for all subscriptions via pub sub\n  */\nexport interface ISubscription {\n  __typename?: 'Subscription';\n  listenForNewBuilds?: IHistoryType | null;\n  buildStatus?: IBuildStatusType | null;\n  processStdOut?: IProcessStdOutType | null;\n  subscribeToUserMessagesBasic?: IUserType | null;\n}\n\nexport interface IProcessStdOutType {\n  __typename?: 'ProcessStdOutType';\n  stdout?: string | null;\n}\n\n// tslint:enable\n","import {\n  Controller,\n  GraphQLControllerOptions,\n  Query,\n  Mutation,\n  Type,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLString,\n} from '@gapi/core';\nimport { TransactionType } from './types/transaction.type';\nimport { TransactionService } from './services/transaction/transaction.service';\nimport { TransactionTypeEnum } from './types/transaction-enum.type';\nimport { ITransactionType } from '../../core/api-introspection';\n\n@Controller<GraphQLControllerOptions>({\n  guards: [],\n  type: TransactionType,\n})\nexport class TransactionsController {\n  constructor(private transactionSevice: TransactionService) {}\n\n  @Mutation({\n    path: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    birthtime: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    repoFolder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    namespace: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  addTransaction(root, payload: ITransactionType) {\n    return this.transactionSevice.add({ ...payload, status: 'UNKNOWN' });\n  }\n\n  @Mutation({\n    path: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    repoFolder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  checkoutTransaction(root, payload: ITransactionType) {\n    return this.transactionSevice.checkout(payload);\n  }\n\n  @Mutation({\n    message: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n    repoFolder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  commitTransaction(root, payload: ITransactionType) {\n    return this.transactionSevice.commit(payload);\n  }\n\n  @Mutation({\n    repoFolder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  pushTransactionMutation(root, payload: ITransactionType) {\n    return this.transactionSevice.push(payload);\n  }\n\n  @Type(new GraphQLList(TransactionType))\n  @Query({\n    status: {\n      type: TransactionTypeEnum,\n    },\n    repoFolder: {\n      type: new GraphQLNonNull(GraphQLString),\n    },\n  })\n  listTransactions(root, { status, repoFolder }) {\n    return this.transactionSevice.listTransactions(status, repoFolder);\n  }\n}\n","import { Module } from '@gapi/core';\nimport { TransactionsController } from './transactions.controller';\nimport { TransactionService } from './services/transaction/transaction.service';\n\n@Module({\n  controllers: [TransactionsController],\n  providers: [TransactionService],\n})\nexport class TransactionsModule {}\n","import { Module, Container } from '@rxdi/core';\nimport { WebUiService } from './services/webui.service';\nimport { ServerPushService } from './services/server-push.service';\nimport { UserQueriesController } from './user/user-queries.controller';\nimport { HistoryModule } from './history/history.module';\nimport { CompileService } from './services/compile.service';\nimport { NamespaceModule } from './namespace/namespace.module';\nimport { BuildModule } from './build/build.module';\nimport { FileModule } from './file/file.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport {\n  ON_REQUEST_HANDLER,\n  GRAPHQL_PLUGIN_CONFIG,\n  Boom,\n  RESOLVER_HOOK,\n  GenericGapiResolversType,\n  errorUnauthorized,\n} from '@gapi/core';\nimport { ResponseToolkit, Request } from 'hapi';\nimport { InterceptorType, RequestHandler } from '../../env.injection.tokens';\nimport { nextOrDefault } from '../services';\n\n@Module({\n  imports: [HistoryModule, NamespaceModule, BuildModule, FileModule, TransactionsModule],\n  services: [WebUiService, ServerPushService, CompileService],\n  controllers: [UserQueriesController],\n  providers: [\n    {\n      provide: ON_REQUEST_HANDLER,\n      deps: [GRAPHQL_PLUGIN_CONFIG],\n      useFactory: (config: GRAPHQL_PLUGIN_CONFIG) => async (next, request: Request, h: ResponseToolkit, err: Error) => {\n        let interceptor: InterceptorType;\n        try {\n          interceptor = Container.get<InterceptorType>(RequestHandler);\n        } catch (e) {}\n        if (interceptor && interceptor.handler) {\n          try {\n            config.graphqlOptions.context = await interceptor.handler(request);\n          } catch (e) {\n            return Boom.unauthorized();\n          }\n        } else {\n          config.graphqlOptions.context = null;\n        }\n        return next();\n      },\n    },\n    {\n      provide: RESOLVER_HOOK,\n      useFactory: () => (resolver: GenericGapiResolversType) => {\n        const resolve = resolver.resolve.bind(resolver.target);\n        if (nextOrDefault('--interceptor')) {\n          let interceptor: InterceptorType;\n          try {\n            interceptor = Container.get<InterceptorType>(RequestHandler);\n          } catch (e) {}\n          if (interceptor && interceptor.resolverHook) {\n            resolver.resolve = async function(root, args, context, info, ...a) {\n              await interceptor.resolverHook(resolver, root, args, context, info);\n              return resolve(root, args, context, info, ...a);\n            };\n          }\n        }\n        return resolver;\n      },\n    },\n  ],\n})\nexport class ServerModule {}\n","import { spawn } from 'child_process';\n\nexport const TranspileTypescript = (paths: string[], outDir: string) => {\n  return new Promise((resolve, reject) => {\n    const child = spawn('npx', [\n      'gapi',\n      'build',\n      '--glob',\n      `${paths.toString()}`,\n      '--outDir',\n      outDir\n    ]);\n    // child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};","import { isFunction } from 'util';\n\n/**\n * Gets first item of the object without iterating all objects inside\n */\nexport function getFirstItem<T>(object: T) {\n  if (!object) {\n    return null;\n  }\n  let firstKey: string;\n  for (const key in object) {\n    firstKey = key;\n    break;\n  }\n  if (!object[firstKey]) {\n    throw new Error(`Missing method ${firstKey}`);\n  }\n  if (isFunction(object[firstKey])) {\n    object = object[firstKey];\n  }\n  return object;\n}\n","import { isFunction } from 'util';\n\n/**\n * Gets second item of the object without iterating all objects inside\n */\nexport function getSecondItem<T>(object: T) {\n  if (!object) {\n    return null;\n  }\n  let count = 0;\n  let secondKey: string;\n  for (const key in object) {\n    if (count === 1) {\n        secondKey = key;\n        break;\n    }\n    count++;\n  }\n  if (!object[secondKey]) {\n    throw new Error(`Missing method ${secondKey}`);\n  }\n  if (isFunction(object[secondKey])) {\n    object = object[secondKey];\n  }\n  return object;\n}\n","import { Module } from '@rxdi/core';\nimport { IpfsModule } from '@gapi/ipfs';\nimport { IpfsDaemonModule } from '@gapi/ipfs-daemon';\nimport { FileIpfsService } from './services/ipfs-file/ipfs-file.service';\nimport { FileService } from './services/file/file.service';\nimport { ParcelBundlerService } from './services/parcel-bundler/parcel-bundler.service';\nimport { FileUserService } from './services/file/file-user.service';\nimport { TypescriptDefinitionGeneratorService } from './services/dts-generator/dts-generator.service';\nimport { TsConfigGenratorService } from './services/tsconfig-generator/tsconfig-generator.service';\nimport { TableService } from './services/table-service/table-service';\nimport { StatusModule } from './status/status.module';\nimport { BuildHistoryService } from './services/build-history/build-history.service';\nimport { ErrorReasonService } from './services/error-reason/error-reason.service';\nimport { CompilePlugin } from './plugins/compile/compile.plugin';\nimport { TimeService } from './services/time/time.service';\nimport {\n  HtmlTemplateBuilder,\n  PackageJsonService,\n  nextOrDefault,\n  includes,\n  PreviousService,\n  LoggerService,\n} from './services';\nimport { ServerModule } from './server/server.module';\nimport { TranspileTypescript } from './core/helpers/transpile-typescript';\nimport { join } from 'path';\nimport { getFirstItem } from './core/helpers/get-first-item';\nimport { RequestHandler } from '../env.injection.tokens';\nimport { getSecondItem } from './core/helpers/get-second-item';\n\nconst _IMPORTS = [\n  IpfsDaemonModule.forRoot({\n    type: nextOrDefault('--default-ipfs-node', 'go'),\n    config: {\n      Addresses: {\n        API: process.env.IPFS_API_PORT\n          ? process.env.IPFS_API_PORT\n          : nextOrDefault('--ipfs-api-port', '/ip4/0.0.0.0/tcp/5002', a => `/ip4/0.0.0.0/tcp/${a}`),\n        Gateway: process.env.IPFS_API_GATEWAY\n          ? process.env.IPFS_API_GATEWAY\n          : nextOrDefault('--ipfs-api-gateway', '/ip4/0.0.0.0/tcp/8081', a => `/ip4/0.0.0.0/tcp/${a}`),\n        Swarm: nextOrDefault('--ipfs-swarms', ['/ip4/0.0.0.0/tcp/4001', '/ip6/::/tcp/4001'], a => a.split(',')),\n      },\n    },\n  }),\n  IpfsModule.forRoot(),\n  StatusModule,\n];\n\nincludes('--webui') ? _IMPORTS.push(ServerModule) : null;\n\n@Module({\n  imports: _IMPORTS,\n  services: [\n    FileIpfsService,\n    FileService,\n    ParcelBundlerService,\n    FileUserService,\n    TypescriptDefinitionGeneratorService,\n    TsConfigGenratorService,\n    TableService,\n    BuildHistoryService,\n    ErrorReasonService,\n    TimeService,\n    HtmlTemplateBuilder,\n    PackageJsonService,\n    PreviousService,\n    LoggerService,\n  ],\n  plugins: [CompilePlugin],\n  providers: [\n    {\n      provide: RequestHandler,\n      lazy: true,\n      useFactory: async () => {\n        const interceptorPath: string = nextOrDefault('--interceptor', null);\n        if (interceptorPath) {\n          await TranspileTypescript([interceptorPath.replace('.', '')], 'interceptor');\n          const modulePath = join(process.cwd(), 'interceptor', interceptorPath.replace('ts', 'js'));\n          return {\n            handler: getFirstItem(require(modulePath)),\n            resolverHook: getSecondItem(require(modulePath)),\n          };\n        }\n        return {\n          handler: null,\n        };\n      },\n    },\n  ],\n})\nexport class AppModule {}\n","import { CoreModule, Module } from '@gapi/core';\nimport { nextOrDefault, includes } from './app/services/helpers/helpers';\nimport { ModuleWithServices } from '@rxdi/core';\n\n@Module()\nexport class GapiFrameworkImports {\n  public static forRoot(init: boolean): ModuleWithServices {\n    let imports = [];\n    if (init) {\n      imports = [\n        CoreModule.forRoot({\n          server: {\n            randomPort: !process.env.RANDOM_PORT ? nextOrDefault('--random-port', false, Boolean) : false,\n            hapi: {\n              port: process.env.API_PORT ? process.env.API_PORT : nextOrDefault('--graphql-api-port', 9300, Number),\n              routes: {\n                cors: {\n                  origin: ['*'],\n                  additionalHeaders: [\n                    'Host',\n                    'User-Agent',\n                    'Accept',\n                    'Accept-Language',\n                    'Accept-Encoding',\n                    'Access-Control-Request-Method',\n                    'Access-Control-Allow-Origin',\n                    'Access-Control-Request-Headers',\n                    'Origin',\n                    'Connection',\n                    'Pragma',\n                    'Cache-Control',\n                  ],\n                },\n              },\n            },\n          },\n          graphql: {\n            path: nextOrDefault('--graphql-endpoint', '/graphql'),\n            openBrowser: includes('--open-browser-graphiql'),\n            watcherPort: nextOrDefault('--open-browser-graphiql', 8967),\n            writeEffects: includes('--write-effects'),\n            // graphiql: includes('--graphiql'),\n            graphiQlPlayground: includes('--graphiql-playground'),\n            graphiQlPath: nextOrDefault('--graphiql-endpoint', '/graphiql'),\n            graphiqlOptions: {\n              endpointURL: nextOrDefault('--graphql-endpoint', '/graphql'),\n              passHeader: `'Authorization':'${nextOrDefault('--graphiql-auth-token', '')}'`,\n              subscriptionsEndpoint: nextOrDefault(\n                '--graphiql-subscription-endpoint',\n                'ws://localhost:9300/subscriptions'\n              ),\n              websocketConnectionParams: {\n                token: nextOrDefault('--graphiql-auth-token', ''),\n              },\n            },\n            graphqlOptions: {\n              schema: null,\n            },\n          },\n        }),\n      ];\n    }\n    return {\n      module: GapiFrameworkImports,\n      frameworkImports: imports,\n    };\n  }\n}\n","import { spawn } from 'child_process';\nimport { dirname, join } from 'path';\nimport { promisify } from 'util';\nimport { exists, readdir, readFile } from 'fs';\n\nexport const NpmInstall = async (packages: string[] = []) => {\n  const args = [];\n  if (await promisify(exists)(join(process.cwd(), 'package.json'))) {\n    const packageJson: {dependencies: {[key: string]: string}} = JSON.parse((await promisify(readFile)(join(process.cwd(), 'package.json'), {encoding: 'utf-8'})));\n    if (packageJson.dependencies) {\n      const packages = Object.keys(packageJson.dependencies).map(key => `${key}@${packageJson.dependencies[key]}`);\n      args.push(...packages);\n    }\n  } else {\n    args.push(...packages);\n  }\n  console.log('Packages to be installed: ', args.join(' '));\n  return new Promise((resolve, reject) => {\n    const child = spawn('npm', ['install', ...args], {cwd: process.cwd().replace('files', '')});\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    child.on('close', (code: number) => resolve(code));\n  });\n};","#!/usr/bin/env node\n// process.argv.push('--webui');\nimport { checkArguments } from './check-arguments';\nimport { Container, ConfigService, BootstrapFramework } from '@rxdi/core';\nimport { CommandDescription } from './commands-description';\nimport { includes, nextOrDefault } from './app/services/helpers/helpers';\nimport { LoggerService } from './app/services/logger/logger.service';\nconst Table = require('terminal-table');\nconst originalLog = console.log;\n\nconsole.log = function(...a) {\n  Container.get(LoggerService).stdout.next(a.toString());\n  return originalLog(...a);\n};\n\nincludes('--silent') ? (console.log = () => null) : null;\n\nif (includes('--help')) {\n  const t = new Table({\n    borderStyle: 2,\n    horizontalLine: true,\n    width: ['20%', '80%'],\n    leftPadding: 1,\n  });\n  t.push(['Command', 'Description']);\n  t.push([`\\Available arguments are:`]);\n  Object.keys(CommandDescription).forEach(c => t.push([c, CommandDescription[c]]));\n  t.attrRange(\n    { row: [0, 1] },\n    {\n      align: 'center',\n      color: 'green',\n      bg: 'black',\n    }\n  );\n  console.log('' + t);\n  process.exit(0);\n}\n\ncheckArguments();\n\nimport { EnvironemntSetterModule } from './environment-setter.module';\nimport { AppModule } from './app/app.module';\nimport { GapiFrameworkImports } from './gapi-framework-imports';\nimport { TranspileTypescript } from './app/core/helpers/transpile-typescript';\nimport { join } from 'path';\nimport { getFirstItem } from './app/core/helpers/get-first-item';\nimport { NpmInstall } from './app/core/helpers/npm-install';\n\nContainer.get(ConfigService).setConfig({\n  ...(process.argv.toString().includes('-v') || process.argv.toString().includes('--verbose')\n    ? {\n        logger: {\n          logging: true,\n          hashes: false,\n          date: true,\n          exitHandler: true,\n          fileService: true,\n        },\n      }\n    : {}),\n  init: false,\n  initOptions: {\n    services: true,\n    plugins: true,\n    controllers: true,\n  },\n});\n\nconst _FRAMEWORK_IMPORTS = [\n  EnvironemntSetterModule,\n  GapiFrameworkImports.forRoot(includes('--webui') || includes('--graphql-server-only')),\n];\n\nasync function Main() {\n  if (includes('--globals')) {\n    const argument = nextOrDefault('--globals', '');\n    const globals = ((argument as string) || '').split(',');\n    if (!globals.length) {\n      globals.push(argument);\n    }\n    await NpmInstall(globals);\n  }\n  if (includes('--import')) {\n    const interceptorPath: string = nextOrDefault('--import', './import.ts');\n    try {\n      await TranspileTypescript([interceptorPath.replace('.', '')], 'import');\n      const modulePath = join(process.cwd(), 'import', interceptorPath.replace('ts', 'js'));\n      _FRAMEWORK_IMPORTS.push(getFirstItem(require(modulePath)));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  BootstrapFramework(AppModule, _FRAMEWORK_IMPORTS).subscribe(\n    () => {\n      console.log('Started! Use --open-browser argument! Enjoy! :)');\n    },\n    error => {\n      throw new Error(error);\n    }\n  );\n}\n\nMain();\n"]}